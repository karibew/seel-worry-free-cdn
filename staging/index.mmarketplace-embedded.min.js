/*! For license information please see index.marketplace-embedded.min.js.LICENSE.txt */
(()=>{var e={"./node_modules/css-loader/dist/runtime/api.js":e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(i[s]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);r&&i[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),t.push(c))}},t}},"./node_modules/css-loader/dist/runtime/sourceMaps.js":e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},"./node_modules/exenv/index.js":(e,t,n)=>{var r;!function(){"use strict";var o=!("undefined"==typeof window||!window.document||!window.document.createElement),a={canUseDOM:o,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:o&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:o&&!!window.screen};void 0===(r=function(){return a}.call(t,n,t,e))||(e.exports=r)}()},"./node_modules/lodash._reinterpolate/index.js":e=>{e.exports=/<%=([\s\S]+?)%>/g},"./node_modules/lodash.template/index.js":(e,t,n)=>{e=n.nmd(e);var r=n("./node_modules/lodash._reinterpolate/index.js"),o=n("./node_modules/lodash.templatesettings/index.js"),a=800,i=16,l=1/0,s=9007199254740991,u="[object Arguments]",c="[object AsyncFunction]",d="[object DOMException]",f="[object Error]",p="[object Function]",h="[object GeneratorFunction]",m="[object Null]",v="[object Object]",y="[object Proxy]",g="[object Symbol]",b="[object Undefined]",w=/\b__p \+= '';/g,k=/\b(__p \+=) '' \+/g,A=/(__e\(.*?\)|\b__t\)) \+\n'';/g,E=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,x=/^\[object .+?Constructor\]$/,C=/^(?:0|[1-9]\d*)$/,S=/($^)/,_=/['\n\r\u2028\u2029\\]/g,T={};T["[object Float32Array]"]=T["[object Float64Array]"]=T["[object Int8Array]"]=T["[object Int16Array]"]=T["[object Int32Array]"]=T["[object Uint8Array]"]=T["[object Uint8ClampedArray]"]=T["[object Uint16Array]"]=T["[object Uint32Array]"]=!0,T[u]=T["[object Array]"]=T["[object ArrayBuffer]"]=T["[object Boolean]"]=T["[object DataView]"]=T["[object Date]"]=T[f]=T[p]=T["[object Map]"]=T["[object Number]"]=T[v]=T["[object RegExp]"]=T["[object Set]"]=T["[object String]"]=T["[object WeakMap]"]=!1;var O={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},R="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,P="object"==typeof self&&self&&self.Object===Object&&self,j=R||P||Function("return this")(),D=t&&!t.nodeType&&t,I=D&&e&&!e.nodeType&&e,L=I&&I.exports===D,B=L&&R.process,N=function(){try{var e=I&&I.require&&I.require("util").types;return e||B&&B.binding&&B.binding("util")}catch(e){}}(),M=N&&N.isTypedArray;function z(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}function U(e,t){for(var n=-1,r=null==e?0:e.length,o=Array(r);++n<r;)o[n]=t(e[n],n,e);return o}function F(e){return"\\"+O[e]}function W(e,t){return function(n){return e(t(n))}}var $,H=Function.prototype,V=Object.prototype,q=j["__core-js_shared__"],Y=H.toString,Q=V.hasOwnProperty,G=($=/[^.]+$/.exec(q&&q.keys&&q.keys.IE_PROTO||""))?"Symbol(src)_1."+$:"",K=V.toString,X=Y.call(Object),Z=RegExp("^"+Y.call(Q).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),J=L?j.Buffer:void 0,ee=j.Symbol,te=W(Object.getPrototypeOf,Object),ne=V.propertyIsEnumerable,re=ee?ee.toStringTag:void 0,oe=function(){try{var e=function(e){if(!Be(e)||function(e){return!!G&&G in e}(e))return!1;var t=Ie(e)?Z:x;return t.test(function(e){if(null!=e){try{return Y.call(e)}catch(e){}try{return e+""}catch(e){}}return""}(e))}(t=function(e,t){return null==e?void 0:e[t]}(Object,"defineProperty"))?t:void 0;return e({},"",{}),e}catch(e){}var t}(),ae=J?J.isBuffer:void 0,ie=W(Object.keys,Object),le=Math.max,se=Date.now,ue=ee?ee.prototype:void 0,ce=ue?ue.toString:void 0;function de(e,t){var n=Re(e),r=!n&&Oe(e),o=!n&&!r&&je(e),a=!n&&!r&&!o&&Me(e),i=n||r||o||a,l=i?function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}(e.length,String):[],s=l.length;for(var u in e)!t&&!Q.call(e,u)||i&&("length"==u||o&&("offset"==u||"parent"==u)||a&&("buffer"==u||"byteLength"==u||"byteOffset"==u)||ke(u,s))||l.push(u);return l}function fe(e,t,n){var r=e[t];Q.call(e,t)&&Te(r,n)&&(void 0!==n||t in e)||pe(e,t,n)}function pe(e,t,n){"__proto__"==t&&oe?oe(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}function he(e){return null==e?void 0===e?b:m:re&&re in Object(e)?function(e){var t=Q.call(e,re),n=e[re];try{e[re]=void 0;var r=!0}catch(e){}var o=K.call(e);r&&(t?e[re]=n:delete e[re]);return o}(e):function(e){return K.call(e)}(e)}function me(e){return Ne(e)&&he(e)==u}function ve(e){if(!Be(e))return function(e){var t=[];if(null!=e)for(var n in Object(e))t.push(n);return t}(e);var t=Ee(e),n=[];for(var r in e)("constructor"!=r||!t&&Q.call(e,r))&&n.push(r);return n}function ye(e,t){return _e(function(e,t,n){return t=le(void 0===t?e.length-1:t,0),function(){for(var r=arguments,o=-1,a=le(r.length-t,0),i=Array(a);++o<a;)i[o]=r[t+o];o=-1;for(var l=Array(t+1);++o<t;)l[o]=r[o];return l[t]=n(i),z(e,this,l)}}(e,t,$e),e+"")}var ge=oe?function(e,t){return oe(e,"toString",{configurable:!0,enumerable:!1,value:(n=t,function(){return n}),writable:!0});var n}:$e;function be(e){if("string"==typeof e)return e;if(Re(e))return U(e,be)+"";if(function(e){return"symbol"==typeof e||Ne(e)&&he(e)==g}(e))return ce?ce.call(e):"";var t=e+"";return"0"==t&&1/e==-l?"-0":t}function we(e,t,n,r){return void 0===e||Te(e,V[n])&&!Q.call(r,n)?t:e}function ke(e,t){var n=typeof e;return!!(t=null==t?s:t)&&("number"==n||"symbol"!=n&&C.test(e))&&e>-1&&e%1==0&&e<t}function Ae(e,t,n){if(!Be(n))return!1;var r=typeof t;return!!("number"==r?Pe(n)&&ke(t,n.length):"string"==r&&t in n)&&Te(n[t],e)}function Ee(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||V)}var xe,Ce,Se,_e=(xe=ge,Ce=0,Se=0,function(){var e=se(),t=i-(e-Se);if(Se=e,t>0){if(++Ce>=a)return arguments[0]}else Ce=0;return xe.apply(void 0,arguments)});function Te(e,t){return e===t||e!=e&&t!=t}var Oe=me(function(){return arguments}())?me:function(e){return Ne(e)&&Q.call(e,"callee")&&!ne.call(e,"callee")},Re=Array.isArray;function Pe(e){return null!=e&&Le(e.length)&&!Ie(e)}var je=ae||function(){return!1};function De(e){if(!Ne(e))return!1;var t=he(e);return t==f||t==d||"string"==typeof e.message&&"string"==typeof e.name&&!function(e){if(!Ne(e)||he(e)!=v)return!1;var t=te(e);if(null===t)return!0;var n=Q.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&Y.call(n)==X}(e)}function Ie(e){if(!Be(e))return!1;var t=he(e);return t==p||t==h||t==c||t==y}function Le(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=s}function Be(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function Ne(e){return null!=e&&"object"==typeof e}var Me=M?function(e){return function(t){return e(t)}}(M):function(e){return Ne(e)&&Le(e.length)&&!!T[he(e)]};var ze,Ue=(ze=function(e,t,n,r){!function(e,t,n,r){var o=!n;n||(n={});for(var a=-1,i=t.length;++a<i;){var l=t[a],s=r?r(n[l],e[l],l,n,e):void 0;void 0===s&&(s=e[l]),o?pe(n,l,s):fe(n,l,s)}}(t,function(e){return Pe(e)?de(e,!0):ve(e)}(t),e,r)},ye((function(e,t){var n=-1,r=t.length,o=r>1?t[r-1]:void 0,a=r>2?t[2]:void 0;for(o=ze.length>3&&"function"==typeof o?(r--,o):void 0,a&&Ae(t[0],t[1],a)&&(o=r<3?void 0:o,r=1),e=Object(e);++n<r;){var i=t[n];i&&ze(e,i,n,o)}return e})));function Fe(e){return Pe(e)?de(e):function(e){if(!Ee(e))return ie(e);var t=[];for(var n in Object(e))Q.call(e,n)&&"constructor"!=n&&t.push(n);return t}(e)}var We=ye((function(e,t){try{return z(e,void 0,t)}catch(e){return De(e)?e:new Error(e)}}));function $e(e){return e}e.exports=function(e,t,n){var a,i=o.imports._.templateSettings||o;n&&Ae(e,t,n)&&(t=void 0),e=null==(a=e)?"":be(a),t=Ue({},t,i,we);var l,s,u,c=Ue({},t.imports,i.imports,we),d=Fe(c),f=(l=c,U(d,(function(e){return l[e]}))),p=0,h=t.interpolate||S,m="__p += '",v=RegExp((t.escape||S).source+"|"+h.source+"|"+(h===r?E:S).source+"|"+(t.evaluate||S).source+"|$","g"),y=Q.call(t,"sourceURL")?"//# sourceURL="+(t.sourceURL+"").replace(/[\r\n]/g," ")+"\n":"";e.replace(v,(function(t,n,r,o,a,i){return r||(r=o),m+=e.slice(p,i).replace(_,F),n&&(s=!0,m+="' +\n__e("+n+") +\n'"),a&&(u=!0,m+="';\n"+a+";\n__p += '"),r&&(m+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),p=i+t.length,t})),m+="';\n";var g=Q.call(t,"variable")&&t.variable;g||(m="with (obj) {\n"+m+"\n}\n"),m=(u?m.replace(w,""):m).replace(k,"$1").replace(A,"$1;"),m="function("+(g||"obj")+") {\n"+(g?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(s?", __e = _.escape":"")+(u?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+m+"return __p\n}";var b=We((function(){return Function(d,y+"return "+m).apply(void 0,f)}));if(b.source=m,De(b))throw b;return b}},"./node_modules/lodash.templatesettings/index.js":(e,t,n)=>{var r=n("./node_modules/lodash._reinterpolate/index.js"),o=1/0,a="[object Null]",i="[object Symbol]",l="[object Undefined]",s=/[&<>"']/g,u=RegExp(s.source),c="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,d="object"==typeof self&&self&&self.Object===Object&&self,f=c||d||Function("return this")();var p,h=(p={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},function(e){return null==p?void 0:p[e]}),m=Object.prototype,v=m.hasOwnProperty,y=m.toString,g=f.Symbol,b=g?g.toStringTag:void 0,w=g?g.prototype:void 0,k=w?w.toString:void 0,A={escape:/<%-([\s\S]+?)%>/g,evaluate:/<%([\s\S]+?)%>/g,interpolate:r,variable:"",imports:{_:{escape:function(e){return(e=S(e))&&u.test(e)?e.replace(s,h):e}}}};function E(e){return null==e?void 0===e?l:a:b&&b in Object(e)?function(e){var t=v.call(e,b),n=e[b];try{e[b]=void 0;var r=!0}catch(e){}var o=y.call(e);r&&(t?e[b]=n:delete e[b]);return o}(e):function(e){return y.call(e)}(e)}function x(e){if("string"==typeof e)return e;if(C(e))return function(e,t){for(var n=-1,r=null==e?0:e.length,o=Array(r);++n<r;)o[n]=t(e[n],n,e);return o}(e,x)+"";if(function(e){return"symbol"==typeof e||function(e){return null!=e&&"object"==typeof e}(e)&&E(e)==i}(e))return k?k.call(e):"";var t=e+"";return"0"==t&&1/e==-o?"-0":t}var C=Array.isArray;function S(e){return null==e?"":x(e)}e.exports=A},"./node_modules/object-assign/index.js":e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,o){for(var a,i,l=function(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),s=1;s<arguments.length;s++){for(var u in a=Object(arguments[s]))n.call(a,u)&&(l[u]=a[u]);if(t){i=t(a);for(var c=0;c<i.length;c++)r.call(a,i[c])&&(l[i[c]]=a[i[c]])}}return l}},"./node_modules/prop-types/checkPropTypes.js":(e,t,n)=>{"use strict";var r=function(){},o=n("./node_modules/prop-types/lib/ReactPropTypesSecret.js"),a={},i=n("./node_modules/prop-types/lib/has.js");function l(e,t,n,l,s){for(var u in e)if(i(e,u)){var c;try{if("function"!=typeof e[u]){var d=Error((l||"React class")+": "+n+" type `"+u+"` is invalid; it must be a function, usually from the `prop-types` package, but received `"+typeof e[u]+"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");throw d.name="Invariant Violation",d}c=e[u](t,u,l,n,null,o)}catch(e){c=e}if(!c||c instanceof Error||r((l||"React class")+": type specification of "+n+" `"+u+"` is invalid; the type checker function must return `null` or an `Error` but returned a "+typeof c+". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."),c instanceof Error&&!(c.message in a)){a[c.message]=!0;var f=s?s():"";r("Failed "+n+" type: "+c.message+(null!=f?f:""))}}}r=function(e){var t="Warning: "+e;try{throw new Error(t)}catch(e){}},l.resetWarningCache=function(){a={}},e.exports=l},"./node_modules/prop-types/factoryWithTypeCheckers.js":(e,t,n)=>{"use strict";var r=n("./node_modules/react-is/index.js"),o=n("./node_modules/object-assign/index.js"),a=n("./node_modules/prop-types/lib/ReactPropTypesSecret.js"),i=n("./node_modules/prop-types/lib/has.js"),l=n("./node_modules/prop-types/checkPropTypes.js"),s=function(){};function u(){return null}s=function(e){var t="Warning: "+e;try{throw new Error(t)}catch(e){}},e.exports=function(e,t){var n="function"==typeof Symbol&&Symbol.iterator,c="@@iterator";var d="<<anonymous>>",f={array:v("array"),bigint:v("bigint"),bool:v("boolean"),func:v("function"),number:v("number"),object:v("object"),string:v("string"),symbol:v("symbol"),any:m(u),arrayOf:function(e){return m((function(t,n,r,o,i){if("function"!=typeof e)return new h("Property `"+i+"` of component `"+r+"` has invalid PropType notation inside arrayOf.");var l=t[n];if(!Array.isArray(l))return new h("Invalid "+o+" `"+i+"` of type `"+b(l)+"` supplied to `"+r+"`, expected an array.");for(var s=0;s<l.length;s++){var u=e(l,s,r,o,i+"["+s+"]",a);if(u instanceof Error)return u}return null}))},element:m((function(t,n,r,o,a){var i=t[n];return e(i)?null:new h("Invalid "+o+" `"+a+"` of type `"+b(i)+"` supplied to `"+r+"`, expected a single ReactElement.")})),elementType:m((function(e,t,n,o,a){var i=e[t];return r.isValidElementType(i)?null:new h("Invalid "+o+" `"+a+"` of type `"+b(i)+"` supplied to `"+n+"`, expected a single ReactElement type.")})),instanceOf:function(e){return m((function(t,n,r,o,a){if(!(t[n]instanceof e)){var i=e.name||d;return new h("Invalid "+o+" `"+a+"` of type `"+(((l=t[n]).constructor&&l.constructor.name?l.constructor.name:d)+"` supplied to `")+r+"`, expected instance of `"+i+"`.")}var l;return null}))},node:m((function(e,t,n,r,o){return g(e[t])?null:new h("Invalid "+r+" `"+o+"` supplied to `"+n+"`, expected a ReactNode.")})),objectOf:function(e){return m((function(t,n,r,o,l){if("function"!=typeof e)return new h("Property `"+l+"` of component `"+r+"` has invalid PropType notation inside objectOf.");var s=t[n],u=b(s);if("object"!==u)return new h("Invalid "+o+" `"+l+"` of type `"+u+"` supplied to `"+r+"`, expected an object.");for(var c in s)if(i(s,c)){var d=e(s,c,r,o,l+"."+c,a);if(d instanceof Error)return d}return null}))},oneOf:function(e){if(!Array.isArray(e))return s(arguments.length>1?"Invalid arguments supplied to oneOf, expected an array, got "+arguments.length+" arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).":"Invalid argument supplied to oneOf, expected an array."),u;return m((function(t,n,r,o,a){for(var i=t[n],l=0;l<e.length;l++)if(p(i,e[l]))return null;var s=JSON.stringify(e,(function(e,t){return"symbol"===w(t)?String(t):t}));return new h("Invalid "+o+" `"+a+"` of value `"+String(i)+"` supplied to `"+r+"`, expected one of "+s+".")}))},oneOfType:function(e){if(!Array.isArray(e))return s("Invalid argument supplied to oneOfType, expected an instance of array."),u;for(var t=0;t<e.length;t++){var n=e[t];if("function"!=typeof n)return s("Invalid argument supplied to oneOfType. Expected an array of check functions, but received "+k(n)+" at index "+t+"."),u}return m((function(t,n,r,o,l){for(var s=[],u=0;u<e.length;u++){var c=(0,e[u])(t,n,r,o,l,a);if(null==c)return null;c.data&&i(c.data,"expectedType")&&s.push(c.data.expectedType)}return new h("Invalid "+o+" `"+l+"` supplied to `"+r+"`"+(s.length>0?", expected one of type ["+s.join(", ")+"]":"")+".")}))},shape:function(e){return m((function(t,n,r,o,i){var l=t[n],s=b(l);if("object"!==s)return new h("Invalid "+o+" `"+i+"` of type `"+s+"` supplied to `"+r+"`, expected `object`.");for(var u in e){var c=e[u];if("function"!=typeof c)return y(r,o,i,u,w(c));var d=c(l,u,r,o,i+"."+u,a);if(d)return d}return null}))},exact:function(e){return m((function(t,n,r,l,s){var u=t[n],c=b(u);if("object"!==c)return new h("Invalid "+l+" `"+s+"` of type `"+c+"` supplied to `"+r+"`, expected `object`.");var d=o({},t[n],e);for(var f in d){var p=e[f];if(i(e,f)&&"function"!=typeof p)return y(r,l,s,f,w(p));if(!p)return new h("Invalid "+l+" `"+s+"` key `"+f+"` supplied to `"+r+"`.\nBad object: "+JSON.stringify(t[n],null,"  ")+"\nValid keys: "+JSON.stringify(Object.keys(e),null,"  "));var m=p(u,f,r,l,s+"."+f,a);if(m)return m}return null}))}};function p(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function h(e,t){this.message=e,this.data=t&&"object"==typeof t?t:{},this.stack=""}function m(e){var n={},r=0;function o(o,i,l,u,c,f,p){if(u=u||d,f=f||l,p!==a){if(t){var m=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");throw m.name="Invariant Violation",m}if("undefined"!=typeof console){var v=u+":"+l;!n[v]&&r<3&&(s("You are manually calling a React.PropTypes validation function for the `"+f+"` prop on `"+u+"`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."),n[v]=!0,r++)}}return null==i[l]?o?null===i[l]?new h("The "+c+" `"+f+"` is marked as required in `"+u+"`, but its value is `null`."):new h("The "+c+" `"+f+"` is marked as required in `"+u+"`, but its value is `undefined`."):null:e(i,l,u,c,f)}var i=o.bind(null,!1);return i.isRequired=o.bind(null,!0),i}function v(e){return m((function(t,n,r,o,a,i){var l=t[n];return b(l)!==e?new h("Invalid "+o+" `"+a+"` of type `"+w(l)+"` supplied to `"+r+"`, expected `"+e+"`.",{expectedType:e}):null}))}function y(e,t,n,r,o){return new h((e||"React class")+": "+t+" type `"+n+"."+r+"` is invalid; it must be a function, usually from the `prop-types` package, but received `"+o+"`.")}function g(t){switch(typeof t){case"number":case"string":case"undefined":return!0;case"boolean":return!t;case"object":if(Array.isArray(t))return t.every(g);if(null===t||e(t))return!0;var r=function(e){var t=e&&(n&&e[n]||e[c]);if("function"==typeof t)return t}(t);if(!r)return!1;var o,a=r.call(t);if(r!==t.entries){for(;!(o=a.next()).done;)if(!g(o.value))return!1}else for(;!(o=a.next()).done;){var i=o.value;if(i&&!g(i[1]))return!1}return!0;default:return!1}}function b(e){var t=typeof e;return Array.isArray(e)?"array":e instanceof RegExp?"object":function(e,t){return"symbol"===e||!!t&&("Symbol"===t["@@toStringTag"]||"function"==typeof Symbol&&t instanceof Symbol)}(t,e)?"symbol":t}function w(e){if(null==e)return""+e;var t=b(e);if("object"===t){if(e instanceof Date)return"date";if(e instanceof RegExp)return"regexp"}return t}function k(e){var t=w(e);switch(t){case"array":case"object":return"an "+t;case"boolean":case"date":case"regexp":return"a "+t;default:return t}}return h.prototype=Error.prototype,f.checkPropTypes=l,f.resetWarningCache=l.resetWarningCache,f.PropTypes=f,f}},"./node_modules/prop-types/index.js":(e,t,n)=>{var r=n("./node_modules/react-is/index.js");e.exports=n("./node_modules/prop-types/factoryWithTypeCheckers.js")(r.isElement,!0)},"./node_modules/prop-types/lib/ReactPropTypesSecret.js":e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},"./node_modules/prop-types/lib/has.js":e=>{e.exports=Function.call.bind(Object.prototype.hasOwnProperty)},"./node_modules/react-dom/cjs/react-dom.development.js":(e,t,n)=>{"use strict";(function(){"undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart&&__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error);var e=n("./node_modules/react/index.js"),r=n("./node_modules/scheduler/index.js"),o=e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,a=!1;function i(e){if(!a){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];s("warn",e,n)}}function l(e){if(!a){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];s("error",e,n)}}function s(e,t,n){var r=o.ReactDebugCurrentFrame.getStackAddendum();""!==r&&(t+="%s",n=n.concat([r]));var a=n.map((function(e){return String(e)}));a.unshift("Warning: "+t),Function.prototype.apply.call(console[e],console,a)}var u=0,c=1,d=2,f=3,p=4,h=5,m=6,v=7,y=8,g=9,b=10,w=11,k=12,A=13,E=14,x=15,C=16,S=17,_=18,T=19,O=21,R=22,P=23,j=24,D=25,I=!0,L=!1,B=!1,N=!1,M=!1,z=!0,U=!1,F=!1,W=!0,$=!0,H=!0,V=new Set,q={},Y={};function Q(e,t){G(e,t),G(e+"Capture",t)}function G(e,t){q[e]&&l("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.",e),q[e]=t;var n=e.toLowerCase();Y[n]=e,"onDoubleClick"===e&&(Y.ondblclick=e);for(var r=0;r<t.length;r++)V.add(t[r])}var K=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),X=Object.prototype.hasOwnProperty;function Z(e){return"function"==typeof Symbol&&Symbol.toStringTag&&e[Symbol.toStringTag]||e.constructor.name||"Object"}function J(e){try{return ee(e),!1}catch(e){return!0}}function ee(e){return""+e}function te(e,t){if(J(e))return l("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.",t,Z(e)),ee(e)}function ne(e){if(J(e))return l("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.",Z(e)),ee(e)}var re=0,oe=2,ae=3,ie=4,le=5,se=6,ue=":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD",ce=ue+"\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040",de=new RegExp("^["+ue+"]["+ce+"]*$"),fe={},pe={};function he(e){return!!X.call(pe,e)||!X.call(fe,e)&&(de.test(e)?(pe[e]=!0,!0):(fe[e]=!0,l("Invalid attribute name: `%s`",e),!1))}function me(e,t,n){return null!==t?t.type===re:!n&&(e.length>2&&("o"===e[0]||"O"===e[0])&&("n"===e[1]||"N"===e[1]))}function ve(e,t,n,r){if(null!==n&&n.type===re)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":if(r)return!1;if(null!==n)return!n.acceptsBooleans;var o=e.toLowerCase().slice(0,5);return"data-"!==o&&"aria-"!==o;default:return!1}}function ye(e,t,n,r){if(null==t)return!0;if(ve(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case ae:return!t;case ie:return!1===t;case le:return isNaN(t);case se:return isNaN(t)||t<1}return!1}function ge(e){return we.hasOwnProperty(e)?we[e]:null}function be(e,t,n,r,o,a,i){this.acceptsBooleans=t===oe||t===ae||t===ie,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var we={};["children","dangerouslySetInnerHTML","defaultValue","defaultChecked","innerHTML","suppressContentEditableWarning","suppressHydrationWarning","style"].forEach((function(e){we[e]=new be(e,re,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0],n=e[1];we[t]=new be(t,1,!1,n,null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){we[e]=new be(e,oe,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){we[e]=new be(e,oe,!1,e,null,!1,!1)})),["allowFullScreen","async","autoFocus","autoPlay","controls","default","defer","disabled","disablePictureInPicture","disableRemotePlayback","formNoValidate","hidden","loop","noModule","noValidate","open","playsInline","readOnly","required","reversed","scoped","seamless","itemScope"].forEach((function(e){we[e]=new be(e,ae,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){we[e]=new be(e,ae,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){we[e]=new be(e,ie,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){we[e]=new be(e,se,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){we[e]=new be(e,le,!1,e.toLowerCase(),null,!1,!1)}));var ke=/[\-\:]([a-z])/g,Ae=function(e){return e[1].toUpperCase()};["accent-height","alignment-baseline","arabic-form","baseline-shift","cap-height","clip-path","clip-rule","color-interpolation","color-interpolation-filters","color-profile","color-rendering","dominant-baseline","enable-background","fill-opacity","fill-rule","flood-color","flood-opacity","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","glyph-name","glyph-orientation-horizontal","glyph-orientation-vertical","horiz-adv-x","horiz-origin-x","image-rendering","letter-spacing","lighting-color","marker-end","marker-mid","marker-start","overline-position","overline-thickness","paint-order","panose-1","pointer-events","rendering-intent","shape-rendering","stop-color","stop-opacity","strikethrough-position","strikethrough-thickness","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","text-anchor","text-decoration","text-rendering","underline-position","underline-thickness","unicode-bidi","unicode-range","units-per-em","v-alphabetic","v-hanging","v-ideographic","v-mathematical","vector-effect","vert-adv-y","vert-origin-x","vert-origin-y","word-spacing","writing-mode","xmlns:xlink","x-height"].forEach((function(e){var t=e.replace(ke,Ae);we[t]=new be(t,1,!1,e,null,!1,!1)})),["xlink:actuate","xlink:arcrole","xlink:role","xlink:show","xlink:title","xlink:type"].forEach((function(e){var t=e.replace(ke,Ae);we[t]=new be(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(ke,Ae);we[t]=new be(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){we[e]=new be(e,1,!1,e.toLowerCase(),null,!1,!1)}));we.xlinkHref=new be("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){we[e]=new be(e,1,!1,e.toLowerCase(),null,!0,!0)}));var Ee=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i,xe=!1;function Ce(e){!xe&&Ee.test(e)&&(xe=!0,l("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.",JSON.stringify(e)))}function Se(e,t,n,r){if(r.mustUseProperty)return e[r.propertyName];te(n,t),r.sanitizeURL&&Ce(""+n);var o=r.attributeName,a=null;if(r.type===ie){if(e.hasAttribute(o)){var i=e.getAttribute(o);return""===i||(ye(t,n,r,!1)?i:i===""+n?n:i)}}else if(e.hasAttribute(o)){if(ye(t,n,r,!1))return e.getAttribute(o);if(r.type===ae)return n;a=e.getAttribute(o)}return ye(t,n,r,!1)?null===a?n:a:a===""+n?n:a}function _e(e,t,n,r){if(he(t)){if(!e.hasAttribute(t))return void 0===n?void 0:null;var o=e.getAttribute(t);return te(n,t),o===""+n?n:o}}function Te(e,t,n,r){var o=ge(t);if(!me(t,o,r))if(ye(t,n,o,r)&&(n=null),r||null===o){if(he(t)){var a=t;null===n?e.removeAttribute(a):(te(n,t),e.setAttribute(a,""+n))}}else if(o.mustUseProperty){var i=o.propertyName;if(null===n){var l=o.type;e[i]=l!==ae&&""}else e[i]=n}else{var s=o.attributeName,u=o.attributeNamespace;if(null===n)e.removeAttribute(s);else{var c,d=o.type;d===ae||d===ie&&!0===n?c="":(te(n,s),c=""+n,o.sanitizeURL&&Ce(c.toString())),u?e.setAttributeNS(u,s,c):e.setAttribute(s,c)}}}var Oe=Symbol.for("react.element"),Re=Symbol.for("react.portal"),Pe=Symbol.for("react.fragment"),je=Symbol.for("react.strict_mode"),De=Symbol.for("react.profiler"),Ie=Symbol.for("react.provider"),Le=Symbol.for("react.context"),Be=Symbol.for("react.forward_ref"),Ne=Symbol.for("react.suspense"),Me=Symbol.for("react.suspense_list"),ze=Symbol.for("react.memo"),Ue=Symbol.for("react.lazy"),Fe=(Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode"),Symbol.for("react.offscreen")),We=(Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker"),Symbol.iterator),$e="@@iterator";function He(e){if(null===e||"object"!=typeof e)return null;var t=We&&e[We]||e[$e];return"function"==typeof t?t:null}var Ve,qe,Ye,Qe,Ge,Ke,Xe,Ze=Object.assign,Je=0;function et(){}et.__reactDisabledLog=!0;var tt,nt=o.ReactCurrentDispatcher;function rt(e,t,n){if(void 0===tt)try{throw Error()}catch(e){var r=e.stack.trim().match(/\n( *(at )?)/);tt=r&&r[1]||""}return"\n"+tt+e}var ot,at=!1,it="function"==typeof WeakMap?WeakMap:Map;function lt(e,t){if(!e||at)return"";var n,r=ot.get(e);if(void 0!==r)return r;at=!0;var o,a=Error.prepareStackTrace;Error.prepareStackTrace=void 0,o=nt.current,nt.current=null,function(){if(0===Je){Ve=console.log,qe=console.info,Ye=console.warn,Qe=console.error,Ge=console.group,Ke=console.groupCollapsed,Xe=console.groupEnd;var e={configurable:!0,enumerable:!0,value:et,writable:!0};Object.defineProperties(console,{info:e,log:e,warn:e,error:e,group:e,groupCollapsed:e,groupEnd:e})}Je++}();try{if(t){var i=function(){throw Error()};if(Object.defineProperty(i.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(i,[])}catch(e){n=e}Reflect.construct(e,[],i)}else{try{i.call()}catch(e){n=e}e.call(i.prototype)}}else{try{throw Error()}catch(e){n=e}e()}}catch(t){if(t&&n&&"string"==typeof t.stack){for(var s=t.stack.split("\n"),u=n.stack.split("\n"),c=s.length-1,d=u.length-1;c>=1&&d>=0&&s[c]!==u[d];)d--;for(;c>=1&&d>=0;c--,d--)if(s[c]!==u[d]){if(1!==c||1!==d)do{if(c--,--d<0||s[c]!==u[d]){var f="\n"+s[c].replace(" at new "," at ");return e.displayName&&f.includes("<anonymous>")&&(f=f.replace("<anonymous>",e.displayName)),"function"==typeof e&&ot.set(e,f),f}}while(c>=1&&d>=0);break}}}finally{at=!1,nt.current=o,function(){if(0==--Je){var e={configurable:!0,enumerable:!0,writable:!0};Object.defineProperties(console,{log:Ze({},e,{value:Ve}),info:Ze({},e,{value:qe}),warn:Ze({},e,{value:Ye}),error:Ze({},e,{value:Qe}),group:Ze({},e,{value:Ge}),groupCollapsed:Ze({},e,{value:Ke}),groupEnd:Ze({},e,{value:Xe})})}Je<0&&l("disabledDepth fell below zero. This is a bug in React. Please file an issue.")}(),Error.prepareStackTrace=a}var p=e?e.displayName||e.name:"",h=p?rt(p):"";return"function"==typeof e&&ot.set(e,h),h}function st(e,t,n){return lt(e,!1)}function ut(e,t,n){if(null==e)return"";if("function"==typeof e)return lt(e,!(!(r=e.prototype)||!r.isReactComponent));var r;if("string"==typeof e)return rt(e);switch(e){case Ne:return rt("Suspense");case Me:return rt("SuspenseList")}if("object"==typeof e)switch(e.$$typeof){case Be:return st(e.render);case ze:return ut(e.type,t,n);case Ue:var o=e,a=o._payload,i=o._init;try{return ut(i(a),t,n)}catch(e){}}return""}function ct(e){e._debugOwner&&e._debugOwner.type,e._debugSource;switch(e.tag){case h:return rt(e.type);case C:return rt("Lazy");case A:return rt("Suspense");case T:return rt("SuspenseList");case u:case d:case x:return st(e.type);case w:return st(e.type.render);case c:return lt(e.type,!0);default:return""}}function dt(e){try{var t="",n=e;do{t+=ct(n),n=n.return}while(n);return t}catch(e){return"\nError generating stack: "+e.message+"\n"+e.stack}}function ft(e){return e.displayName||"Context"}function pt(e){if(null==e)return null;if("number"==typeof e.tag&&l("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."),"function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case Pe:return"Fragment";case Re:return"Portal";case De:return"Profiler";case je:return"StrictMode";case Ne:return"Suspense";case Me:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case Le:return ft(e)+".Consumer";case Ie:return ft(e._context)+".Provider";case Be:return function(e,t,n){var r=e.displayName;if(r)return r;var o=t.displayName||t.name||"";return""!==o?n+"("+o+")":n}(e,e.render,"ForwardRef");case ze:var t=e.displayName||null;return null!==t?t:pt(e.type)||"Memo";case Ue:var n=e,r=n._payload,o=n._init;try{return pt(o(r))}catch(e){return null}}return null}function ht(e){return e.displayName||"Context"}function mt(e){var t,n,r,o,a=e.tag,i=e.type;switch(a){case j:return"Cache";case g:return ht(i)+".Consumer";case b:return ht(i._context)+".Provider";case _:return"DehydratedFragment";case w:return t=i,n=i.render,r="ForwardRef",o=n.displayName||n.name||"",t.displayName||(""!==o?r+"("+o+")":r);case v:return"Fragment";case h:return i;case p:return"Portal";case f:return"Root";case m:return"Text";case C:return pt(i);case y:return i===je?"StrictMode":"Mode";case R:return"Offscreen";case k:return"Profiler";case O:return"Scope";case A:return"Suspense";case T:return"SuspenseList";case D:return"TracingMarker";case c:case u:case S:case d:case E:case x:if("function"==typeof i)return i.displayName||i.name||null;if("string"==typeof i)return i}return null}ot=new it;var vt=o.ReactDebugCurrentFrame,yt=null,gt=!1;function bt(){if(null===yt)return null;var e=yt._debugOwner;return null!=e?mt(e):null}function wt(){return null===yt?"":dt(yt)}function kt(){vt.getCurrentStack=null,yt=null,gt=!1}function At(e){vt.getCurrentStack=null===e?null:wt,yt=e,gt=!1}function Et(e){gt=e}function xt(e){return""+e}function Ct(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":return e;case"object":return ne(e),e;default:return""}}var St={button:!0,checkbox:!0,image:!0,hidden:!0,radio:!0,reset:!0,submit:!0};function _t(e,t){St[t.type]||t.onChange||t.onInput||t.readOnly||t.disabled||null==t.value||l("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`."),t.onChange||t.readOnly||t.disabled||null==t.checked||l("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.")}function Tt(e){var t=e.type,n=e.nodeName;return n&&"input"===n.toLowerCase()&&("checkbox"===t||"radio"===t)}function Ot(e){return e._valueTracker}function Rt(e){Ot(e)||(e._valueTracker=function(e){var t=Tt(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t);ne(e[t]);var r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){ne(e),r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable});var i={getValue:function(){return r},setValue:function(e){ne(e),r=""+e},stopTracking:function(){!function(e){e._valueTracker=null}(e),delete e[t]}};return i}}(e))}function Pt(e){if(!e)return!1;var t=Ot(e);if(!t)return!0;var n=t.getValue(),r=function(e){var t="";return e?t=Tt(e)?e.checked?"true":"false":e.value:t}(e);return r!==n&&(t.setValue(r),!0)}function jt(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}var Dt=!1,It=!1,Lt=!1,Bt=!1;function Nt(e){return"checkbox"===e.type||"radio"===e.type?null!=e.checked:null!=e.value}function Mt(e,t){var n=e,r=t.checked;return Ze({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=r?r:n._wrapperState.initialChecked})}function zt(e,t){_t(0,t),void 0===t.checked||void 0===t.defaultChecked||It||(l("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components",bt()||"A component",t.type),It=!0),void 0===t.value||void 0===t.defaultValue||Dt||(l("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components",bt()||"A component",t.type),Dt=!0);var n=e,r=null==t.defaultValue?"":t.defaultValue;n._wrapperState={initialChecked:null!=t.checked?t.checked:t.defaultChecked,initialValue:Ct(null!=t.value?t.value:r),controlled:Nt(t)}}function Ut(e,t){var n=e,r=t.checked;null!=r&&Te(n,"checked",r,!1)}function Ft(e,t){var n=e,r=Nt(t);n._wrapperState.controlled||!r||Bt||(l("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components"),Bt=!0),!n._wrapperState.controlled||r||Lt||(l("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components"),Lt=!0),Ut(e,t);var o=Ct(t.value),a=t.type;if(null!=o)"number"===a?(0===o&&""===n.value||n.value!=o)&&(n.value=xt(o)):n.value!==xt(o)&&(n.value=xt(o));else if("submit"===a||"reset"===a)return void n.removeAttribute("value");t.hasOwnProperty("value")?Ht(n,t.type,o):t.hasOwnProperty("defaultValue")&&Ht(n,t.type,Ct(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(n.defaultChecked=!!t.defaultChecked)}function Wt(e,t,n){var r=e;if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var o=t.type;if(("submit"===o||"reset"===o)&&(void 0===t.value||null===t.value))return;var a=xt(r._wrapperState.initialValue);n||a!==r.value&&(r.value=a),r.defaultValue=a}var i=r.name;""!==i&&(r.name=""),r.defaultChecked=!r.defaultChecked,r.defaultChecked=!!r._wrapperState.initialChecked,""!==i&&(r.name=i)}function $t(e,t){var n=e;Ft(n,t),function(e,t){var n=t.name;if("radio"===t.type&&null!=n){for(var r=e;r.parentNode;)r=r.parentNode;te(n,"name");for(var o=r.querySelectorAll("input[name="+JSON.stringify(""+n)+'][type="radio"]'),a=0;a<o.length;a++){var i=o[a];if(i!==e&&i.form===e.form){var l=Qc(i);if(!l)throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");Pt(i),Ft(i,l)}}}}(n,t)}function Ht(e,t,n){"number"===t&&jt(e.ownerDocument)===e||(null==n?e.defaultValue=xt(e._wrapperState.initialValue):e.defaultValue!==xt(n)&&(e.defaultValue=xt(n)))}var Vt=!1,qt=!1,Yt=!1;function Qt(t,n){null==n.value&&("object"==typeof n.children&&null!==n.children?e.Children.forEach(n.children,(function(e){null!=e&&"string"!=typeof e&&"number"!=typeof e&&(qt||(qt=!0,l("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.")))})):null!=n.dangerouslySetInnerHTML&&(Yt||(Yt=!0,l("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.")))),null==n.selected||Vt||(l("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."),Vt=!0)}var Gt,Kt=Array.isArray;function Xt(e){return Kt(e)}function Zt(){var e=bt();return e?"\n\nCheck the render method of `"+e+"`.":""}Gt=!1;var Jt=["value","defaultValue"];function en(e,t,n,r){var o=e.options;if(t){for(var a=n,i={},l=0;l<a.length;l++)i["$"+a[l]]=!0;for(var s=0;s<o.length;s++){var u=i.hasOwnProperty("$"+o[s].value);o[s].selected!==u&&(o[s].selected=u),u&&r&&(o[s].defaultSelected=!0)}}else{for(var c=xt(Ct(n)),d=null,f=0;f<o.length;f++){if(o[f].value===c)return o[f].selected=!0,void(r&&(o[f].defaultSelected=!0));null!==d||o[f].disabled||(d=o[f])}null!==d&&(d.selected=!0)}}function tn(e,t){return Ze({},t,{value:void 0})}function nn(e,t){var n=e;!function(e){_t(0,e);for(var t=0;t<Jt.length;t++){var n=Jt[t];if(null!=e[n]){var r=Xt(e[n]);e.multiple&&!r?l("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s",n,Zt()):!e.multiple&&r&&l("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s",n,Zt())}}}(t),n._wrapperState={wasMultiple:!!t.multiple},void 0===t.value||void 0===t.defaultValue||Gt||(l("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components"),Gt=!0)}var rn=!1;function on(e,t){var n=e;if(null!=t.dangerouslySetInnerHTML)throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");return Ze({},t,{value:void 0,defaultValue:void 0,children:xt(n._wrapperState.initialValue)})}function an(e,t){var n=e;_t(0,t),void 0===t.value||void 0===t.defaultValue||rn||(l("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components",bt()||"A component"),rn=!0);var r=t.value;if(null==r){var o=t.children,a=t.defaultValue;if(null!=o){if(l("Use the `defaultValue` or `value` props instead of setting children on <textarea>."),null!=a)throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");if(Xt(o)){if(o.length>1)throw new Error("<textarea> can only have at most one child.");o=o[0]}a=o}null==a&&(a=""),r=a}n._wrapperState={initialValue:Ct(r)}}function ln(e,t){var n=e,r=Ct(t.value),o=Ct(t.defaultValue);if(null!=r){var a=xt(r);a!==n.value&&(n.value=a),null==t.defaultValue&&n.defaultValue!==a&&(n.defaultValue=a)}null!=o&&(n.defaultValue=xt(o))}function sn(e,t){var n=e,r=n.textContent;r===n._wrapperState.initialValue&&""!==r&&null!==r&&(n.value=r)}var un="http://www.w3.org/1999/xhtml",cn="http://www.w3.org/1998/Math/MathML",dn="http://www.w3.org/2000/svg";function fn(e){switch(e){case"svg":return dn;case"math":return cn;default:return un}}function pn(e,t){return null==e||e===un?fn(t):e===dn&&"foreignObject"===t?un:e}var hn,mn,vn=(mn=function(e,t){if(e.namespaceURI!==dn||"innerHTML"in e)e.innerHTML=t;else{(hn=hn||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>";for(var n=hn.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;n.firstChild;)e.appendChild(n.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return mn(e,t,n,r)}))}:mn),yn=1,gn=3,bn=8,wn=9,kn=11,An=function(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&n.nodeType===gn)return void(n.nodeValue=t)}e.textContent=t},En={animation:["animationDelay","animationDirection","animationDuration","animationFillMode","animationIterationCount","animationName","animationPlayState","animationTimingFunction"],background:["backgroundAttachment","backgroundClip","backgroundColor","backgroundImage","backgroundOrigin","backgroundPositionX","backgroundPositionY","backgroundRepeat","backgroundSize"],backgroundPosition:["backgroundPositionX","backgroundPositionY"],border:["borderBottomColor","borderBottomStyle","borderBottomWidth","borderImageOutset","borderImageRepeat","borderImageSlice","borderImageSource","borderImageWidth","borderLeftColor","borderLeftStyle","borderLeftWidth","borderRightColor","borderRightStyle","borderRightWidth","borderTopColor","borderTopStyle","borderTopWidth"],borderBlockEnd:["borderBlockEndColor","borderBlockEndStyle","borderBlockEndWidth"],borderBlockStart:["borderBlockStartColor","borderBlockStartStyle","borderBlockStartWidth"],borderBottom:["borderBottomColor","borderBottomStyle","borderBottomWidth"],borderColor:["borderBottomColor","borderLeftColor","borderRightColor","borderTopColor"],borderImage:["borderImageOutset","borderImageRepeat","borderImageSlice","borderImageSource","borderImageWidth"],borderInlineEnd:["borderInlineEndColor","borderInlineEndStyle","borderInlineEndWidth"],borderInlineStart:["borderInlineStartColor","borderInlineStartStyle","borderInlineStartWidth"],borderLeft:["borderLeftColor","borderLeftStyle","borderLeftWidth"],borderRadius:["borderBottomLeftRadius","borderBottomRightRadius","borderTopLeftRadius","borderTopRightRadius"],borderRight:["borderRightColor","borderRightStyle","borderRightWidth"],borderStyle:["borderBottomStyle","borderLeftStyle","borderRightStyle","borderTopStyle"],borderTop:["borderTopColor","borderTopStyle","borderTopWidth"],borderWidth:["borderBottomWidth","borderLeftWidth","borderRightWidth","borderTopWidth"],columnRule:["columnRuleColor","columnRuleStyle","columnRuleWidth"],columns:["columnCount","columnWidth"],flex:["flexBasis","flexGrow","flexShrink"],flexFlow:["flexDirection","flexWrap"],font:["fontFamily","fontFeatureSettings","fontKerning","fontLanguageOverride","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontVariantAlternates","fontVariantCaps","fontVariantEastAsian","fontVariantLigatures","fontVariantNumeric","fontVariantPosition","fontWeight","lineHeight"],fontVariant:["fontVariantAlternates","fontVariantCaps","fontVariantEastAsian","fontVariantLigatures","fontVariantNumeric","fontVariantPosition"],gap:["columnGap","rowGap"],grid:["gridAutoColumns","gridAutoFlow","gridAutoRows","gridTemplateAreas","gridTemplateColumns","gridTemplateRows"],gridArea:["gridColumnEnd","gridColumnStart","gridRowEnd","gridRowStart"],gridColumn:["gridColumnEnd","gridColumnStart"],gridColumnGap:["columnGap"],gridGap:["columnGap","rowGap"],gridRow:["gridRowEnd","gridRowStart"],gridRowGap:["rowGap"],gridTemplate:["gridTemplateAreas","gridTemplateColumns","gridTemplateRows"],listStyle:["listStyleImage","listStylePosition","listStyleType"],margin:["marginBottom","marginLeft","marginRight","marginTop"],marker:["markerEnd","markerMid","markerStart"],mask:["maskClip","maskComposite","maskImage","maskMode","maskOrigin","maskPositionX","maskPositionY","maskRepeat","maskSize"],maskPosition:["maskPositionX","maskPositionY"],outline:["outlineColor","outlineStyle","outlineWidth"],overflow:["overflowX","overflowY"],padding:["paddingBottom","paddingLeft","paddingRight","paddingTop"],placeContent:["alignContent","justifyContent"],placeItems:["alignItems","justifyItems"],placeSelf:["alignSelf","justifySelf"],textDecoration:["textDecorationColor","textDecorationLine","textDecorationStyle"],textEmphasis:["textEmphasisColor","textEmphasisStyle"],transition:["transitionDelay","transitionDuration","transitionProperty","transitionTimingFunction"],wordWrap:["overflowWrap"]},xn={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0};var Cn=["Webkit","ms","Moz","O"];function Sn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||xn.hasOwnProperty(e)&&xn[e]?(function(e,t){if(J(e))l("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.",t,Z(e)),ee(e)}(t,e),(""+t).trim()):t+"px"}Object.keys(xn).forEach((function(e){Cn.forEach((function(t){xn[function(e,t){return e+t.charAt(0).toUpperCase()+t.substring(1)}(t,e)]=xn[e]}))}));var _n=/([A-Z])/g,Tn=/^ms-/;var On=/^(?:webkit|moz|o)[A-Z]/,Rn=/^-ms-/,Pn=/-(.)/g,jn=/;\s*$/,Dn={},In={},Ln=!1,Bn=!1,Nn=function(e){Dn.hasOwnProperty(e)&&Dn[e]||(Dn[e]=!0,l("Unsupported style property %s. Did you mean %s?",e,e.replace(Rn,"ms-").replace(Pn,(function(e,t){return t.toUpperCase()}))))},Mn=function(e,t){e.indexOf("-")>-1?Nn(e):On.test(e)?function(e){Dn.hasOwnProperty(e)&&Dn[e]||(Dn[e]=!0,l("Unsupported vendor-prefixed style property %s. Did you mean %s?",e,e.charAt(0).toUpperCase()+e.slice(1)))}(e):jn.test(t)&&function(e,t){In.hasOwnProperty(t)&&In[t]||(In[t]=!0,l('Style property values shouldn\'t contain a semicolon. Try "%s: %s" instead.',e,t.replace(jn,"")))}(e,t),"number"==typeof t&&(isNaN(t)?function(e,t){Ln||(Ln=!0,l("`NaN` is an invalid value for the `%s` css style property.",e))}(e):isFinite(t)||function(e,t){Bn||(Bn=!0,l("`Infinity` is an invalid value for the `%s` css style property.",e))}(e))};function zn(e){var t="",n="";for(var r in e)if(e.hasOwnProperty(r)){var o=e[r];if(null!=o){var a=0===r.indexOf("--");t+=n+(a?r:r.replace(_n,"-$1").toLowerCase().replace(Tn,"-ms-"))+":",t+=Sn(r,o,a),n=";"}}return t||null}function Un(e,t){var n=e.style;for(var r in t)if(t.hasOwnProperty(r)){var o=0===r.indexOf("--");o||Mn(r,t[r]);var a=Sn(r,t[r],o);"float"===r&&(r="cssFloat"),o?n.setProperty(r,a):n[r]=a}}function Fn(e){var t={};for(var n in e)for(var r=En[n]||[n],o=0;o<r.length;o++)t[r[o]]=n;return t}var Wn=Ze({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0}),$n="__html";function Hn(e,t){if(t){if(Wn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw new Error(e+" is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");if("object"!=typeof t.dangerouslySetInnerHTML||!($n in t.dangerouslySetInnerHTML))throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.")}if(!t.suppressContentEditableWarning&&t.contentEditable&&null!=t.children&&l("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."),null!=t.style&&"object"!=typeof t.style)throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.")}}function Vn(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var qn={accept:"accept",acceptcharset:"acceptCharset","accept-charset":"acceptCharset",accesskey:"accessKey",action:"action",allowfullscreen:"allowFullScreen",alt:"alt",as:"as",async:"async",autocapitalize:"autoCapitalize",autocomplete:"autoComplete",autocorrect:"autoCorrect",autofocus:"autoFocus",autoplay:"autoPlay",autosave:"autoSave",capture:"capture",cellpadding:"cellPadding",cellspacing:"cellSpacing",challenge:"challenge",charset:"charSet",checked:"checked",children:"children",cite:"cite",class:"className",classid:"classID",classname:"className",cols:"cols",colspan:"colSpan",content:"content",contenteditable:"contentEditable",contextmenu:"contextMenu",controls:"controls",controlslist:"controlsList",coords:"coords",crossorigin:"crossOrigin",dangerouslysetinnerhtml:"dangerouslySetInnerHTML",data:"data",datetime:"dateTime",default:"default",defaultchecked:"defaultChecked",defaultvalue:"defaultValue",defer:"defer",dir:"dir",disabled:"disabled",disablepictureinpicture:"disablePictureInPicture",disableremoteplayback:"disableRemotePlayback",download:"download",draggable:"draggable",enctype:"encType",enterkeyhint:"enterKeyHint",for:"htmlFor",form:"form",formmethod:"formMethod",formaction:"formAction",formenctype:"formEncType",formnovalidate:"formNoValidate",formtarget:"formTarget",frameborder:"frameBorder",headers:"headers",height:"height",hidden:"hidden",high:"high",href:"href",hreflang:"hrefLang",htmlfor:"htmlFor",httpequiv:"httpEquiv","http-equiv":"httpEquiv",icon:"icon",id:"id",imagesizes:"imageSizes",imagesrcset:"imageSrcSet",innerhtml:"innerHTML",inputmode:"inputMode",integrity:"integrity",is:"is",itemid:"itemID",itemprop:"itemProp",itemref:"itemRef",itemscope:"itemScope",itemtype:"itemType",keyparams:"keyParams",keytype:"keyType",kind:"kind",label:"label",lang:"lang",list:"list",loop:"loop",low:"low",manifest:"manifest",marginwidth:"marginWidth",marginheight:"marginHeight",max:"max",maxlength:"maxLength",media:"media",mediagroup:"mediaGroup",method:"method",min:"min",minlength:"minLength",multiple:"multiple",muted:"muted",name:"name",nomodule:"noModule",nonce:"nonce",novalidate:"noValidate",open:"open",optimum:"optimum",pattern:"pattern",placeholder:"placeholder",playsinline:"playsInline",poster:"poster",preload:"preload",profile:"profile",radiogroup:"radioGroup",readonly:"readOnly",referrerpolicy:"referrerPolicy",rel:"rel",required:"required",reversed:"reversed",role:"role",rows:"rows",rowspan:"rowSpan",sandbox:"sandbox",scope:"scope",scoped:"scoped",scrolling:"scrolling",seamless:"seamless",selected:"selected",shape:"shape",size:"size",sizes:"sizes",span:"span",spellcheck:"spellCheck",src:"src",srcdoc:"srcDoc",srclang:"srcLang",srcset:"srcSet",start:"start",step:"step",style:"style",summary:"summary",tabindex:"tabIndex",target:"target",title:"title",type:"type",usemap:"useMap",value:"value",width:"width",wmode:"wmode",wrap:"wrap",about:"about",accentheight:"accentHeight","accent-height":"accentHeight",accumulate:"accumulate",additive:"additive",alignmentbaseline:"alignmentBaseline","alignment-baseline":"alignmentBaseline",allowreorder:"allowReorder",alphabetic:"alphabetic",amplitude:"amplitude",arabicform:"arabicForm","arabic-form":"arabicForm",ascent:"ascent",attributename:"attributeName",attributetype:"attributeType",autoreverse:"autoReverse",azimuth:"azimuth",basefrequency:"baseFrequency",baselineshift:"baselineShift","baseline-shift":"baselineShift",baseprofile:"baseProfile",bbox:"bbox",begin:"begin",bias:"bias",by:"by",calcmode:"calcMode",capheight:"capHeight","cap-height":"capHeight",clip:"clip",clippath:"clipPath","clip-path":"clipPath",clippathunits:"clipPathUnits",cliprule:"clipRule","clip-rule":"clipRule",color:"color",colorinterpolation:"colorInterpolation","color-interpolation":"colorInterpolation",colorinterpolationfilters:"colorInterpolationFilters","color-interpolation-filters":"colorInterpolationFilters",colorprofile:"colorProfile","color-profile":"colorProfile",colorrendering:"colorRendering","color-rendering":"colorRendering",contentscripttype:"contentScriptType",contentstyletype:"contentStyleType",cursor:"cursor",cx:"cx",cy:"cy",d:"d",datatype:"datatype",decelerate:"decelerate",descent:"descent",diffuseconstant:"diffuseConstant",direction:"direction",display:"display",divisor:"divisor",dominantbaseline:"dominantBaseline","dominant-baseline":"dominantBaseline",dur:"dur",dx:"dx",dy:"dy",edgemode:"edgeMode",elevation:"elevation",enablebackground:"enableBackground","enable-background":"enableBackground",end:"end",exponent:"exponent",externalresourcesrequired:"externalResourcesRequired",fill:"fill",fillopacity:"fillOpacity","fill-opacity":"fillOpacity",fillrule:"fillRule","fill-rule":"fillRule",filter:"filter",filterres:"filterRes",filterunits:"filterUnits",floodopacity:"floodOpacity","flood-opacity":"floodOpacity",floodcolor:"floodColor","flood-color":"floodColor",focusable:"focusable",fontfamily:"fontFamily","font-family":"fontFamily",fontsize:"fontSize","font-size":"fontSize",fontsizeadjust:"fontSizeAdjust","font-size-adjust":"fontSizeAdjust",fontstretch:"fontStretch","font-stretch":"fontStretch",fontstyle:"fontStyle","font-style":"fontStyle",fontvariant:"fontVariant","font-variant":"fontVariant",fontweight:"fontWeight","font-weight":"fontWeight",format:"format",from:"from",fx:"fx",fy:"fy",g1:"g1",g2:"g2",glyphname:"glyphName","glyph-name":"glyphName",glyphorientationhorizontal:"glyphOrientationHorizontal","glyph-orientation-horizontal":"glyphOrientationHorizontal",glyphorientationvertical:"glyphOrientationVertical","glyph-orientation-vertical":"glyphOrientationVertical",glyphref:"glyphRef",gradienttransform:"gradientTransform",gradientunits:"gradientUnits",hanging:"hanging",horizadvx:"horizAdvX","horiz-adv-x":"horizAdvX",horizoriginx:"horizOriginX","horiz-origin-x":"horizOriginX",ideographic:"ideographic",imagerendering:"imageRendering","image-rendering":"imageRendering",in2:"in2",in:"in",inlist:"inlist",intercept:"intercept",k1:"k1",k2:"k2",k3:"k3",k4:"k4",k:"k",kernelmatrix:"kernelMatrix",kernelunitlength:"kernelUnitLength",kerning:"kerning",keypoints:"keyPoints",keysplines:"keySplines",keytimes:"keyTimes",lengthadjust:"lengthAdjust",letterspacing:"letterSpacing","letter-spacing":"letterSpacing",lightingcolor:"lightingColor","lighting-color":"lightingColor",limitingconeangle:"limitingConeAngle",local:"local",markerend:"markerEnd","marker-end":"markerEnd",markerheight:"markerHeight",markermid:"markerMid","marker-mid":"markerMid",markerstart:"markerStart","marker-start":"markerStart",markerunits:"markerUnits",markerwidth:"markerWidth",mask:"mask",maskcontentunits:"maskContentUnits",maskunits:"maskUnits",mathematical:"mathematical",mode:"mode",numoctaves:"numOctaves",offset:"offset",opacity:"opacity",operator:"operator",order:"order",orient:"orient",orientation:"orientation",origin:"origin",overflow:"overflow",overlineposition:"overlinePosition","overline-position":"overlinePosition",overlinethickness:"overlineThickness","overline-thickness":"overlineThickness",paintorder:"paintOrder","paint-order":"paintOrder",panose1:"panose1","panose-1":"panose1",pathlength:"pathLength",patterncontentunits:"patternContentUnits",patterntransform:"patternTransform",patternunits:"patternUnits",pointerevents:"pointerEvents","pointer-events":"pointerEvents",points:"points",pointsatx:"pointsAtX",pointsaty:"pointsAtY",pointsatz:"pointsAtZ",prefix:"prefix",preservealpha:"preserveAlpha",preserveaspectratio:"preserveAspectRatio",primitiveunits:"primitiveUnits",property:"property",r:"r",radius:"radius",refx:"refX",refy:"refY",renderingintent:"renderingIntent","rendering-intent":"renderingIntent",repeatcount:"repeatCount",repeatdur:"repeatDur",requiredextensions:"requiredExtensions",requiredfeatures:"requiredFeatures",resource:"resource",restart:"restart",result:"result",results:"results",rotate:"rotate",rx:"rx",ry:"ry",scale:"scale",security:"security",seed:"seed",shaperendering:"shapeRendering","shape-rendering":"shapeRendering",slope:"slope",spacing:"spacing",specularconstant:"specularConstant",specularexponent:"specularExponent",speed:"speed",spreadmethod:"spreadMethod",startoffset:"startOffset",stddeviation:"stdDeviation",stemh:"stemh",stemv:"stemv",stitchtiles:"stitchTiles",stopcolor:"stopColor","stop-color":"stopColor",stopopacity:"stopOpacity","stop-opacity":"stopOpacity",strikethroughposition:"strikethroughPosition","strikethrough-position":"strikethroughPosition",strikethroughthickness:"strikethroughThickness","strikethrough-thickness":"strikethroughThickness",string:"string",stroke:"stroke",strokedasharray:"strokeDasharray","stroke-dasharray":"strokeDasharray",strokedashoffset:"strokeDashoffset","stroke-dashoffset":"strokeDashoffset",strokelinecap:"strokeLinecap","stroke-linecap":"strokeLinecap",strokelinejoin:"strokeLinejoin","stroke-linejoin":"strokeLinejoin",strokemiterlimit:"strokeMiterlimit","stroke-miterlimit":"strokeMiterlimit",strokewidth:"strokeWidth","stroke-width":"strokeWidth",strokeopacity:"strokeOpacity","stroke-opacity":"strokeOpacity",suppresscontenteditablewarning:"suppressContentEditableWarning",suppresshydrationwarning:"suppressHydrationWarning",surfacescale:"surfaceScale",systemlanguage:"systemLanguage",tablevalues:"tableValues",targetx:"targetX",targety:"targetY",textanchor:"textAnchor","text-anchor":"textAnchor",textdecoration:"textDecoration","text-decoration":"textDecoration",textlength:"textLength",textrendering:"textRendering","text-rendering":"textRendering",to:"to",transform:"transform",typeof:"typeof",u1:"u1",u2:"u2",underlineposition:"underlinePosition","underline-position":"underlinePosition",underlinethickness:"underlineThickness","underline-thickness":"underlineThickness",unicode:"unicode",unicodebidi:"unicodeBidi","unicode-bidi":"unicodeBidi",unicoderange:"unicodeRange","unicode-range":"unicodeRange",unitsperem:"unitsPerEm","units-per-em":"unitsPerEm",unselectable:"unselectable",valphabetic:"vAlphabetic","v-alphabetic":"vAlphabetic",values:"values",vectoreffect:"vectorEffect","vector-effect":"vectorEffect",version:"version",vertadvy:"vertAdvY","vert-adv-y":"vertAdvY",vertoriginx:"vertOriginX","vert-origin-x":"vertOriginX",vertoriginy:"vertOriginY","vert-origin-y":"vertOriginY",vhanging:"vHanging","v-hanging":"vHanging",videographic:"vIdeographic","v-ideographic":"vIdeographic",viewbox:"viewBox",viewtarget:"viewTarget",visibility:"visibility",vmathematical:"vMathematical","v-mathematical":"vMathematical",vocab:"vocab",widths:"widths",wordspacing:"wordSpacing","word-spacing":"wordSpacing",writingmode:"writingMode","writing-mode":"writingMode",x1:"x1",x2:"x2",x:"x",xchannelselector:"xChannelSelector",xheight:"xHeight","x-height":"xHeight",xlinkactuate:"xlinkActuate","xlink:actuate":"xlinkActuate",xlinkarcrole:"xlinkArcrole","xlink:arcrole":"xlinkArcrole",xlinkhref:"xlinkHref","xlink:href":"xlinkHref",xlinkrole:"xlinkRole","xlink:role":"xlinkRole",xlinkshow:"xlinkShow","xlink:show":"xlinkShow",xlinktitle:"xlinkTitle","xlink:title":"xlinkTitle",xlinktype:"xlinkType","xlink:type":"xlinkType",xmlbase:"xmlBase","xml:base":"xmlBase",xmllang:"xmlLang","xml:lang":"xmlLang",xmlns:"xmlns","xml:space":"xmlSpace",xmlnsxlink:"xmlnsXlink","xmlns:xlink":"xmlnsXlink",xmlspace:"xmlSpace",y1:"y1",y2:"y2",y:"y",ychannelselector:"yChannelSelector",z:"z",zoomandpan:"zoomAndPan"},Yn={"aria-current":0,"aria-description":0,"aria-details":0,"aria-disabled":0,"aria-hidden":0,"aria-invalid":0,"aria-keyshortcuts":0,"aria-label":0,"aria-roledescription":0,"aria-autocomplete":0,"aria-checked":0,"aria-expanded":0,"aria-haspopup":0,"aria-level":0,"aria-modal":0,"aria-multiline":0,"aria-multiselectable":0,"aria-orientation":0,"aria-placeholder":0,"aria-pressed":0,"aria-readonly":0,"aria-required":0,"aria-selected":0,"aria-sort":0,"aria-valuemax":0,"aria-valuemin":0,"aria-valuenow":0,"aria-valuetext":0,"aria-atomic":0,"aria-busy":0,"aria-live":0,"aria-relevant":0,"aria-dropeffect":0,"aria-grabbed":0,"aria-activedescendant":0,"aria-colcount":0,"aria-colindex":0,"aria-colspan":0,"aria-controls":0,"aria-describedby":0,"aria-errormessage":0,"aria-flowto":0,"aria-labelledby":0,"aria-owns":0,"aria-posinset":0,"aria-rowcount":0,"aria-rowindex":0,"aria-rowspan":0,"aria-setsize":0},Qn={},Gn=new RegExp("^(aria)-["+ce+"]*$"),Kn=new RegExp("^(aria)[A-Z]["+ce+"]*$");function Xn(e,t){if(X.call(Qn,t)&&Qn[t])return!0;if(Kn.test(t)){var n="aria-"+t.slice(4).toLowerCase(),r=Yn.hasOwnProperty(n)?n:null;if(null==r)return l("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.",t),Qn[t]=!0,!0;if(t!==r)return l("Invalid ARIA attribute `%s`. Did you mean `%s`?",t,r),Qn[t]=!0,!0}if(Gn.test(t)){var o=t.toLowerCase(),a=Yn.hasOwnProperty(o)?o:null;if(null==a)return Qn[t]=!0,!1;if(t!==a)return l("Unknown ARIA attribute `%s`. Did you mean `%s`?",t,a),Qn[t]=!0,!0}return!0}function Zn(e,t){Vn(e,t)||function(e,t){var n=[];for(var r in t)Xn(0,r)||n.push(r);var o=n.map((function(e){return"`"+e+"`"})).join(", ");1===n.length?l("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props",o,e):n.length>1&&l("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props",o,e)}(e,t)}var Jn=!1;var er,tr={},nr=/^on./,rr=/^on[^A-Z]/,or=new RegExp("^(aria)-["+ce+"]*$"),ar=new RegExp("^(aria)[A-Z]["+ce+"]*$");er=function(e,t,n,r){if(X.call(tr,t)&&tr[t])return!0;var o=t.toLowerCase();if("onfocusin"===o||"onfocusout"===o)return l("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."),tr[t]=!0,!0;if(null!=r){var a=r.registrationNameDependencies,i=r.possibleRegistrationNames;if(a.hasOwnProperty(t))return!0;var s=i.hasOwnProperty(o)?i[o]:null;if(null!=s)return l("Invalid event handler property `%s`. Did you mean `%s`?",t,s),tr[t]=!0,!0;if(nr.test(t))return l("Unknown event handler property `%s`. It will be ignored.",t),tr[t]=!0,!0}else if(nr.test(t))return rr.test(t)&&l("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.",t),tr[t]=!0,!0;if(or.test(t)||ar.test(t))return!0;if("innerhtml"===o)return l("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."),tr[t]=!0,!0;if("aria"===o)return l("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."),tr[t]=!0,!0;if("is"===o&&null!=n&&"string"!=typeof n)return l("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.",typeof n),tr[t]=!0,!0;if("number"==typeof n&&isNaN(n))return l("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.",t),tr[t]=!0,!0;var u=ge(t),c=null!==u&&u.type===re;if(qn.hasOwnProperty(o)){var d=qn[o];if(d!==t)return l("Invalid DOM property `%s`. Did you mean `%s`?",t,d),tr[t]=!0,!0}else if(!c&&t!==o)return l("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.",t,o),tr[t]=!0,!0;return"boolean"==typeof n&&ve(t,n,u,!1)?(n?l('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.',n,t,t,n,t):l('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.',n,t,t,n,t,t,t),tr[t]=!0,!0):!!c||(ve(t,n,u,!1)?(tr[t]=!0,!1):("false"!==n&&"true"!==n||null===u||u.type!==ae||(l("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?",n,t,"false"===n?"The browser will interpret it as a truthy value.":'Although this works, it will not work as expected if you pass the string "false".',t,n),tr[t]=!0),!0))};var ir=function(e,t,n){var r=[];for(var o in t){er(0,o,t[o],n)||r.push(o)}var a=r.map((function(e){return"`"+e+"`"})).join(", ");1===r.length?l("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ",a,e):r.length>1&&l("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ",a,e)};var lr=1,sr=2,ur=4,cr=lr|sr|ur,dr=null;function fr(e){var t=e.target||e.srcElement||window;return t.correspondingUseElement&&(t=t.correspondingUseElement),t.nodeType===gn?t.parentNode:t}var pr=null,hr=null,mr=null;function vr(e){var t=qc(e);if(t){if("function"!=typeof pr)throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");var n=t.stateNode;if(n){var r=Qc(n);pr(t.stateNode,t.type,r)}}}function yr(e){hr?mr?mr.push(e):mr=[e]:hr=e}function gr(){if(hr){var e=hr,t=mr;if(hr=null,mr=null,vr(e),t)for(var n=0;n<t.length;n++)vr(t[n])}}var br=function(e,t){return e(t)},wr=function(){},kr=!1;function Ar(){(null!==hr||null!==mr)&&(wr(),gr())}function Er(e,t,n){if(kr)return e(t,n);kr=!0;try{return br(e,t,n)}finally{kr=!1,Ar()}}function xr(e,t){var n=e.stateNode;if(null===n)return null;var r=Qc(n);if(null===r)return null;var o=r[t];if(function(e,t,n){switch(e){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":return!(!n.disabled||(r=t,"button"!==r&&"input"!==r&&"select"!==r&&"textarea"!==r));default:return!1}var r}(t,e.type,r))return null;if(o&&"function"!=typeof o)throw new Error("Expected `"+t+"` listener to be a function, instead got a value of `"+typeof o+"` type.");return o}var Cr=!1;if(K)try{var Sr={};Object.defineProperty(Sr,"passive",{get:function(){Cr=!0}}),window.addEventListener("test",Sr,Sr),window.removeEventListener("test",Sr,Sr)}catch(e){Cr=!1}function _r(e,t,n,r,o,a,i,l,s){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var Tr=_r;if("undefined"!=typeof window&&"function"==typeof window.dispatchEvent&&"undefined"!=typeof document&&"function"==typeof document.createEvent){var Or=document.createElement("react");Tr=function(e,t,n,r,o,a,i,l,s){if("undefined"==typeof document||null===document)throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");var u=document.createEvent("Event"),c=!1,d=!0,f=window.event,p=Object.getOwnPropertyDescriptor(window,"event");function h(){Or.removeEventListener(k,y,!1),void 0!==window.event&&window.hasOwnProperty("event")&&(window.event=f)}var m,v=Array.prototype.slice.call(arguments,3);function y(){c=!0,h(),t.apply(n,v),d=!1}var g=!1,b=!1;function w(e){if(m=e.error,g=!0,null===m&&0===e.colno&&0===e.lineno&&(b=!0),e.defaultPrevented&&null!=m&&"object"==typeof m)try{m._suppressLogging=!0}catch(e){}}var k="react-"+(e||"invokeguardedcallback");if(window.addEventListener("error",w),Or.addEventListener(k,y,!1),u.initEvent(k,!1,!1),Or.dispatchEvent(u),p&&Object.defineProperty(window,"event",p),c&&d&&(g?b&&(m=new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.")):m=new Error("An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the \"Pause on exceptions\" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue."),this.onError(m)),window.removeEventListener("error",w),!c)return h(),_r.apply(this,arguments)}}var Rr=Tr,Pr=!1,jr=null,Dr=!1,Ir=null,Lr={onError:function(e){Pr=!0,jr=e}};function Br(e,t,n,r,o,a,i,l,s){Pr=!1,jr=null,Rr.apply(Lr,arguments)}function Nr(){if(Pr){var e=jr;return Pr=!1,jr=null,e}throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.")}function Mr(e){return e._reactInternals}var zr=0,Ur=1,Fr=2,Wr=4,$r=16,Hr=32,Vr=64,qr=128,Yr=256,Qr=512,Gr=1024,Kr=2048,Xr=4096,Zr=8192,Jr=16384,eo=Kr|Wr|Vr|Qr|Gr|Jr,to=32767,no=32768,ro=65536,oo=131072,ao=1048576,io=2097152,lo=4194304,so=8388608,uo=16777216,co=33554432,fo=Wr|Gr|0,po=Fr|Wr|$r|Hr|Qr|Xr|Zr,ho=Wr|Vr|Qr|Zr,mo=Kr|$r,vo=lo|so|io,yo=o.ReactCurrentOwner;function go(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{var r=t;do{((t=r).flags&(Fr|Xr))!==zr&&(n=t.return),r=t.return}while(r)}return t.tag===f?n:null}function bo(e){if(e.tag===A){var t=e.memoizedState;if(null===t){var n=e.alternate;null!==n&&(t=n.memoizedState)}if(null!==t)return t.dehydrated}return null}function wo(e){return e.tag===f?e.stateNode.containerInfo:null}function ko(e){if(go(e)!==e)throw new Error("Unable to find node on an unmounted component.")}function Ao(e){var t=e.alternate;if(!t){var n=go(e);if(null===n)throw new Error("Unable to find node on an unmounted component.");return n!==e?null:e}for(var r=e,o=t;;){var a=r.return;if(null===a)break;var i=a.alternate;if(null===i){var l=a.return;if(null!==l){r=o=l;continue}break}if(a.child===i.child){for(var s=a.child;s;){if(s===r)return ko(a),e;if(s===o)return ko(a),t;s=s.sibling}throw new Error("Unable to find node on an unmounted component.")}if(r.return!==o.return)r=a,o=i;else{for(var u=!1,c=a.child;c;){if(c===r){u=!0,r=a,o=i;break}if(c===o){u=!0,o=a,r=i;break}c=c.sibling}if(!u){for(c=i.child;c;){if(c===r){u=!0,r=i,o=a;break}if(c===o){u=!0,o=i,r=a;break}c=c.sibling}if(!u)throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.")}}if(r.alternate!==o)throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.")}if(r.tag!==f)throw new Error("Unable to find node on an unmounted component.");return r.stateNode.current===r?e:t}function Eo(e){var t=Ao(e);return null!==t?xo(t):null}function xo(e){if(e.tag===h||e.tag===m)return e;for(var t=e.child;null!==t;){var n=xo(t);if(null!==n)return n;t=t.sibling}return null}function Co(e){var t=Ao(e);return null!==t?So(t):null}function So(e){if(e.tag===h||e.tag===m)return e;for(var t=e.child;null!==t;){if(t.tag!==p){var n=So(t);if(null!==n)return n}t=t.sibling}return null}var _o=r.unstable_scheduleCallback,To=r.unstable_cancelCallback,Oo=r.unstable_shouldYield,Ro=r.unstable_requestPaint,Po=r.unstable_now,jo=r.unstable_getCurrentPriorityLevel,Do=r.unstable_ImmediatePriority,Io=r.unstable_UserBlockingPriority,Lo=r.unstable_NormalPriority,Bo=r.unstable_LowPriority,No=r.unstable_IdlePriority,Mo=r.unstable_yieldValue,zo=r.unstable_setDisableYieldValue,Uo=null,Fo=null,Wo=null,$o=!1,Ho="undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__;function Vo(e){if("function"==typeof Mo&&(zo(e),a=e),Fo&&"function"==typeof Fo.setStrictMode)try{Fo.setStrictMode(Uo,e)}catch(e){$o||($o=!0,l("React instrumentation encountered an error: %s",e))}}function qo(e){Wo=e}function Yo(){for(var e=new Map,t=1,n=0;n<pa;n++){var r=Xa(t);e.set(t,r),t*=2}return e}function Qo(){null!==Wo&&"function"==typeof Wo.markCommitStopped&&Wo.markCommitStopped()}function Go(e){null!==Wo&&"function"==typeof Wo.markComponentRenderStarted&&Wo.markComponentRenderStarted(e)}function Ko(){null!==Wo&&"function"==typeof Wo.markComponentRenderStopped&&Wo.markComponentRenderStopped()}function Xo(e){null!==Wo&&"function"==typeof Wo.markComponentLayoutEffectMountStarted&&Wo.markComponentLayoutEffectMountStarted(e)}function Zo(e){null!==Wo&&"function"==typeof Wo.markComponentLayoutEffectUnmountStarted&&Wo.markComponentLayoutEffectUnmountStarted(e)}function Jo(){null!==Wo&&"function"==typeof Wo.markComponentLayoutEffectUnmountStopped&&Wo.markComponentLayoutEffectUnmountStopped()}function ea(e,t,n){null!==Wo&&"function"==typeof Wo.markComponentErrored&&Wo.markComponentErrored(e,t,n)}function ta(e,t,n){null!==Wo&&"function"==typeof Wo.markComponentSuspended&&Wo.markComponentSuspended(e,t,n)}function na(e){null!==Wo&&"function"==typeof Wo.markRenderStarted&&Wo.markRenderStarted(e)}function ra(){null!==Wo&&"function"==typeof Wo.markRenderStopped&&Wo.markRenderStopped()}function oa(e,t){null!==Wo&&"function"==typeof Wo.markStateUpdateScheduled&&Wo.markStateUpdateScheduled(e,t)}var aa=0,ia=1,la=2,sa=8,ua=16,ca=Math.clz32?Math.clz32:function(e){var t=e>>>0;if(0===t)return 32;return 31-(da(t)/fa|0)|0},da=Math.log,fa=Math.LN2;var pa=31,ha=0,ma=0,va=1,ya=2,ga=4,ba=8,wa=16,ka=32,Aa=4194240,Ea=64,xa=128,Ca=256,Sa=512,_a=1024,Ta=2048,Oa=4096,Ra=8192,Pa=16384,ja=32768,Da=65536,Ia=131072,La=262144,Ba=524288,Na=1048576,Ma=2097152,za=130023424,Ua=4194304,Fa=8388608,Wa=16777216,$a=33554432,Ha=67108864,Va=Ua,qa=134217728,Ya=268435455,Qa=268435456,Ga=536870912,Ka=1073741824;function Xa(e){return e&va?"Sync":e&ya?"InputContinuousHydration":e&ga?"InputContinuous":e&ba?"DefaultHydration":e&wa?"Default":e&ka?"TransitionHydration":e&Aa?"Transition":e&za?"Retry":e&qa?"SelectiveHydration":e&Qa?"IdleHydration":e&Ga?"Idle":e&Ka?"Offscreen":void 0}var Za=-1,Ja=Ea,ei=Ua;function ti(e){switch(ci(e)){case va:return va;case ya:return ya;case ga:return ga;case ba:return ba;case wa:return wa;case ka:return ka;case Ea:case xa:case Ca:case Sa:case _a:case Ta:case Oa:case Ra:case Pa:case ja:case Da:case Ia:case La:case Ba:case Na:case Ma:return e&Aa;case Ua:case Fa:case Wa:case $a:case Ha:return e&za;case qa:return qa;case Qa:return Qa;case Ga:return Ga;case Ka:return Ka;default:return l("Should have found matching lanes. This is a bug in React."),e}}function ni(e,t){var n=e.pendingLanes;if(n===ha)return ha;var r=ha,o=e.suspendedLanes,a=e.pingedLanes,i=n&Ya;if(i!==ha){var l=i&~o;if(l!==ha)r=ti(l);else{var s=i&a;s!==ha&&(r=ti(s))}}else{var u=n&~o;u!==ha?r=ti(u):a!==ha&&(r=ti(a))}if(r===ha)return ha;if(t!==ha&&t!==r&&(t&o)===ha){var c=ci(r),d=ci(t);if(c>=d||c===wa&&(d&Aa)!==ha)return t}(r&ga)!==ha&&(r|=n&wa);var f=e.entangledLanes;if(f!==ha)for(var p=e.entanglements,h=r&f;h>0;){var m=fi(h),v=1<<m;r|=p[m],h&=~v}return r}function ri(e,t){switch(e){case va:case ya:case ga:return t+250;case ba:case wa:case ka:case Ea:case xa:case Ca:case Sa:case _a:case Ta:case Oa:case Ra:case Pa:case ja:case Da:case Ia:case La:case Ba:case Na:case Ma:return t+5e3;case Ua:case Fa:case Wa:case $a:case Ha:case qa:case Qa:case Ga:case Ka:return Za;default:return l("Should have found matching lanes. This is a bug in React."),Za}}function oi(e){var t=e.pendingLanes&~Ka;return t!==ha?t:t&Ka?Ka:ha}function ai(e){return(e&Ya)!==ha}function ii(e){return(e&za)===e}function li(e,t){return(t&(ya|ga|ba|wa))!==ha}function si(e){return(e&Aa)!==ha}function ui(){var e=Ja;return((Ja<<=1)&Aa)===ha&&(Ja=Ea),e}function ci(e){return e&-e}function di(e){return ci(e)}function fi(e){return 31-ca(e)}function pi(e){return fi(e)}function hi(e,t){return(e&t)!==ha}function mi(e,t){return(e&t)===t}function vi(e,t){return e|t}function yi(e,t){return e&~t}function gi(e,t){return e&t}function bi(e){for(var t=[],n=0;n<pa;n++)t.push(e);return t}function wi(e,t,n){e.pendingLanes|=t,t!==Ga&&(e.suspendedLanes=ha,e.pingedLanes=ha),e.eventTimes[pi(t)]=n}function ki(e,t,n){e.pingedLanes|=e.suspendedLanes&t}function Ai(e,t){for(var n=e.entangledLanes|=t,r=e.entanglements,o=n;o;){var a=fi(o),i=1<<a;i&t|r[a]&t&&(r[a]|=t),o&=~i}}function Ei(e,t,n){if(Ho)for(var r=e.pendingUpdatersLaneMap;n>0;){var o=pi(n),a=1<<o;r[o].add(t),n&=~a}}function xi(e,t){if(Ho)for(var n=e.pendingUpdatersLaneMap,r=e.memoizedUpdaters;t>0;){var o=pi(t),a=1<<o,i=n[o];i.size>0&&(i.forEach((function(e){var t=e.alternate;null!==t&&r.has(t)||r.add(e)})),i.clear()),t&=~a}}var Ci,Si,_i,Ti,Oi,Ri=va,Pi=ga,ji=wa,Di=Ga,Ii=ma;function Li(){return Ii}function Bi(e){Ii=e}function Ni(e,t){return 0!==e&&e<t}function Mi(e){var t=ci(e);return Ni(Ri,t)?Ni(Pi,t)?ai(t)?ji:Di:Pi:Ri}function zi(e){return e.current.memoizedState.isDehydrated}function Ui(e){Ci(e)}var Fi=!1,Wi=[],$i=null,Hi=null,Vi=null,qi=new Map,Yi=new Map,Qi=[],Gi=["mousedown","mouseup","touchcancel","touchend","touchstart","auxclick","dblclick","pointercancel","pointerdown","pointerup","dragend","dragstart","drop","compositionend","compositionstart","keydown","keypress","keyup","input","textInput","copy","cut","paste","click","change","contextmenu","reset","submit"];function Ki(e,t){switch(e){case"focusin":case"focusout":$i=null;break;case"dragenter":case"dragleave":Hi=null;break;case"mouseover":case"mouseout":Vi=null;break;case"pointerover":case"pointerout":var n=t.pointerId;qi.delete(n);break;case"gotpointercapture":case"lostpointercapture":var r=t.pointerId;Yi.delete(r)}}function Xi(e,t,n,r,o,a){if(null===e||e.nativeEvent!==a){var i=function(e,t,n,r,o){return{blockedOn:e,domEventName:t,eventSystemFlags:n,nativeEvent:o,targetContainers:[r]}}(t,n,r,o,a);if(null!==t){var l=qc(t);null!==l&&Si(l)}return i}e.eventSystemFlags|=r;var s=e.targetContainers;return null!==o&&-1===s.indexOf(o)&&s.push(o),e}function Zi(e){var t=Vc(e.target);if(null!==t){var n=go(t);if(null!==n){var r=n.tag;if(r===A){var o=bo(n);if(null!==o)return e.blockedOn=o,void Oi(e.priority,(function(){_i(n)}))}else if(r===f){if(zi(n.stateNode))return void(e.blockedOn=wo(n))}}}e.blockedOn=null}function Ji(e){if(null!==e.blockedOn)return!1;for(var t,n=e.targetContainers;n.length>0;){var r=n[0],o=dl(e.domEventName,e.eventSystemFlags,r,e.nativeEvent);if(null!==o){var a=qc(o);return null!==a&&Si(a),e.blockedOn=o,!1}var i=e.nativeEvent,s=new i.constructor(i.type,i);t=s,null!==dr&&l("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue."),dr=t,i.target.dispatchEvent(s),null===dr&&l("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue."),dr=null,n.shift()}return!0}function el(e,t,n){Ji(e)&&n.delete(t)}function tl(){Fi=!1,null!==$i&&Ji($i)&&($i=null),null!==Hi&&Ji(Hi)&&(Hi=null),null!==Vi&&Ji(Vi)&&(Vi=null),qi.forEach(el),Yi.forEach(el)}function nl(e,t){e.blockedOn===t&&(e.blockedOn=null,Fi||(Fi=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,tl)))}function rl(e){if(Wi.length>0){nl(Wi[0],e);for(var t=1;t<Wi.length;t++){var n=Wi[t];n.blockedOn===e&&(n.blockedOn=null)}}null!==$i&&nl($i,e),null!==Hi&&nl(Hi,e),null!==Vi&&nl(Vi,e);var r=function(t){return nl(t,e)};qi.forEach(r),Yi.forEach(r);for(var o=0;o<Qi.length;o++){var a=Qi[o];a.blockedOn===e&&(a.blockedOn=null)}for(;Qi.length>0;){var i=Qi[0];if(null!==i.blockedOn)break;Zi(i),null===i.blockedOn&&Qi.shift()}}var ol=o.ReactCurrentBatchConfig,al=!0;function il(e){al=!!e}function ll(e,t,n,r){var o=Li(),a=ol.transition;ol.transition=null;try{Bi(Ri),ul(e,t,n,r)}finally{Bi(o),ol.transition=a}}function sl(e,t,n,r){var o=Li(),a=ol.transition;ol.transition=null;try{Bi(Pi),ul(e,t,n,r)}finally{Bi(o),ol.transition=a}}function ul(e,t,n,r){al&&function(e,t,n,r){var o=dl(e,t,n,r);if(null===o)return yu(e,t,r,cl,n),void Ki(e,r);if(function(e,t,n,r,o){switch(t){case"focusin":return $i=Xi($i,e,t,n,r,o),!0;case"dragenter":return Hi=Xi(Hi,e,t,n,r,o),!0;case"mouseover":return Vi=Xi(Vi,e,t,n,r,o),!0;case"pointerover":var a=o,i=a.pointerId;return qi.set(i,Xi(qi.get(i)||null,e,t,n,r,a)),!0;case"gotpointercapture":var l=o,s=l.pointerId;return Yi.set(s,Xi(Yi.get(s)||null,e,t,n,r,l)),!0}return!1}(o,e,t,n,r))return void r.stopPropagation();if(Ki(e,r),t&ur&&function(e){return Gi.indexOf(e)>-1}(e)){for(;null!==o;){var a=qc(o);null!==a&&Ui(a);var i=dl(e,t,n,r);if(null===i&&yu(e,t,r,cl,n),i===o)break;o=i}return void(null!==o&&r.stopPropagation())}yu(e,t,r,null,n)}(e,t,n,r)}var cl=null;function dl(e,t,n,r){cl=null;var o=Vc(fr(r));if(null!==o){var a=go(o);if(null===a)o=null;else{var i=a.tag;if(i===A){var l=bo(a);if(null!==l)return l;o=null}else if(i===f){if(zi(a.stateNode))return wo(a);o=null}else a!==o&&(o=null)}}return cl=o,null}function fl(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return Ri;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return Pi;case"message":switch(jo()){case Do:return Ri;case Io:return Pi;case Lo:case Bo:return ji;case No:return Di;default:return ji}default:return ji}}var pl=null,hl=null,ml=null;function vl(){if(ml)return ml;var e,t,n=hl,r=n.length,o=yl(),a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);var l=t>1?1-t:void 0;return ml=o.slice(e,l)}function yl(){return"value"in pl?pl.value:pl.textContent}function gl(e){var t,n=e.keyCode;return"charCode"in e?0===(t=e.charCode)&&13===n&&(t=13):t=n,10===t&&(t=13),t>=32||13===t?t:0}function bl(){return!0}function wl(){return!1}function kl(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)if(e.hasOwnProperty(i)){var l=e[i];this[i]=l?l(o):o[i]}var s=null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue;return this.isDefaultPrevented=s?bl:wl,this.isPropagationStopped=wl,this}return Ze(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=bl)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=bl)},persist:function(){},isPersistent:bl}),t}var Al,El,xl,Cl={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Sl=kl(Cl),_l=Ze({},Cl,{view:0,detail:0}),Tl=kl(_l);var Ol=Ze({},_l,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Fl,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(function(e){e!==xl&&(xl&&"mousemove"===e.type?(Al=e.screenX-xl.screenX,El=e.screenY-xl.screenY):(Al=0,El=0),xl=e)}(e),Al)},movementY:function(e){return"movementY"in e?e.movementY:El}}),Rl=kl(Ol),Pl=kl(Ze({},Ol,{dataTransfer:0})),jl=kl(Ze({},_l,{relatedTarget:0})),Dl=kl(Ze({},Cl,{animationName:0,elapsedTime:0,pseudoElement:0})),Il=kl(Ze({},Cl,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),Ll=kl(Ze({},Cl,{data:0})),Bl=Ll,Nl={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Ml={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"};var zl={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Ul(e){var t=this.nativeEvent;if(t.getModifierState)return t.getModifierState(e);var n=zl[e];return!!n&&!!t[n]}function Fl(e){return Ul}var Wl=kl(Ze({},_l,{key:function(e){if(e.key){var t=Nl[e.key]||e.key;if("Unidentified"!==t)return t}if("keypress"===e.type){var n=gl(e);return 13===n?"Enter":String.fromCharCode(n)}return"keydown"===e.type||"keyup"===e.type?Ml[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Fl,charCode:function(e){return"keypress"===e.type?gl(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?gl(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),$l=kl(Ze({},Ol,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Hl=kl(Ze({},_l,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Fl})),Vl=kl(Ze({},Cl,{propertyName:0,elapsedTime:0,pseudoElement:0})),ql=kl(Ze({},Ol,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Yl=[9,13,27,32],Ql=229,Gl=K&&"CompositionEvent"in window,Kl=null;K&&"documentMode"in document&&(Kl=document.documentMode);var Xl=K&&"TextEvent"in window&&!Kl,Zl=K&&(!Gl||Kl&&Kl>8&&Kl<=11),Jl=32,es=String.fromCharCode(Jl);var ts=!1;function ns(e,t){switch(e){case"keyup":return-1!==Yl.indexOf(t.keyCode);case"keydown":return t.keyCode!==Ql;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function rs(e){var t=e.detail;return"object"==typeof t&&"data"in t?t.data:null}function os(e){return"ko"===e.locale}var as=!1;function is(e,t,n,r,o){var a,i;if(Gl?a=function(e){switch(e){case"compositionstart":return"onCompositionStart";case"compositionend":return"onCompositionEnd";case"compositionupdate":return"onCompositionUpdate"}}(t):as?ns(t,r)&&(a="onCompositionEnd"):function(e,t){return"keydown"===e&&t.keyCode===Ql}(t,r)&&(a="onCompositionStart"),!a)return null;Zl&&!os(r)&&(as||"onCompositionStart"!==a?"onCompositionEnd"===a&&as&&(i=vl()):as=function(e){return pl=e,hl=yl(),!0}(o));var l=bu(n,a);if(l.length>0){var s=new Ll(a,t,null,r,o);if(e.push({event:s,listeners:l}),i)s.data=i;else{var u=rs(r);null!==u&&(s.data=u)}}}function ls(e,t){if(as){if("compositionend"===e||!Gl&&ns(e,t)){var n=vl();return pl=null,hl=null,ml=null,as=!1,n}return null}switch(e){case"paste":default:return null;case"keypress":if(!function(e){return(e.ctrlKey||e.altKey||e.metaKey)&&!(e.ctrlKey&&e.altKey)}(t)){if(t.char&&t.char.length>1)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Zl&&!os(t)?null:t.data}}function ss(e,t,n,r,o){var a;if(!(a=Xl?function(e,t){switch(e){case"compositionend":return rs(t);case"keypress":return t.which!==Jl?null:(ts=!0,es);case"textInput":var n=t.data;return n===es&&ts?null:n;default:return null}}(t,r):ls(t,r)))return null;var i=bu(n,"onBeforeInput");if(i.length>0){var l=new Bl("onBeforeInput","beforeinput",null,r,o);e.push({event:l,listeners:i}),l.data=a}}var us={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function cs(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!us[e.type]:"textarea"===t}function ds(e,t,n,r){yr(r);var o=bu(t,"onChange");if(o.length>0){var a=new Sl("onChange","change",null,n,r);e.push({event:a,listeners:o})}}var fs=null,ps=null;function hs(e){cu(e,0)}function ms(e){if(Pt(Yc(e)))return e}function vs(e,t){if("change"===e)return t}var ys=!1;function gs(){fs&&(fs.detachEvent("onpropertychange",bs),fs=null,ps=null)}function bs(e){"value"===e.propertyName&&ms(ps)&&function(e){var t=[];ds(t,ps,e,fr(e)),Er(hs,t)}(e)}function ws(e,t,n){"focusin"===e?(gs(),function(e,t){ps=t,(fs=e).attachEvent("onpropertychange",bs)}(t,n)):"focusout"===e&&gs()}function ks(e,t){if("selectionchange"===e||"keyup"===e||"keydown"===e)return ms(ps)}function As(e,t){if("click"===e)return ms(t)}function Es(e,t){if("input"===e||"change"===e)return ms(t)}function xs(e,t,n,r,o,a,i){var l,s,u,c,d,f,p=n?Yc(n):window;if("select"===(c=(u=p).nodeName&&u.nodeName.toLowerCase())||"input"===c&&"file"===u.type?l=vs:cs(p)?ys?l=Es:(l=ks,s=ws):function(e){var t=e.nodeName;return t&&"input"===t.toLowerCase()&&("checkbox"===e.type||"radio"===e.type)}(p)&&(l=As),l){var h=l(t,n);if(h)return void ds(e,h,r,o)}s&&s(t,p,n),"focusout"===t&&(f=(d=p)._wrapperState)&&f.controlled&&"number"===d.type&&Ht(d,"number",d.value)}function Cs(e,t,n,r,o,a,i){var l="mouseover"===t||"pointerover"===t,s="mouseout"===t||"pointerout"===t;if(l&&r!==dr){var u=r.relatedTarget||r.fromElement;if(u&&(Vc(u)||Hc(u)))return}if(s||l){var c,d,f;if(o.window===o)c=o;else{var p=o.ownerDocument;c=p?p.defaultView||p.parentWindow:window}if(s){var v=r.relatedTarget||r.toElement;if(d=n,null!==(f=v?Vc(v):null))(f!==go(f)||f.tag!==h&&f.tag!==m)&&(f=null)}else d=null,f=n;if(d!==f){var y=Rl,g="onMouseLeave",b="onMouseEnter",w="mouse";"pointerout"!==t&&"pointerover"!==t||(y=$l,g="onPointerLeave",b="onPointerEnter",w="pointer");var k=null==d?c:Yc(d),A=null==f?c:Yc(f),E=new y(g,w+"leave",d,r,o);E.target=k,E.relatedTarget=A;var x=null;if(Vc(o)===n){var C=new y(b,w+"enter",f,r,o);C.target=A,C.relatedTarget=k,x=C}!function(e,t,n,r,o){var a=r&&o?function(e,t){for(var n=e,r=t,o=0,a=n;a;a=wu(a))o++;for(var i=0,l=r;l;l=wu(l))i++;for(;o-i>0;)n=wu(n),o--;for(;i-o>0;)r=wu(r),i--;var s=o;for(;s--;){if(n===r||null!==r&&n===r.alternate)return n;n=wu(n),r=wu(r)}return null}(r,o):null;null!==r&&ku(e,t,r,a,!1);null!==o&&null!==n&&ku(e,n,o,a,!0)}(e,E,x,d,f)}}}K&&(ys=function(e){if(!K)return!1;var t="on"+e,n=t in document;if(!n){var r=document.createElement("div");r.setAttribute(t,"return;"),n="function"==typeof r[t]}return n}("input")&&(!document.documentMode||document.documentMode>9));var Ss="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function _s(e,t){if(Ss(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++){var a=n[o];if(!X.call(t,a)||!Ss(e[a],t[a]))return!1}return!0}function Ts(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Os(e){for(;e;){if(e.nextSibling)return e.nextSibling;e=e.parentNode}}function Rs(e,t){for(var n=Ts(e),r=0,o=0;n;){if(n.nodeType===gn){if(o=r+n.textContent.length,r<=t&&o>=t)return{node:n,offset:t-r};r=o}n=Ts(Os(n))}}function Ps(e){var t=e.ownerDocument,n=t&&t.defaultView||window,r=n.getSelection&&n.getSelection();if(!r||0===r.rangeCount)return null;var o=r.anchorNode,a=r.anchorOffset,i=r.focusNode,l=r.focusOffset;try{o.nodeType,i.nodeType}catch(e){return null}return function(e,t,n,r,o){var a=0,i=-1,l=-1,s=0,u=0,c=e,d=null;e:for(;;){for(var f=null;c!==t||0!==n&&c.nodeType!==gn||(i=a+n),c!==r||0!==o&&c.nodeType!==gn||(l=a+o),c.nodeType===gn&&(a+=c.nodeValue.length),null!==(f=c.firstChild);)d=c,c=f;for(;;){if(c===e)break e;if(d===t&&++s===n&&(i=a),d===r&&++u===o&&(l=a),null!==(f=c.nextSibling))break;d=(c=d).parentNode}c=f}if(-1===i||-1===l)return null;return{start:i,end:l}}(e,o,a,i,l)}function js(e){return e&&e.nodeType===gn}function Ds(e,t){return!(!e||!t)&&(e===t||!js(e)&&(js(t)?Ds(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function Is(e){return e&&e.ownerDocument&&Ds(e.ownerDocument.documentElement,e)}function Ls(e){try{return"string"==typeof e.contentWindow.location.href}catch(e){return!1}}function Bs(){for(var e=window,t=jt();t instanceof e.HTMLIFrameElement;){if(!Ls(t))return t;t=jt((e=t.contentWindow).document)}return t}function Ns(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function Ms(e){var t=Bs(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&Is(n)){null!==r&&Ns(n)&&function(e,t){var n=t.start,r=t.end;void 0===r&&(r=n);"selectionStart"in e?(e.selectionStart=n,e.selectionEnd=Math.min(r,e.value.length)):function(e,t){var n=e.ownerDocument||document,r=n&&n.defaultView||window;if(r.getSelection){var o=r.getSelection(),a=e.textContent.length,i=Math.min(t.start,a),l=void 0===t.end?i:Math.min(t.end,a);if(!o.extend&&i>l){var s=l;l=i,i=s}var u=Rs(e,i),c=Rs(e,l);if(u&&c){if(1===o.rangeCount&&o.anchorNode===u.node&&o.anchorOffset===u.offset&&o.focusNode===c.node&&o.focusOffset===c.offset)return;var d=n.createRange();d.setStart(u.node,u.offset),o.removeAllRanges(),i>l?(o.addRange(d),o.extend(c.node,c.offset)):(d.setEnd(c.node,c.offset),o.addRange(d))}}}(e,t)}(n,r);for(var o=[],a=n;a=a.parentNode;)a.nodeType===yn&&o.push({element:a,left:a.scrollLeft,top:a.scrollTop});"function"==typeof n.focus&&n.focus();for(var i=0;i<o.length;i++){var l=o[i];l.element.scrollLeft=l.left,l.element.scrollTop=l.top}}}function zs(e){return("selectionStart"in e?{start:e.selectionStart,end:e.selectionEnd}:Ps(e))||{start:0,end:0}}var Us=K&&"documentMode"in document&&document.documentMode<=11;var Fs=null,Ws=null,$s=null,Hs=!1;function Vs(e,t,n){var r,o=(r=n).window===r?r.document:r.nodeType===wn?r:r.ownerDocument;if(!Hs&&null!=Fs&&Fs===jt(o)){var a=function(e){if("selectionStart"in e&&Ns(e))return{start:e.selectionStart,end:e.selectionEnd};var t=(e.ownerDocument&&e.ownerDocument.defaultView||window).getSelection();return{anchorNode:t.anchorNode,anchorOffset:t.anchorOffset,focusNode:t.focusNode,focusOffset:t.focusOffset}}(Fs);if(!$s||!_s($s,a)){$s=a;var i=bu(Ws,"onSelect");if(i.length>0){var l=new Sl("onSelect","select",null,t,n);e.push({event:l,listeners:i}),l.target=Fs}}}}function qs(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Ys={animationend:qs("Animation","AnimationEnd"),animationiteration:qs("Animation","AnimationIteration"),animationstart:qs("Animation","AnimationStart"),transitionend:qs("Transition","TransitionEnd")},Qs={},Gs={};function Ks(e){if(Qs[e])return Qs[e];if(!Ys[e])return e;var t=Ys[e];for(var n in t)if(t.hasOwnProperty(n)&&n in Gs)return Qs[e]=t[n];return e}K&&(Gs=document.createElement("div").style,"AnimationEvent"in window||(delete Ys.animationend.animation,delete Ys.animationiteration.animation,delete Ys.animationstart.animation),"TransitionEvent"in window||delete Ys.transitionend.transition);var Xs=Ks("animationend"),Zs=Ks("animationiteration"),Js=Ks("animationstart"),eu=Ks("transitionend"),tu=new Map,nu=["abort","auxClick","cancel","canPlay","canPlayThrough","click","close","contextMenu","copy","cut","drag","dragEnd","dragEnter","dragExit","dragLeave","dragOver","dragStart","drop","durationChange","emptied","encrypted","ended","error","gotPointerCapture","input","invalid","keyDown","keyPress","keyUp","load","loadedData","loadedMetadata","loadStart","lostPointerCapture","mouseDown","mouseMove","mouseOut","mouseOver","mouseUp","paste","pause","play","playing","pointerCancel","pointerDown","pointerMove","pointerOut","pointerOver","pointerUp","progress","rateChange","reset","resize","seeked","seeking","stalled","submit","suspend","timeUpdate","touchCancel","touchEnd","touchStart","volumeChange","scroll","toggle","touchMove","waiting","wheel"];function ru(e,t){tu.set(e,t),Q(t,[e])}function ou(e,t,n,r,o,a,i){var l=tu.get(t);if(void 0!==l){var s=Sl,u=t;switch(t){case"keypress":if(0===gl(r))return;case"keydown":case"keyup":s=Wl;break;case"focusin":u="focus",s=jl;break;case"focusout":u="blur",s=jl;break;case"beforeblur":case"afterblur":s=jl;break;case"click":if(2===r.button)return;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=Rl;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=Pl;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=Hl;break;case Xs:case Zs:case Js:s=Dl;break;case eu:s=Vl;break;case"scroll":s=Tl;break;case"wheel":s=ql;break;case"copy":case"cut":case"paste":s=Il;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=$l}var c=0!=(a&ur),d=!c&&"scroll"===t,f=function(e,t,n,r,o,a){var i=null!==t?t+"Capture":null,l=r?i:t,s=[],u=e,c=null;for(;null!==u;){var d=u,f=d.stateNode;if(d.tag===h&&null!==f&&(c=f,null!==l)){var p=xr(u,l);null!=p&&s.push(gu(u,p,c))}if(o)break;u=u.return}return s}(n,l,r.type,c,d);if(f.length>0){var p=new s(l,u,null,r,o);e.push({event:p,listeners:f})}}}function au(e,t,n,r,o,a,i){ou(e,t,n,r,o,a),0==(a&cr)&&(Cs(e,t,n,r,o),xs(e,t,n,r,o),function(e,t,n,r,o,a,i){var l=n?Yc(n):window;switch(t){case"focusin":(cs(l)||"true"===l.contentEditable)&&(Fs=l,Ws=n,$s=null);break;case"focusout":Fs=null,Ws=null,$s=null;break;case"mousedown":Hs=!0;break;case"contextmenu":case"mouseup":case"dragend":Hs=!1,Vs(e,r,o);break;case"selectionchange":if(Us)break;case"keydown":case"keyup":Vs(e,r,o)}}(e,t,n,r,o),function(e,t,n,r,o,a,i){is(e,t,n,r,o),ss(e,t,n,r,o)}(e,t,n,r,o))}!function(){for(var e=0;e<nu.length;e++){var t=nu[e];ru(t.toLowerCase(),"on"+(t[0].toUpperCase()+t.slice(1)))}ru(Xs,"onAnimationEnd"),ru(Zs,"onAnimationIteration"),ru(Js,"onAnimationStart"),ru("dblclick","onDoubleClick"),ru("focusin","onFocus"),ru("focusout","onBlur"),ru(eu,"onTransitionEnd")}(),G("onMouseEnter",["mouseout","mouseover"]),G("onMouseLeave",["mouseout","mouseover"]),G("onPointerEnter",["pointerout","pointerover"]),G("onPointerLeave",["pointerout","pointerover"]),Q("onChange",["change","click","focusin","focusout","input","keydown","keyup","selectionchange"]),Q("onSelect",["focusout","contextmenu","dragend","focusin","keydown","keyup","mousedown","mouseup","selectionchange"]),Q("onBeforeInput",["compositionend","keypress","textInput","paste"]),Q("onCompositionEnd",["compositionend","focusout","keydown","keypress","keyup","mousedown"]),Q("onCompositionStart",["compositionstart","focusout","keydown","keypress","keyup","mousedown"]),Q("onCompositionUpdate",["compositionupdate","focusout","keydown","keypress","keyup","mousedown"]);var iu=["abort","canplay","canplaythrough","durationchange","emptied","encrypted","ended","error","loadeddata","loadedmetadata","loadstart","pause","play","playing","progress","ratechange","resize","seeked","seeking","stalled","suspend","timeupdate","volumechange","waiting"],lu=new Set(["cancel","close","invalid","load","scroll","toggle"].concat(iu));function su(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,a,i,l,s){if(Br.apply(this,arguments),Pr){var u=Nr();Dr||(Dr=!0,Ir=u)}}(r,t,void 0,e),e.currentTarget=null}function uu(e,t,n){var r;if(n)for(var o=t.length-1;o>=0;o--){var a=t[o],i=a.instance,l=a.currentTarget,s=a.listener;if(i!==r&&e.isPropagationStopped())return;su(e,s,l),r=i}else for(var u=0;u<t.length;u++){var c=t[u],d=c.instance,f=c.currentTarget,p=c.listener;if(d!==r&&e.isPropagationStopped())return;su(e,p,f),r=d}}function cu(e,t){for(var n=0!=(t&ur),r=0;r<e.length;r++){var o=e[r];uu(o.event,o.listeners,n)}!function(){if(Dr){var e=Ir;throw Dr=!1,Ir=null,e}}()}function du(e,t){lu.has(e)||l('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.',e);var n=function(e){var t=e[Mc];void 0===t&&(t=e[Mc]=new Set);return t}(t),r=function(e,t){return e+"__"+(t?"capture":"bubble")}(e,false);n.has(r)||(mu(t,e,sr,false),n.add(r))}function fu(e,t,n){lu.has(e)&&!t&&l('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.',e);var r=0;t&&(r|=ur),mu(n,e,r,t)}var pu="_reactListening"+Math.random().toString(36).slice(2);function hu(e){if(!e[pu]){e[pu]=!0,V.forEach((function(t){"selectionchange"!==t&&(lu.has(t)||fu(t,!1,e),fu(t,!0,e))}));var t=e.nodeType===wn?e:e.ownerDocument;null!==t&&(t[pu]||(t[pu]=!0,fu("selectionchange",!1,t)))}}function mu(e,t,n,r,o){var a=function(e,t,n){var r;switch(fl(t)){case Ri:r=ll;break;case Pi:r=sl;break;default:r=ul}return r.bind(null,t,n,e)}(e,t,n),i=void 0;Cr&&("touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(i=!0)),r?void 0!==i?function(e,t,n,r){e.addEventListener(t,n,{capture:!0,passive:r})}(e,t,a,i):function(e,t,n){e.addEventListener(t,n,!0)}(e,t,a):void 0!==i?function(e,t,n,r){e.addEventListener(t,n,{passive:r})}(e,t,a,i):function(e,t,n){e.addEventListener(t,n,!1)}(e,t,a)}function vu(e,t){return e===t||e.nodeType===bn&&e.parentNode===t}function yu(e,t,n,r,o){var a=r;if(0==(t&lr)&&0==(t&sr)){var i=o;if(null!==r){var l=r;e:for(;;){if(null===l)return;var s=l.tag;if(s===f||s===p){var u=l.stateNode.containerInfo;if(vu(u,i))break;if(s===p)for(var c=l.return;null!==c;){var d=c.tag;if(d===f||d===p)if(vu(c.stateNode.containerInfo,i))return;c=c.return}for(;null!==u;){var v=Vc(u);if(null===v)return;var y=v.tag;if(y===h||y===m){l=a=v;continue e}u=u.parentNode}}l=l.return}}}Er((function(){return function(e,t,n,r,o){var a=[];au(a,e,r,n,fr(n),t),cu(a,t)}(e,t,n,a)}))}function gu(e,t,n){return{instance:e,listener:t,currentTarget:n}}function bu(e,t){for(var n=t+"Capture",r=[],o=e;null!==o;){var a=o,i=a.stateNode;if(a.tag===h&&null!==i){var l=i,s=xr(o,n);null!=s&&r.unshift(gu(o,s,l));var u=xr(o,t);null!=u&&r.push(gu(o,u,l))}o=o.return}return r}function wu(e){if(null===e)return null;do{e=e.return}while(e&&e.tag!==h);return e||null}function ku(e,t,n,r,o){for(var a=t._reactName,i=[],l=n;null!==l&&l!==r;){var s=l,u=s.alternate,c=s.stateNode,d=s.tag;if(null!==u&&u===r)break;if(d===h&&null!==c){var f=c;if(o){var p=xr(l,a);null!=p&&i.unshift(gu(l,p,f))}else if(!o){var m=xr(l,a);null!=m&&i.push(gu(l,m,f))}}l=l.return}0!==i.length&&e.push({event:t,listeners:i})}var Au,Eu,xu,Cu,Su,_u,Tu,Ou=!1,Ru="dangerouslySetInnerHTML",Pu="suppressContentEditableWarning",ju="suppressHydrationWarning",Du="autoFocus",Iu="children",Lu="style",Bu="__html";Au={dialog:!0,webview:!0},Eu=function(e,t){Zn(e,t),function(e,t){"input"!==e&&"textarea"!==e&&"select"!==e||null==t||null!==t.value||Jn||(Jn=!0,"select"===e&&t.multiple?l("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.",e):l("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.",e))}(e,t),function(e,t,n){Vn(e,t)||ir(e,t,n)}(e,t,{registrationNameDependencies:q,possibleRegistrationNames:Y})},_u=K&&!document.documentMode,xu=function(e,t,n){if(!Ou){var r=zu(n),o=zu(t);o!==r&&(Ou=!0,l("Prop `%s` did not match. Server: %s Client: %s",e,JSON.stringify(o),JSON.stringify(r)))}},Cu=function(e){if(!Ou){Ou=!0;var t=[];e.forEach((function(e){t.push(e)})),l("Extra attributes from the server: %s",t)}},Su=function(e,t){!1===t?l("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.",e,e,e):l("Expected `%s` listener to be a function, instead got a value of `%s` type.",e,typeof t)},Tu=function(e,t){var n=e.namespaceURI===un?e.ownerDocument.createElement(e.tagName):e.ownerDocument.createElementNS(e.namespaceURI,e.tagName);return n.innerHTML=t,n.innerHTML};var Nu=/\r\n?/g,Mu=/\u0000|\uFFFD/g;function zu(e){return function(e){if(J(e))l("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.",Z(e)),ee(e)}(e),("string"==typeof e?e:""+e).replace(Nu,"\n").replace(Mu,"")}function Uu(e,t,n,r){var o=zu(t),a=zu(e);if(a!==o&&(r&&(Ou||(Ou=!0,l('Text content did not match. Server: "%s" Client: "%s"',a,o))),n&&I))throw new Error("Text content does not match server-rendered HTML.")}function Fu(e){return e.nodeType===wn?e:e.ownerDocument}function Wu(){}function $u(e){e.onclick=Wu}function Hu(e,t,n,r){var o,a=Vn(t,n);switch(Eu(t,n),t){case"dialog":du("cancel",e),du("close",e),o=n;break;case"iframe":case"object":case"embed":du("load",e),o=n;break;case"video":case"audio":for(var i=0;i<iu.length;i++)du(iu[i],e);o=n;break;case"source":du("error",e),o=n;break;case"img":case"image":case"link":du("error",e),du("load",e),o=n;break;case"details":du("toggle",e),o=n;break;case"input":zt(e,n),o=Mt(e,n),du("invalid",e);break;case"option":Qt(0,n),o=n;break;case"select":nn(e,n),o=tn(0,n),du("invalid",e);break;case"textarea":an(e,n),o=on(e,n),du("invalid",e);break;default:o=n}switch(Hn(t,o),function(e,t,n,r,o){for(var a in r)if(r.hasOwnProperty(a)){var i=r[a];if(a===Lu)i&&Object.freeze(i),Un(t,i);else if(a===Ru){var l=i?i[Bu]:void 0;null!=l&&vn(t,l)}else a===Iu?"string"==typeof i?("textarea"!==e||""!==i)&&An(t,i):"number"==typeof i&&An(t,""+i):a===Pu||a===ju||a===Du||(q.hasOwnProperty(a)?null!=i&&("function"!=typeof i&&Su(a,i),"onScroll"===a&&du("scroll",t)):null!=i&&Te(t,a,i,o))}}(t,e,0,o,a),t){case"input":Rt(e),Wt(e,n,!1);break;case"textarea":Rt(e),sn(e);break;case"option":!function(e,t){null!=t.value&&e.setAttribute("value",xt(Ct(t.value)))}(e,n);break;case"select":!function(e,t){var n=e;n.multiple=!!t.multiple;var r=t.value;null!=r?en(n,!!t.multiple,r,!1):null!=t.defaultValue&&en(n,!!t.multiple,t.defaultValue,!0)}(e,n);break;default:"function"==typeof o.onClick&&$u(e)}}function Vu(e,t,n,r,o){Eu(t,r);var a,i,s,u,c=null;switch(t){case"input":a=Mt(e,n),i=Mt(e,r),c=[];break;case"select":a=tn(0,n),i=tn(0,r),c=[];break;case"textarea":a=on(e,n),i=on(e,r),c=[];break;default:i=r,"function"!=typeof(a=n).onClick&&"function"==typeof i.onClick&&$u(e)}Hn(t,i);var d=null;for(s in a)if(!i.hasOwnProperty(s)&&a.hasOwnProperty(s)&&null!=a[s])if(s===Lu){var f=a[s];for(u in f)f.hasOwnProperty(u)&&(d||(d={}),d[u]="")}else s===Ru||s===Iu||s===Pu||s===ju||s===Du||(q.hasOwnProperty(s)?c||(c=[]):(c=c||[]).push(s,null));for(s in i){var p=i[s],h=null!=a?a[s]:void 0;if(i.hasOwnProperty(s)&&p!==h&&(null!=p||null!=h))if(s===Lu)if(p&&Object.freeze(p),h){for(u in h)!h.hasOwnProperty(u)||p&&p.hasOwnProperty(u)||(d||(d={}),d[u]="");for(u in p)p.hasOwnProperty(u)&&h[u]!==p[u]&&(d||(d={}),d[u]=p[u])}else d||(c||(c=[]),c.push(s,d)),d=p;else if(s===Ru){var m=p?p[Bu]:void 0,v=h?h[Bu]:void 0;null!=m&&v!==m&&(c=c||[]).push(s,m)}else s===Iu?"string"!=typeof p&&"number"!=typeof p||(c=c||[]).push(s,""+p):s===Pu||s===ju||(q.hasOwnProperty(s)?(null!=p&&("function"!=typeof p&&Su(s,p),"onScroll"===s&&du("scroll",e)),c||h===p||(c=[])):(c=c||[]).push(s,p))}return d&&(!function(e,t){if(t){var n,r=Fn(e),o=Fn(t),a={};for(var i in r){var s=r[i],u=o[i];if(u&&s!==u){var c=s+","+u;if(a[c])continue;a[c]=!0,l("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.",null==(n=e[s])||"boolean"==typeof n||""===n?"Removing":"Updating",s,u)}}}}(d,i[Lu]),(c=c||[]).push(Lu,d)),c}function qu(e,t,n,r,o){"input"===n&&"radio"===o.type&&null!=o.name&&Ut(e,o);Vn(n,r);switch(function(e,t,n,r){for(var o=0;o<t.length;o+=2){var a=t[o],i=t[o+1];a===Lu?Un(e,i):a===Ru?vn(e,i):a===Iu?An(e,i):Te(e,a,i,r)}}(e,t,0,Vn(n,o)),n){case"input":Ft(e,o);break;case"textarea":ln(e,o);break;case"select":!function(e,t){var n=e,r=n._wrapperState.wasMultiple;n._wrapperState.wasMultiple=!!t.multiple;var o=t.value;null!=o?en(n,!!t.multiple,o,!1):r!==!!t.multiple&&(null!=t.defaultValue?en(n,!!t.multiple,t.defaultValue,!0):en(n,!!t.multiple,t.multiple?[]:"",!1))}(e,o)}}function Yu(e,t){Ou||(Ou=!0,l("Did not expect server HTML to contain a <%s> in <%s>.",t.nodeName.toLowerCase(),e.nodeName.toLowerCase()))}function Qu(e,t){Ou||(Ou=!0,l('Did not expect server HTML to contain the text node "%s" in <%s>.',t.nodeValue,e.nodeName.toLowerCase()))}function Gu(e,t,n){Ou||(Ou=!0,l("Expected server HTML to contain a matching <%s> in <%s>.",t,e.nodeName.toLowerCase()))}function Ku(e,t){""!==t&&(Ou||(Ou=!0,l('Expected server HTML to contain a matching text node for "%s" in <%s>.',t,e.nodeName.toLowerCase())))}var Xu=function(){},Zu=function(){},Ju=["address","applet","area","article","aside","base","basefont","bgsound","blockquote","body","br","button","caption","center","col","colgroup","dd","details","dir","div","dl","dt","embed","fieldset","figcaption","figure","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","iframe","img","input","isindex","li","link","listing","main","marquee","menu","menuitem","meta","nav","noembed","noframes","noscript","object","ol","p","param","plaintext","pre","script","section","select","source","style","summary","table","tbody","td","template","textarea","tfoot","th","thead","title","tr","track","ul","wbr","xmp"],ec=["applet","caption","html","table","td","th","marquee","object","template","foreignObject","desc","title"],tc=ec.concat(["button"]),nc=["dd","dt","li","option","optgroup","p","rp","rt"],rc={current:null,formTag:null,aTagInScope:null,buttonTagInScope:null,nobrTagInScope:null,pTagInButtonScope:null,listItemTagAutoclosing:null,dlItemTagAutoclosing:null};Zu=function(e,t){var n=Ze({},e||rc),r={tag:t};return-1!==ec.indexOf(t)&&(n.aTagInScope=null,n.buttonTagInScope=null,n.nobrTagInScope=null),-1!==tc.indexOf(t)&&(n.pTagInButtonScope=null),-1!==Ju.indexOf(t)&&"address"!==t&&"div"!==t&&"p"!==t&&(n.listItemTagAutoclosing=null,n.dlItemTagAutoclosing=null),n.current=r,"form"===t&&(n.formTag=r),"a"===t&&(n.aTagInScope=r),"button"===t&&(n.buttonTagInScope=r),"nobr"===t&&(n.nobrTagInScope=r),"p"===t&&(n.pTagInButtonScope=r),"li"===t&&(n.listItemTagAutoclosing=r),"dd"!==t&&"dt"!==t||(n.dlItemTagAutoclosing=r),n};var oc={};Xu=function(e,t,n){var r=(n=n||rc).current,o=r&&r.tag;null!=t&&(null!=e&&l("validateDOMNesting: when childText is passed, childTag should be null"),e="#text");var a=function(e,t){switch(t){case"select":return"option"===e||"optgroup"===e||"#text"===e;case"optgroup":return"option"===e||"#text"===e;case"option":return"#text"===e;case"tr":return"th"===e||"td"===e||"style"===e||"script"===e||"template"===e;case"tbody":case"thead":case"tfoot":return"tr"===e||"style"===e||"script"===e||"template"===e;case"colgroup":return"col"===e||"template"===e;case"table":return"caption"===e||"colgroup"===e||"tbody"===e||"tfoot"===e||"thead"===e||"style"===e||"script"===e||"template"===e;case"head":return"base"===e||"basefont"===e||"bgsound"===e||"link"===e||"meta"===e||"title"===e||"noscript"===e||"noframes"===e||"style"===e||"script"===e||"template"===e;case"html":return"head"===e||"body"===e||"frameset"===e;case"frameset":return"frame"===e;case"#document":return"html"===e}switch(e){case"h1":case"h2":case"h3":case"h4":case"h5":case"h6":return"h1"!==t&&"h2"!==t&&"h3"!==t&&"h4"!==t&&"h5"!==t&&"h6"!==t;case"rp":case"rt":return-1===nc.indexOf(t);case"body":case"caption":case"col":case"colgroup":case"frameset":case"frame":case"head":case"html":case"tbody":case"td":case"tfoot":case"th":case"thead":case"tr":return null==t}return!0}(e,o)?null:r,i=a?null:function(e,t){switch(e){case"address":case"article":case"aside":case"blockquote":case"center":case"details":case"dialog":case"dir":case"div":case"dl":case"fieldset":case"figcaption":case"figure":case"footer":case"header":case"hgroup":case"main":case"menu":case"nav":case"ol":case"p":case"section":case"summary":case"ul":case"pre":case"listing":case"table":case"hr":case"xmp":case"h1":case"h2":case"h3":case"h4":case"h5":case"h6":return t.pTagInButtonScope;case"form":return t.formTag||t.pTagInButtonScope;case"li":return t.listItemTagAutoclosing;case"dd":case"dt":return t.dlItemTagAutoclosing;case"button":return t.buttonTagInScope;case"a":return t.aTagInScope;case"nobr":return t.nobrTagInScope}return null}(e,n),s=a||i;if(s){var u=s.tag,c=!!a+"|"+e+"|"+u;if(!oc[c]){oc[c]=!0;var d=e,f="";if("#text"===e?/\S/.test(t)?d="Text nodes":(d="Whitespace text nodes",f=" Make sure you don't have any extra whitespace between tags on each line of your source code."):d="<"+e+">",a){var p="";"table"===u&&"tr"===e&&(p+=" Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser."),l("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s",d,u,f,p)}else l("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.",d,u)}}};var ac="suppressHydrationWarning",ic="$",lc="/$",sc="$?",uc="$!",cc="style",dc=null,fc=null;function pc(e){var t;dc=al,t=Bs(),fc={focusedElem:t,selectionRange:Ns(t)?zs(t):null};return il(!1),null}function hc(e,t,n,r,o){var a=r;if(Xu(e,null,a.ancestorInfo),"string"==typeof t.children||"number"==typeof t.children){var i=""+t.children,s=Zu(a.ancestorInfo,e);Xu(null,i,s)}var u=function(e,t,n,r){var o,a,i=Fu(n),s=r;if(s===un&&(s=fn(e)),s===un){if((o=Vn(e,t))||e===e.toLowerCase()||l("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.",e),"script"===e){var u=i.createElement("div");u.innerHTML="<script><\/script>";var c=u.firstChild;a=u.removeChild(c)}else if("string"==typeof t.is)a=i.createElement(e,{is:t.is});else if(a=i.createElement(e),"select"===e){var d=a;t.multiple?d.multiple=!0:t.size&&(d.size=t.size)}}else a=i.createElementNS(s,e);return s===un&&(o||"[object HTMLUnknownElement]"!==Object.prototype.toString.call(a)||X.call(Au,e)||(Au[e]=!0,l("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.",e))),a}(e,t,n,a.namespace);return Fc(o,u),Gc(u,t),u}function mc(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}function vc(e,t,n,r){Xu(null,e,n.ancestorInfo);var o=function(e,t){return Fu(t).createTextNode(e)}(e,t);return Fc(r,o),o}var yc="function"==typeof setTimeout?setTimeout:void 0,gc="function"==typeof clearTimeout?clearTimeout:void 0,bc=-1,wc="function"==typeof Promise?Promise:void 0,kc="function"==typeof queueMicrotask?queueMicrotask:void 0!==wc?function(e){return wc.resolve(null).then(e).catch(Ac)}:yc;function Ac(e){setTimeout((function(){throw e}))}function Ec(e){An(e,"")}function xc(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&o.nodeType===bn){var a=o.data;if(a===lc){if(0===r)return e.removeChild(o),void rl(t);r--}else a!==ic&&a!==sc&&a!==uc||r++}n=o}while(n);rl(t)}function Cc(e){var t=e.style;"function"==typeof t.setProperty?t.setProperty("display","none","important"):t.display="none"}function Sc(e,t){var n=t[cc],r=null!=n&&n.hasOwnProperty("display")?n.display:null;e.style.display=Sn("display",r)}function _c(e,t){e.nodeValue=t}function Tc(e){return e.data===sc}function Oc(e){return e.data===uc}function Rc(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(t===yn||t===gn)break;if(t===bn){var n=e.data;if(n===ic||n===uc||n===sc)break;if(n===lc)return null}}return e}function Pc(e){return Rc(e.nextSibling)}function jc(e,t,n,r,o,a,i){return Fc(a,e),Gc(e,n),function(e,t,n,r,o,a,i){var l,s;switch(l=Vn(t,n),Eu(t,n),t){case"dialog":du("cancel",e),du("close",e);break;case"iframe":case"object":case"embed":du("load",e);break;case"video":case"audio":for(var u=0;u<iu.length;u++)du(iu[u],e);break;case"source":du("error",e);break;case"img":case"image":case"link":du("error",e),du("load",e);break;case"details":du("toggle",e);break;case"input":zt(e,n),du("invalid",e);break;case"option":Qt(0,n);break;case"select":nn(e,n),du("invalid",e);break;case"textarea":an(e,n),du("invalid",e)}Hn(t,n),s=new Set;for(var c=e.attributes,d=0;d<c.length;d++)switch(c[d].name.toLowerCase()){case"value":case"checked":case"selected":break;default:s.add(c[d].name)}var f,p=null;for(var h in n)if(n.hasOwnProperty(h)){var m=n[h];if(h===Iu)"string"==typeof m?e.textContent!==m&&(!0!==n[ju]&&Uu(e.textContent,m,a,i),p=[Iu,m]):"number"==typeof m&&e.textContent!==""+m&&(!0!==n[ju]&&Uu(e.textContent,m,a,i),p=[Iu,""+m]);else if(q.hasOwnProperty(h))null!=m&&("function"!=typeof m&&Su(h,m),"onScroll"===h&&du("scroll",e));else if(i&&"boolean"==typeof l){var v=void 0,y=l&&U?null:ge(h);if(!0===n[ju]);else if(h===Pu||h===ju||"value"===h||"checked"===h||"selected"===h);else if(h===Ru){var g=e.innerHTML,b=m?m[Bu]:void 0;if(null!=b){var w=Tu(e,b);w!==g&&xu(h,g,w)}}else if(h===Lu){if(s.delete(h),_u){var k=zn(m);k!==(v=e.getAttribute("style"))&&xu(h,v,k)}}else if(l&&!U)s.delete(h.toLowerCase()),m!==(v=_e(e,h,m))&&xu(h,v,m);else if(!me(h,y,l)&&!ye(h,m,y,l)){var A=!1;if(null!==y)s.delete(y.attributeName),v=Se(e,h,m,y);else{var E=r;if(E===un&&(E=fn(t)),E===un)s.delete(h.toLowerCase());else{var x=(f=void 0,f=h.toLowerCase(),qn.hasOwnProperty(f)&&qn[f]||null);null!==x&&x!==h&&(A=!0,s.delete(x)),s.delete(h)}v=_e(e,h,m)}U||m===v||A||xu(h,v,m)}}}switch(i&&s.size>0&&!0!==n[ju]&&Cu(s),t){case"input":Rt(e),Wt(e,n,!0);break;case"textarea":Rt(e),sn(e);break;case"select":case"option":break;default:"function"==typeof n.onClick&&$u(e)}return p}(e,t,n,o.namespace,0,(a.mode&ia)!==aa,i)}function Dc(e){for(var t=e.previousSibling,n=0;t;){if(t.nodeType===bn){var r=t.data;if(r===ic||r===uc||r===sc){if(0===n)return t;n--}else r===lc&&n++}t=t.previousSibling}return null}var Ic=Math.random().toString(36).slice(2),Lc="__reactFiber$"+Ic,Bc="__reactProps$"+Ic,Nc="__reactContainer$"+Ic,Mc="__reactEvents$"+Ic,zc="__reactListeners$"+Ic,Uc="__reactHandles$"+Ic;function Fc(e,t){t[Lc]=e}function Wc(e,t){t[Nc]=e}function $c(e){e[Nc]=null}function Hc(e){return!!e[Nc]}function Vc(e){var t=e[Lc];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Nc]||n[Lc]){var r=t.alternate;if(null!==t.child||null!==r&&null!==r.child)for(var o=Dc(e);null!==o;){var a=o[Lc];if(a)return a;o=Dc(o)}return t}n=(e=n).parentNode}return null}function qc(e){var t=e[Lc]||e[Nc];return t&&(t.tag===h||t.tag===m||t.tag===A||t.tag===f)?t:null}function Yc(e){if(e.tag===h||e.tag===m)return e.stateNode;throw new Error("getNodeFromInstance: Invalid argument.")}function Qc(e){return e[Bc]||null}function Gc(e,t){e[Bc]=t}var Kc={},Xc=o.ReactDebugCurrentFrame;function Zc(e){if(e){var t=e._owner,n=ut(e.type,e._source,t?t.type:null);Xc.setExtraStackFrame(n)}else Xc.setExtraStackFrame(null)}function Jc(e,t,n,r,o){var a=Function.call.bind(X);for(var i in e)if(a(e,i)){var s=void 0;try{if("function"!=typeof e[i]){var u=Error((r||"React class")+": "+n+" type `"+i+"` is invalid; it must be a function, usually from the `prop-types` package, but received `"+typeof e[i]+"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");throw u.name="Invariant Violation",u}s=e[i](t,i,r,n,null,"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED")}catch(e){s=e}!s||s instanceof Error||(Zc(o),l("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",r||"React class",n,i,typeof s),Zc(null)),s instanceof Error&&!(s.message in Kc)&&(Kc[s.message]=!0,Zc(o),l("Failed %s type: %s",n,s.message),Zc(null))}}var ed,td=[];ed=[];var nd,rd=-1;function od(e){return{current:e}}function ad(e,t){rd<0?l("Unexpected pop."):(t!==ed[rd]&&l("Unexpected Fiber popped."),e.current=td[rd],td[rd]=null,ed[rd]=null,rd--)}function id(e,t,n){rd++,td[rd]=e.current,ed[rd]=n,e.current=t}nd={};var ld={};Object.freeze(ld);var sd=od(ld),ud=od(!1),cd=ld;function dd(e,t,n){return n&&md(t)?cd:sd.current}function fd(e,t,n){var r=e.stateNode;r.__reactInternalMemoizedUnmaskedChildContext=t,r.__reactInternalMemoizedMaskedChildContext=n}function pd(e,t){var n=e.type.contextTypes;if(!n)return ld;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o={};for(var a in n)o[a]=t[a];return Jc(n,o,"context",mt(e)||"Unknown"),r&&fd(e,t,o),o}function hd(){return ud.current}function md(e){var t=e.childContextTypes;return null!=t}function vd(e){ad(ud,e),ad(sd,e)}function yd(e){ad(ud,e),ad(sd,e)}function gd(e,t,n){if(sd.current!==ld)throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");id(sd,t,e),id(ud,n,e)}function bd(e,t,n){var r=e.stateNode,o=t.childContextTypes;if("function"!=typeof r.getChildContext){var a=mt(e)||"Unknown";return nd[a]||(nd[a]=!0,l("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.",a,a)),n}var i=r.getChildContext();for(var s in i)if(!(s in o))throw new Error((mt(e)||"Unknown")+'.getChildContext(): key "'+s+'" is not defined in childContextTypes.');return Jc(o,i,"child context",mt(e)||"Unknown"),Ze({},n,i)}function wd(e){var t=e.stateNode,n=t&&t.__reactInternalMemoizedMergedChildContext||ld;return cd=sd.current,id(sd,n,e),id(ud,ud.current,e),!0}function kd(e,t,n){var r=e.stateNode;if(!r)throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");if(n){var o=bd(e,t,cd);r.__reactInternalMemoizedMergedChildContext=o,ad(ud,e),ad(sd,e),id(sd,o,e),id(ud,n,e)}else ad(ud,e),id(ud,n,e)}function Ad(e){if(!function(e){return go(e)===e}(e)||e.tag!==c)throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");var t=e;do{switch(t.tag){case f:return t.stateNode.context;case c:if(md(t.type))return t.stateNode.__reactInternalMemoizedMergedChildContext}t=t.return}while(null!==t);throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.")}var Ed=0,xd=1,Cd=null,Sd=!1,_d=!1;function Td(e){null===Cd?Cd=[e]:Cd.push(e)}function Od(){Sd&&Rd()}function Rd(){if(!_d&&null!==Cd){_d=!0;var e=0,t=Li();try{var n=Cd;for(Bi(Ri);e<n.length;e++){var r=n[e];do{r=r(true)}while(null!==r)}Cd=null,Sd=!1}catch(t){throw null!==Cd&&(Cd=Cd.slice(e+1)),_o(Do,Rd),t}finally{Bi(t),_d=!1}}return null}var Pd=[],jd=0,Dd=null,Id=0,Ld=[],Bd=0,Nd=null,Md=1,zd="";function Ud(){var e=zd;return(Md&~function(e){return 1<<Hd(e)-1}(Md)).toString(32)+e}function Fd(e,t){qd(),Pd[jd++]=Id,Pd[jd++]=Dd,Dd=e,Id=t}function Wd(e,t,n){qd(),Ld[Bd++]=Md,Ld[Bd++]=zd,Ld[Bd++]=Nd,Nd=e;var r=Md,o=zd,a=Hd(r)-1,i=r&~(1<<a),l=n+1,s=Hd(t)+a;if(s>30){var u=a-a%5,c=(i&(1<<u)-1).toString(32),d=i>>u,f=a-u,p=Hd(t)+f;Md=1<<p|(l<<f|d),zd=c+o}else{Md=1<<s|(l<<a|i),zd=o}}function $d(e){if(qd(),null!==e.return){Fd(e,1),Wd(e,1,0)}}function Hd(e){return 32-ca(e)}function Vd(e){for(;e===Dd;)Dd=Pd[--jd],Pd[jd]=null,Id=Pd[--jd],Pd[jd]=null;for(;e===Nd;)Nd=Ld[--Bd],Ld[Bd]=null,zd=Ld[--Bd],Ld[Bd]=null,Md=Ld[--Bd],Ld[Bd]=null}function qd(){bf()||l("Expected to be hydrating. This is a bug in React. Please file an issue.")}var Yd=null,Qd=null,Gd=!1,Kd=!1,Xd=null;function Zd(){Gd&&l("We should not be hydrating here. This is a bug in React. Please file a bug.")}function Jd(){Kd=!0}function ef(e){var t=e.stateNode.containerInfo;return Qd=Rc(t.firstChild),Yd=e,Gd=!0,Xd=null,Kd=!1,!0}function tf(e,t,n){return Qd=Rc(t.nextSibling),Yd=e,Gd=!0,Xd=null,Kd=!1,null!==n&&function(e,t){qd(),Ld[Bd++]=Md,Ld[Bd++]=zd,Ld[Bd++]=Nd,Md=t.id,zd=t.overflow,Nd=e}(e,n),!0}function nf(e,t){switch(e.tag){case f:!function(e,t){t.nodeType===yn?Yu(e,t):t.nodeType===bn||Qu(e,t)}(e.stateNode.containerInfo,t);break;case h:var n=(e.mode&ia)!==aa;!function(e,t,n,r,o){(o||!0!==t[ac])&&(r.nodeType===yn?Yu(n,r):r.nodeType===bn||Qu(n,r))}(e.type,e.memoizedProps,e.stateNode,t,n);break;case A:var r=e.memoizedState;null!==r.dehydrated&&function(e,t){var n=e.parentNode;null!==n&&(t.nodeType===yn?Yu(n,t):t.nodeType===bn||Qu(n,t))}(r.dehydrated,t)}}function rf(e,t){nf(e,t);var n,r=((n=lk(h,null,null,aa)).elementType="DELETED",n);r.stateNode=t,r.return=e;var o=e.deletions;null===o?(e.deletions=[r],e.flags|=$r):o.push(r)}function of(e,t){if(!Kd)switch(e.tag){case f:var n=e.stateNode.containerInfo;switch(t.tag){case h:var r=t.type;t.pendingProps;!function(e,t,n){Gu(e,t)}(n,r);break;case m:!function(e,t){Ku(e,t)}(n,t.pendingProps)}break;case h:e.type;var o=e.memoizedProps,a=e.stateNode;switch(t.tag){case h:var i=t.type;t.pendingProps;!function(e,t,n,r,o,a){(a||!0!==t[ac])&&Gu(n,r)}(0,o,a,i,0,(e.mode&ia)!==aa);break;case m:!function(e,t,n,r,o){(o||!0!==t[ac])&&Ku(n,r)}(0,o,a,t.pendingProps,(e.mode&ia)!==aa)}break;case A:var l=e.memoizedState.dehydrated;if(null!==l)switch(t.tag){case h:var s=t.type;t.pendingProps;!function(e,t,n){var r=e.parentNode;null!==r&&Gu(r,t)}(l,s);break;case m:!function(e,t){var n=e.parentNode;null!==n&&Ku(n,t)}(l,t.pendingProps)}break;default:return}}function af(e,t){t.flags=t.flags&~Xr|Fr,of(e,t)}function lf(e,t){switch(e.tag){case h:var n=e.type,r=(e.pendingProps,function(e,t,n){return e.nodeType!==yn||t.toLowerCase()!==e.nodeName.toLowerCase()?null:e}(t,n));return null!==r&&(e.stateNode=r,Yd=e,Qd=Rc(r.firstChild),!0);case m:var o=function(e,t){return""===t||e.nodeType!==gn?null:e}(t,e.pendingProps);return null!==o&&(e.stateNode=o,Yd=e,Qd=null,!0);case A:var a=function(e){return e.nodeType!==bn?null:e}(t);if(null!==a){var i={dehydrated:a,treeContext:(qd(),null!==Nd?{id:Md,overflow:zd}:null),retryLane:Ka};e.memoizedState=i;var l=function(e){var t=lk(_,null,null,aa);return t.stateNode=e,t}(a);return l.return=e,e.child=l,Yd=e,Qd=null,!0}return!1;default:return!1}}function sf(e){return(e.mode&ia)!==aa&&(e.flags&qr)===zr}function uf(e){throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.")}function cf(e){if(Gd){var t=Qd;if(!t)return sf(e)&&(of(Yd,e),uf()),af(Yd,e),Gd=!1,void(Yd=e);var n=t;if(!lf(e,t)){sf(e)&&(of(Yd,e),uf()),t=Pc(n);var r=Yd;if(!t||!lf(e,t))return af(Yd,e),Gd=!1,void(Yd=e);rf(r,n)}}}function df(e){var t=e.stateNode,n=e.memoizedProps,r=function(e,t,n,r){return Fc(n,e),n.mode,function(e,t,n){return e.nodeValue!==t}(e,t)}(t,n,e);if(r){var o=Yd;if(null!==o)switch(o.tag){case f:o.stateNode.containerInfo;!function(e,t,n,r){Uu(t.nodeValue,n,r,!0)}(0,t,n,(o.mode&ia)!==aa);break;case h:o.type;var a=o.memoizedProps;o.stateNode;!function(e,t,n,r,o,a){!0!==t[ac]&&Uu(r.nodeValue,o,a,!0)}(0,a,0,t,n,(o.mode&ia)!==aa)}}return r}function ff(e){var t=e.memoizedState,n=null!==t?t.dehydrated:null;if(!n)throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");!function(e,t){Fc(t,e)}(n,e)}function pf(e){var t=e.memoizedState,n=null!==t?t.dehydrated:null;if(!n)throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");return function(e){for(var t=e.nextSibling,n=0;t;){if(t.nodeType===bn){var r=t.data;if(r===lc){if(0===n)return Pc(t);n--}else r!==ic&&r!==uc&&r!==sc||n++}t=t.nextSibling}return null}(n)}function hf(e){for(var t=e.return;null!==t&&t.tag!==h&&t.tag!==f&&t.tag!==A;)t=t.return;Yd=t}function mf(e){if(e!==Yd)return!1;if(!Gd)return hf(e),Gd=!0,!1;if(e.tag!==f&&(e.tag!==h||"head"!==(n=e.type)&&"body"!==n&&!mc(e.type,e.memoizedProps))){var t=Qd;if(t)if(sf(e))vf(e),uf();else for(;t;)rf(e,t),t=Pc(t)}var n;return hf(e),Qd=e.tag===A?pf(e):Yd?Pc(e.stateNode):null,!0}function vf(e){for(var t=Qd;t;)nf(e,t),t=Pc(t)}function yf(){Yd=null,Qd=null,Gd=!1,Kd=!1}function gf(){null!==Xd&&(rw(Xd),Xd=null)}function bf(){return Gd}function wf(e){null===Xd?Xd=[e]:Xd.push(e)}var kf=o.ReactCurrentBatchConfig,Af=null;var Ef={recordUnsafeLifecycleWarnings:function(e,t){},flushPendingUnsafeLifecycleWarnings:function(){},recordLegacyContextWarning:function(e,t){},flushLegacyContextWarning:function(){},discardPendingWarnings:function(){}},xf=function(e){var t=[];return e.forEach((function(e){t.push(e)})),t.sort().join(", ")},Cf=[],Sf=[],_f=[],Tf=[],Of=[],Rf=[],Pf=new Set;Ef.recordUnsafeLifecycleWarnings=function(e,t){Pf.has(e.type)||("function"==typeof t.componentWillMount&&!0!==t.componentWillMount.__suppressDeprecationWarning&&Cf.push(e),e.mode&sa&&"function"==typeof t.UNSAFE_componentWillMount&&Sf.push(e),"function"==typeof t.componentWillReceiveProps&&!0!==t.componentWillReceiveProps.__suppressDeprecationWarning&&_f.push(e),e.mode&sa&&"function"==typeof t.UNSAFE_componentWillReceiveProps&&Tf.push(e),"function"==typeof t.componentWillUpdate&&!0!==t.componentWillUpdate.__suppressDeprecationWarning&&Of.push(e),e.mode&sa&&"function"==typeof t.UNSAFE_componentWillUpdate&&Rf.push(e))},Ef.flushPendingUnsafeLifecycleWarnings=function(){var e=new Set;Cf.length>0&&(Cf.forEach((function(t){e.add(mt(t)||"Component"),Pf.add(t.type)})),Cf=[]);var t=new Set;Sf.length>0&&(Sf.forEach((function(e){t.add(mt(e)||"Component"),Pf.add(e.type)})),Sf=[]);var n=new Set;_f.length>0&&(_f.forEach((function(e){n.add(mt(e)||"Component"),Pf.add(e.type)})),_f=[]);var r=new Set;Tf.length>0&&(Tf.forEach((function(e){r.add(mt(e)||"Component"),Pf.add(e.type)})),Tf=[]);var o=new Set;Of.length>0&&(Of.forEach((function(e){o.add(mt(e)||"Component"),Pf.add(e.type)})),Of=[]);var a=new Set;(Rf.length>0&&(Rf.forEach((function(e){a.add(mt(e)||"Component"),Pf.add(e.type)})),Rf=[]),t.size>0)&&l("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s",xf(t));r.size>0&&l("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s",xf(r));a.size>0&&l("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s",xf(a));e.size>0&&i("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",xf(e));n.size>0&&i("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",xf(n));o.size>0&&i("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",xf(o))};var jf=new Map,Df=new Set;function If(e,t){if(e&&e.defaultProps){var n=Ze({},t),r=e.defaultProps;for(var o in r)void 0===n[o]&&(n[o]=r[o]);return n}return t}Ef.recordLegacyContextWarning=function(e,t){var n=function(e){for(var t=null,n=e;null!==n;)n.mode&sa&&(t=n),n=n.return;return t}(e);if(null!==n){if(!Df.has(e.type)){var r=jf.get(n);(null!=e.type.contextTypes||null!=e.type.childContextTypes||null!==t&&"function"==typeof t.getChildContext)&&(void 0===r&&(r=[],jf.set(n,r)),r.push(e))}}else l("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.")},Ef.flushLegacyContextWarning=function(){jf.forEach((function(e,t){if(0!==e.length){var n=e[0],r=new Set;e.forEach((function(e){r.add(mt(e)||"Component"),Df.add(e.type)}));var o=xf(r);try{At(n),l("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context",o)}finally{kt()}}}))},Ef.discardPendingWarnings=function(){Cf=[],Sf=[],_f=[],Tf=[],Of=[],Rf=[],jf=new Map};var Lf,Bf=od(null);Lf={};var Nf=null,Mf=null,zf=null,Uf=!1;function Ff(){Nf=null,Mf=null,zf=null,Uf=!1}function Wf(){Uf=!0}function $f(){Uf=!1}function Hf(e,t,n){id(Bf,t._currentValue,e),t._currentValue=n,void 0!==t._currentRenderer&&null!==t._currentRenderer&&t._currentRenderer!==Lf&&l("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."),t._currentRenderer=Lf}function Vf(e,t){var n=Bf.current;ad(Bf,t),e._currentValue=n}function qf(e,t,n){for(var r=e;null!==r;){var o=r.alternate;if(mi(r.childLanes,t)?null===o||mi(o.childLanes,t)||(o.childLanes=vi(o.childLanes,t)):(r.childLanes=vi(r.childLanes,t),null!==o&&(o.childLanes=vi(o.childLanes,t))),r===n)break;r=r.return}r!==n&&l("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.")}function Yf(e,t,n){!function(e,t,n){var r=e.child;null!==r&&(r.return=e);for(;null!==r;){var o=void 0,a=r.dependencies;if(null!==a){o=r.child;for(var i=a.firstContext;null!==i;){if(i.context===t){if(r.tag===c){var l=di(n),s=dp(Za,l);s.tag=ip;var u=r.updateQueue;if(null===u);else{var d=u.shared,f=d.pending;null===f?s.next=s:(s.next=f.next,f.next=s),d.pending=s}}r.lanes=vi(r.lanes,n);var p=r.alternate;null!==p&&(p.lanes=vi(p.lanes,n)),qf(r.return,n,e),a.lanes=vi(a.lanes,n);break}i=i.next}}else if(r.tag===b)o=r.type===e.type?null:r.child;else if(r.tag===_){var h=r.return;if(null===h)throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");h.lanes=vi(h.lanes,n);var m=h.alternate;null!==m&&(m.lanes=vi(m.lanes,n)),qf(h,n,e),o=r.sibling}else o=r.child;if(null!==o)o.return=r;else for(o=r;null!==o;){if(o===e){o=null;break}var v=o.sibling;if(null!==v){v.return=o.return,o=v;break}o=o.return}r=o}}(e,t,n)}function Qf(e,t){Nf=e,Mf=null,zf=null;var n=e.dependencies;null!==n&&(null!==n.firstContext&&(hi(n.lanes,t)&&Sy(),n.firstContext=null))}function Gf(e){Uf&&l("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");var t=e._currentValue;if(zf===e);else{var n={context:e,memoizedValue:t,next:null};if(null===Mf){if(null===Nf)throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");Mf=n,Nf.dependencies={lanes:ha,firstContext:n}}else Mf=Mf.next=n}return t}var Kf=null;function Xf(e){null===Kf?Kf=[e]:Kf.push(e)}function Zf(e,t,n,r){var o=t.interleaved;return null===o?(n.next=n,Xf(t)):(n.next=o.next,o.next=n),t.interleaved=n,tp(e,r)}function Jf(e,t){return tp(e,t)}var ep=tp;function tp(e,t){e.lanes=vi(e.lanes,t);var n=e.alternate;null!==n&&(n.lanes=vi(n.lanes,t)),null===n&&(e.flags&(Fr|Xr))!==zr&&Bw(e);for(var r=e,o=e.return;null!==o;)o.childLanes=vi(o.childLanes,t),null!==(n=o.alternate)?n.childLanes=vi(n.childLanes,t):(o.flags&(Fr|Xr))!==zr&&Bw(e),r=o,o=o.return;return r.tag===f?r.stateNode:null}var np,rp,op=0,ap=1,ip=2,lp=3,sp=!1;function up(e){var t={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:ha},effects:null};e.updateQueue=t}function cp(e,t){var n=t.updateQueue,r=e.updateQueue;if(n===r){var o={baseState:r.baseState,firstBaseUpdate:r.firstBaseUpdate,lastBaseUpdate:r.lastBaseUpdate,shared:r.shared,effects:r.effects};t.updateQueue=o}}function dp(e,t){return{eventTime:e,lane:t,tag:op,payload:null,callback:null,next:null}}function fp(e,t,n){var r=e.updateQueue;if(null===r)return null;var o=r.shared;if(rp!==o||np||(l("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback."),np=!0),(ub&eb)!==Zg){var a=o.pending;return null===a?t.next=t:(t.next=a.next,a.next=t),o.pending=t,ep(e,n)}return function(e,t,n,r){var o=t.interleaved;return null===o?(n.next=n,Xf(t)):(n.next=o.next,o.next=n),t.interleaved=n,tp(e,r)}(e,o,t,n)}function pp(e,t,n){var r=t.updateQueue;if(null!==r){var o=r.shared;if(si(n)){var a=o.lanes,i=vi(a=gi(a,e.pendingLanes),n);o.lanes=i,Ai(e,i)}}}function hp(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r){var o=r.updateQueue;if(n===o){var a=null,i=null,l=n.firstBaseUpdate;if(null!==l){var s=l;do{var u={eventTime:s.eventTime,lane:s.lane,tag:s.tag,payload:s.payload,callback:s.callback,next:null};null===i?a=i=u:(i.next=u,i=u),s=s.next}while(null!==s);null===i?a=i=t:(i.next=t,i=t)}else a=i=t;return n={baseState:o.baseState,firstBaseUpdate:a,lastBaseUpdate:i,shared:o.shared,effects:o.effects},void(e.updateQueue=n)}}var c=n.lastBaseUpdate;null===c?n.firstBaseUpdate=t:c.next=t,n.lastBaseUpdate=t}function mp(e,t,n,r,o,a){switch(n.tag){case ap:var i=n.payload;if("function"==typeof i){Wf();var l=i.call(a,r,o);if(e.mode&sa){Vo(!0);try{i.call(a,r,o)}finally{Vo(!1)}}return $f(),l}return i;case lp:e.flags=e.flags&~ro|qr;case op:var s,u=n.payload;if("function"==typeof u){if(Wf(),s=u.call(a,r,o),e.mode&sa){Vo(!0);try{u.call(a,r,o)}finally{Vo(!1)}}$f()}else s=u;return null==s?r:Ze({},r,s);case ip:return sp=!0,r}return r}function vp(e,t,n,r){var o=e.updateQueue;sp=!1,rp=o.shared;var a=o.firstBaseUpdate,i=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var s=l,u=s.next;s.next=null,null===i?a=u:i.next=u,i=s;var c=e.alternate;if(null!==c){var d=c.updateQueue,f=d.lastBaseUpdate;f!==i&&(null===f?d.firstBaseUpdate=u:f.next=u,d.lastBaseUpdate=s)}}if(null!==a){for(var p=o.baseState,h=ha,m=null,v=null,y=null,g=a;;){var b=g.lane,w=g.eventTime;if(mi(r,b)){if(null!==y){var k={eventTime:w,lane:ma,tag:g.tag,payload:g.payload,callback:g.callback,next:null};y=y.next=k}if(p=mp(e,0,g,p,t,n),null!==g.callback&&g.lane!==ma){e.flags|=Vr;var A=o.effects;null===A?o.effects=[g]:A.push(g)}}else{var E={eventTime:w,lane:b,tag:g.tag,payload:g.payload,callback:g.callback,next:null};null===y?(v=y=E,m=p):y=y.next=E,h=vi(h,b)}if(null===(g=g.next)){if(null===(l=o.shared.pending))break;var x=l,C=x.next;x.next=null,g=C,o.lastBaseUpdate=x,o.shared.pending=null}}null===y&&(m=p),o.baseState=m,o.firstBaseUpdate=v,o.lastBaseUpdate=y;var S=o.shared.interleaved;if(null!==S){var _=S;do{h=vi(h,_.lane),_=_.next}while(_!==S)}else null===a&&(o.shared.lanes=ha);mw(h),e.lanes=h,e.memoizedState=p}rp=null}function yp(e,t){if("function"!=typeof e)throw new Error("Invalid argument passed as callback. Expected a function. Instead received: "+e);e.call(t)}function gp(){sp=!1}function bp(){return sp}function wp(e,t,n){var r=t.effects;if(t.effects=null,null!==r)for(var o=0;o<r.length;o++){var a=r[o],i=a.callback;null!==i&&(a.callback=null,yp(i,n))}}np=!1,rp=null;var kp,Ap,Ep,xp,Cp,Sp,_p,Tp,Op,Rp,Pp={},jp=(new e.Component).refs;kp=new Set,Ap=new Set,Ep=new Set,xp=new Set,Tp=new Set,Cp=new Set,Op=new Set,Rp=new Set;var Dp=new Set;function Ip(e,t,n,r){var o=e.memoizedState,a=n(r,o);if(e.mode&sa){Vo(!0);try{a=n(r,o)}finally{Vo(!1)}}Sp(t,a);var i=null==a?o:Ze({},o,a);(e.memoizedState=i,e.lanes===ha)&&(e.updateQueue.baseState=i)}_p=function(e,t){if(null!==e&&"function"!=typeof e){var n=t+"_"+e;Dp.has(n)||(Dp.add(n),l("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.",t,e))}},Sp=function(e,t){if(void 0===t){var n=pt(e)||"Component";Cp.has(n)||(Cp.add(n),l("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.",n))}},Object.defineProperty(Pp,"_processChildContext",{enumerable:!1,value:function(){throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).")}}),Object.freeze(Pp);var Lp,Bp,Np,Mp,zp,Up={isMounted:function(e){var t=yo.current;if(null!==t&&t.tag===c){var n=t,r=n.stateNode;r._warnedAboutRefsInRender||l("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.",mt(n)||"A component"),r._warnedAboutRefsInRender=!0}var o=Mr(e);return!!o&&go(o)===o},enqueueSetState:function(e,t,n){var r=Mr(e),o=Kb(),a=Xb(r),i=dp(o,a);i.payload=t,null!=n&&(_p(n,"setState"),i.callback=n);var l=fp(r,i,a);null!==l&&(Jb(l,r,a,o),pp(l,r,a)),oa(r,a)},enqueueReplaceState:function(e,t,n){var r=Mr(e),o=Kb(),a=Xb(r),i=dp(o,a);i.tag=ap,i.payload=t,null!=n&&(_p(n,"replaceState"),i.callback=n);var l=fp(r,i,a);null!==l&&(Jb(l,r,a,o),pp(l,r,a)),oa(r,a)},enqueueForceUpdate:function(e,t){var n=Mr(e),r=Kb(),o=Xb(n),a=dp(r,o);a.tag=ip,null!=t&&(_p(t,"forceUpdate"),a.callback=t);var i=fp(n,a,o);null!==i&&(Jb(i,n,o,r),pp(i,n,o)),function(e,t){null!==Wo&&"function"==typeof Wo.markForceUpdateScheduled&&Wo.markForceUpdateScheduled(e,t)}(n,o)}};function Fp(e,t,n,r,o,a,i){var s=e.stateNode;if("function"==typeof s.shouldComponentUpdate){var u=s.shouldComponentUpdate(r,a,i);if(e.mode&sa){Vo(!0);try{u=s.shouldComponentUpdate(r,a,i)}finally{Vo(!1)}}return void 0===u&&l("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.",pt(t)||"Component"),u}return!t.prototype||!t.prototype.isPureReactComponent||(!_s(n,r)||!_s(o,a))}function Wp(e,t){var n;t.updater=Up,e.stateNode=t,n=e,t._reactInternals=n,t._reactInternalInstance=Pp}function $p(e,t,n){var r=!1,o=ld,a=ld,i=t.contextType;if("contextType"in t&&(!(null===i||void 0!==i&&i.$$typeof===Le&&void 0===i._context)&&!Rp.has(t))){Rp.add(t);var s="";s=void 0===i?" However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.":"object"!=typeof i?" However, it is set to a "+typeof i+".":i.$$typeof===Ie?" Did you accidentally pass the Context.Provider instead?":void 0!==i._context?" Did you accidentally pass the Context.Consumer instead?":" However, it is set to an object with keys {"+Object.keys(i).join(", ")+"}.",l("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s",pt(t)||"Component",s)}if("object"==typeof i&&null!==i)a=Gf(i);else{o=dd(0,t,!0);var u=t.contextTypes;a=(r=null!=u)?pd(e,o):ld}var c=new t(n,a);if(e.mode&sa){Vo(!0);try{c=new t(n,a)}finally{Vo(!1)}}var d=e.memoizedState=null!==c.state&&void 0!==c.state?c.state:null;if(Wp(e,c),"function"==typeof t.getDerivedStateFromProps&&null===d){var f=pt(t)||"Component";Ap.has(f)||(Ap.add(f),l("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.",f,null===c.state?"null":"undefined",f))}if("function"==typeof t.getDerivedStateFromProps||"function"==typeof c.getSnapshotBeforeUpdate){var p=null,h=null,m=null;if("function"==typeof c.componentWillMount&&!0!==c.componentWillMount.__suppressDeprecationWarning?p="componentWillMount":"function"==typeof c.UNSAFE_componentWillMount&&(p="UNSAFE_componentWillMount"),"function"==typeof c.componentWillReceiveProps&&!0!==c.componentWillReceiveProps.__suppressDeprecationWarning?h="componentWillReceiveProps":"function"==typeof c.UNSAFE_componentWillReceiveProps&&(h="UNSAFE_componentWillReceiveProps"),"function"==typeof c.componentWillUpdate&&!0!==c.componentWillUpdate.__suppressDeprecationWarning?m="componentWillUpdate":"function"==typeof c.UNSAFE_componentWillUpdate&&(m="UNSAFE_componentWillUpdate"),null!==p||null!==h||null!==m){var v=pt(t)||"Component",y="function"==typeof t.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";xp.has(v)||(xp.add(v),l("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles",v,y,null!==p?"\n  "+p:"",null!==h?"\n  "+h:"",null!==m?"\n  "+m:""))}}return r&&fd(e,o,a),c}function Hp(e,t,n,r){var o=t.state;if("function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==o){var a=mt(e)||"Component";kp.has(a)||(kp.add(a),l("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",a)),Up.enqueueReplaceState(t,t.state,null)}}function Vp(e,t,n,r){!function(e,t,n){var r=e.stateNode,o=pt(t)||"Component";r.render||(t.prototype&&"function"==typeof t.prototype.render?l("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?",o):l("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.",o)),!r.getInitialState||r.getInitialState.isReactClassApproved||r.state||l("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?",o),r.getDefaultProps&&!r.getDefaultProps.isReactClassApproved&&l("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.",o),r.propTypes&&l("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.",o),r.contextType&&l("contextType was defined as an instance property on %s. Use a static property to define contextType instead.",o),r.contextTypes&&l("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.",o),t.contextType&&t.contextTypes&&!Op.has(t)&&(Op.add(t),l("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.",o)),"function"==typeof r.componentShouldUpdate&&l("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",o),t.prototype&&t.prototype.isPureReactComponent&&void 0!==r.shouldComponentUpdate&&l("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.",pt(t)||"A pure component"),"function"==typeof r.componentDidUnmount&&l("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?",o),"function"==typeof r.componentDidReceiveProps&&l("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().",o),"function"==typeof r.componentWillRecieveProps&&l("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?",o),"function"==typeof r.UNSAFE_componentWillRecieveProps&&l("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?",o);var a=r.props!==n;void 0!==r.props&&a&&l("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.",o,o),r.defaultProps&&l("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.",o,o),"function"!=typeof r.getSnapshotBeforeUpdate||"function"==typeof r.componentDidUpdate||Ep.has(t)||(Ep.add(t),l("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.",pt(t))),"function"==typeof r.getDerivedStateFromProps&&l("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.",o),"function"==typeof r.getDerivedStateFromError&&l("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.",o),"function"==typeof t.getSnapshotBeforeUpdate&&l("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.",o);var i=r.state;i&&("object"!=typeof i||Xt(i))&&l("%s.state: must be set to an object or null",o),"function"==typeof r.getChildContext&&"object"!=typeof t.childContextTypes&&l("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().",o)}(e,t,n);var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=jp,up(e);var a=t.contextType;if("object"==typeof a&&null!==a)o.context=Gf(a);else{var i=dd(0,t,!0);o.context=pd(e,i)}if(o.state===n){var s=pt(t)||"Component";Tp.has(s)||(Tp.add(s),l("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.",s))}e.mode&sa&&Ef.recordLegacyContextWarning(e,o),Ef.recordUnsafeLifecycleWarnings(e,o),o.state=e.memoizedState;var u=t.getDerivedStateFromProps;if("function"==typeof u&&(Ip(e,t,u,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(!function(e,t){var n=t.state;"function"==typeof t.componentWillMount&&t.componentWillMount(),"function"==typeof t.UNSAFE_componentWillMount&&t.UNSAFE_componentWillMount(),n!==t.state&&(l("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",mt(e)||"Component"),Up.enqueueReplaceState(t,t.state,null))}(e,o),vp(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount){var c=Wr;c|=lo,(e.mode&ua)!==aa&&(c|=uo),e.flags|=c}}var qp=function(e,t){};function Yp(e,t,n){var r=n.ref;if(null!==r&&"function"!=typeof r&&"object"!=typeof r){if((e.mode&sa||F)&&(!n._owner||!n._self||n._owner.stateNode===n._self)){var o=mt(e)||"Component";Np[o]||(l('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref',r),Np[o]=!0)}if(n._owner){var a,i=n._owner;if(i){var s=i;if(s.tag!==c)throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");a=s.stateNode}if(!a)throw new Error("Missing owner for string ref "+r+". This error is likely caused by a bug in React. Please file an issue.");var u=a;!function(e,t){if(J(e))l("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.",t,Z(e)),ee(e)}(r,"ref");var d=""+r;if(null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===d)return t.ref;var f=function(e){var t=u.refs;t===jp&&(t=u.refs={}),null===e?delete t[d]:t[d]=e};return f._stringRef=d,f}if("string"!=typeof r)throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");if(!n._owner)throw new Error("Element ref was specified as a string ("+r+") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.")}return r}function Qp(e,t){var n=Object.prototype.toString.call(t);throw new Error("Objects are not valid as a React child (found: "+("[object Object]"===n?"object with keys {"+Object.keys(t).join(", ")+"}":n)+"). If you meant to render a collection of children, use an array instead.")}function Gp(e){var t=mt(e)||"Component";zp[t]||(zp[t]=!0,l("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it."))}function Kp(e){var t=e._payload;return(0,e._init)(t)}function Xp(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=$r):r.push(n)}}function n(n,r){if(!e)return null;for(var o=r;null!==o;)t(n,o),o=o.sibling;return null}function r(e,t){for(var n=new Map,r=t;null!==r;)null!==r.key?n.set(r.key,r):n.set(r.index,r),r=r.sibling;return n}function o(e,t){var n=uk(e,t);return n.index=0,n.sibling=null,n}function a(t,n,r){if(t.index=r,!e)return t.flags|=ao,n;var o=t.alternate;if(null!==o){var a=o.index;return a<n?(t.flags|=Fr,n):a}return t.flags|=Fr,n}function i(t){return e&&null===t.alternate&&(t.flags|=Fr),t}function s(e,t,n,r){if(null===t||t.tag!==m){var a=mk(n,e.mode,r);return a.return=e,a}var i=o(t,n);return i.return=e,i}function u(e,t,n,r){var a=n.type;if(a===Pe)return d(e,t,n.props.children,r,n.key);if(null!==t&&(t.elementType===a||Xw(t,n)||"object"==typeof a&&null!==a&&a.$$typeof===Ue&&Kp(a)===t.type)){var i=o(t,n.props);return i.ref=Yp(e,t,n),i.return=e,i._debugSource=n._source,i._debugOwner=n._owner,i}var l=fk(n,e.mode,r);return l.ref=Yp(e,t,n),l.return=e,l}function c(e,t,n,r){if(null===t||t.tag!==p||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation){var a=vk(n,e.mode,r);return a.return=e,a}var i=o(t,n.children||[]);return i.return=e,i}function d(e,t,n,r,a){if(null===t||t.tag!==v){var i=pk(n,e.mode,r,a);return i.return=e,i}var l=o(t,n);return l.return=e,l}function f(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t){var r=mk(""+t,e.mode,n);return r.return=e,r}if("object"==typeof t&&null!==t){switch(t.$$typeof){case Oe:var o=fk(t,e.mode,n);return o.ref=Yp(e,null,t),o.return=e,o;case Re:var a=vk(t,e.mode,n);return a.return=e,a;case Ue:var i=t._payload;return f(e,(0,t._init)(i),n)}if(Xt(t)||He(t)){var l=pk(t,e.mode,n,null);return l.return=e,l}Qp(0,t)}return"function"==typeof t&&Gp(e),null}function h(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==o?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Oe:return n.key===o?u(e,t,n,r):null;case Re:return n.key===o?c(e,t,n,r):null;case Ue:var a=n._payload;return h(e,t,(0,n._init)(a),r)}if(Xt(n)||He(n))return null!==o?null:d(e,t,n,r,null);Qp(0,n)}return"function"==typeof n&&Gp(e),null}function y(e,t,n,r,o){if("string"==typeof r&&""!==r||"number"==typeof r)return s(t,e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Oe:return u(t,e.get(null===r.key?n:r.key)||null,r,o);case Re:return c(t,e.get(null===r.key?n:r.key)||null,r,o);case Ue:var a=r._payload;return y(e,t,n,(0,r._init)(a),o)}if(Xt(r)||He(r))return d(t,e.get(n)||null,r,o,null);Qp(0,r)}return"function"==typeof r&&Gp(t),null}function g(e,t,n){if("object"!=typeof e||null===e)return t;switch(e.$$typeof){case Oe:case Re:qp(e,n);var r=e.key;if("string"!=typeof r)break;if(null===t){(t=new Set).add(r);break}if(!t.has(r)){t.add(r);break}l("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.",r);break;case Ue:var o=e._payload;g((0,e._init)(o),t,n)}return t}return function s(u,c,d,b){if("object"==typeof d&&null!==d&&d.type===Pe&&null===d.key&&(d=d.props.children),"object"==typeof d&&null!==d){switch(d.$$typeof){case Oe:return i(function(e,r,a,i){for(var l=a.key,s=r;null!==s;){if(s.key===l){var u=a.type;if(u===Pe){if(s.tag===v){n(e,s.sibling);var c=o(s,a.props.children);return c.return=e,c._debugSource=a._source,c._debugOwner=a._owner,c}}else if(s.elementType===u||Xw(s,a)||"object"==typeof u&&null!==u&&u.$$typeof===Ue&&Kp(u)===s.type){n(e,s.sibling);var d=o(s,a.props);return d.ref=Yp(e,s,a),d.return=e,d._debugSource=a._source,d._debugOwner=a._owner,d}n(e,s);break}t(e,s),s=s.sibling}if(a.type===Pe){var f=pk(a.props.children,e.mode,i,a.key);return f.return=e,f}var p=fk(a,e.mode,i);return p.ref=Yp(e,r,a),p.return=e,p}(u,c,d,b));case Re:return i(function(e,r,a,i){for(var l=a.key,s=r;null!==s;){if(s.key===l){if(s.tag===p&&s.stateNode.containerInfo===a.containerInfo&&s.stateNode.implementation===a.implementation){n(e,s.sibling);var u=o(s,a.children||[]);return u.return=e,u}n(e,s);break}t(e,s),s=s.sibling}var c=vk(a,e.mode,i);return c.return=e,c}(u,c,d,b));case Ue:var w=d._payload;return s(u,c,(0,d._init)(w),b)}if(Xt(d))return function(o,i,l,s){for(var u=null,c=0;c<l.length;c++)u=g(l[c],u,o);for(var d=null,p=null,m=i,v=0,b=0,w=null;null!==m&&b<l.length;b++){m.index>b?(w=m,m=null):w=m.sibling;var k=h(o,m,l[b],s);if(null===k){null===m&&(m=w);break}e&&m&&null===k.alternate&&t(o,m),v=a(k,v,b),null===p?d=k:p.sibling=k,p=k,m=w}if(b===l.length)return n(o,m),bf()&&Fd(o,b),d;if(null===m){for(;b<l.length;b++){var A=f(o,l[b],s);null!==A&&(v=a(A,v,b),null===p?d=A:p.sibling=A,p=A)}return bf()&&Fd(o,b),d}for(var E=r(0,m);b<l.length;b++){var x=y(E,o,b,l[b],s);null!==x&&(e&&null!==x.alternate&&E.delete(null===x.key?b:x.key),v=a(x,v,b),null===p?d=x:p.sibling=x,p=x)}return e&&E.forEach((function(e){return t(o,e)})),bf()&&Fd(o,b),d}(u,c,d,b);if(He(d))return function(o,i,s,u){var c=He(s);if("function"!=typeof c)throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");"function"==typeof Symbol&&"Generator"===s[Symbol.toStringTag]&&(Bp||l("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers."),Bp=!0),s.entries===c&&(Lp||l("Using Maps as children is not supported. Use an array of keyed ReactElements instead."),Lp=!0);var d=c.call(s);if(d)for(var p=null,m=d.next();!m.done;m=d.next())p=g(m.value,p,o);var v=c.call(s);if(null==v)throw new Error("An iterable object provided no iterator.");for(var b=null,w=null,k=i,A=0,E=0,x=null,C=v.next();null!==k&&!C.done;E++,C=v.next()){k.index>E?(x=k,k=null):x=k.sibling;var S=h(o,k,C.value,u);if(null===S){null===k&&(k=x);break}e&&k&&null===S.alternate&&t(o,k),A=a(S,A,E),null===w?b=S:w.sibling=S,w=S,k=x}if(C.done)return n(o,k),bf()&&Fd(o,E),b;if(null===k){for(;!C.done;E++,C=v.next()){var _=f(o,C.value,u);null!==_&&(A=a(_,A,E),null===w?b=_:w.sibling=_,w=_)}return bf()&&Fd(o,E),b}for(var T=r(0,k);!C.done;E++,C=v.next()){var O=y(T,o,E,C.value,u);null!==O&&(e&&null!==O.alternate&&T.delete(null===O.key?E:O.key),A=a(O,A,E),null===w?b=O:w.sibling=O,w=O)}return e&&T.forEach((function(e){return t(o,e)})),bf()&&Fd(o,E),b}(u,c,d,b);Qp(0,d)}return"string"==typeof d&&""!==d||"number"==typeof d?i(function(e,t,r,a){if(null!==t&&t.tag===m){n(e,t.sibling);var i=o(t,r);return i.return=e,i}n(e,t);var l=mk(r,e.mode,a);return l.return=e,l}(u,c,""+d,b)):("function"==typeof d&&Gp(u),n(u,c))}}Lp=!1,Bp=!1,Np={},Mp={},zp={},qp=function(e,t){if(null!==e&&"object"==typeof e&&e._store&&!e._store.validated&&null==e.key){if("object"!=typeof e._store)throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");e._store.validated=!0;var n=mt(t)||"Component";Mp[n]||(Mp[n]=!0,l('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.'))}};var Zp=Xp(!0),Jp=Xp(!1);function eh(e,t){for(var n=e.child;null!==n;)ck(n,t),n=n.sibling}var th={},nh=od(th),rh=od(th),oh=od(th);function ah(e){if(e===th)throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");return e}function ih(){return ah(oh.current)}function lh(e,t){id(oh,t,e),id(rh,e,e),id(nh,th,e);var n=function(e){var t,n,r=e.nodeType;switch(r){case wn:case kn:t=r===wn?"#document":"#fragment";var o=e.documentElement;n=o?o.namespaceURI:pn(null,"");break;default:var a=r===bn?e.parentNode:e;n=pn(a.namespaceURI||null,t=a.tagName)}var i=t.toLowerCase();return{namespace:n,ancestorInfo:Zu(null,i)}}(t);ad(nh,e),id(nh,n,e)}function sh(e){ad(nh,e),ad(rh,e),ad(oh,e)}function uh(){return ah(nh.current)}function ch(e){ah(oh.current);var t,n,r,o=ah(nh.current),a=(t=o,n=e.type,{namespace:pn((r=t).namespace,n),ancestorInfo:Zu(r.ancestorInfo,n)});o!==a&&(id(rh,e,e),id(nh,a,e))}function dh(e){rh.current===e&&(ad(nh,e),ad(rh,e))}var fh=1,ph=1,hh=2,mh=od(0);function vh(e,t){return 0!=(e&t)}function yh(e){return e&fh}function gh(e,t){return e&fh|t}function bh(e,t){id(mh,t,e)}function wh(e){ad(mh,e)}function kh(e,t){var n=e.memoizedState;if(null!==n)return null!==n.dehydrated;e.memoizedProps;return!0}function Ah(e){for(var t=e;null!==t;){if(t.tag===A){var n=t.memoizedState;if(null!==n){var r=n.dehydrated;if(null===r||Tc(r)||Oc(r))return t}}else if(t.tag===T&&void 0!==t.memoizedProps.revealOrder){if((t.flags&qr)!==zr)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)return null;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Eh=0,xh=1,Ch=2,Sh=4,_h=8,Th=[];function Oh(){for(var e=0;e<Th.length;e++){Th[e]._workInProgressVersionPrimary=null}Th.length=0}function Rh(e,t){var n=(0,t._getVersion)(t._source);null==e.mutableSourceEagerHydrationData?e.mutableSourceEagerHydrationData=[t,n]:e.mutableSourceEagerHydrationData.push(t,n)}var Ph,jh,Dh=o.ReactCurrentDispatcher,Ih=o.ReactCurrentBatchConfig;Ph=new Set;var Lh=ha,Bh=null,Nh=null,Mh=null,zh=!1,Uh=!1,Fh=0,Wh=0,$h=25,Hh=null,Vh=null,qh=-1,Yh=!1;function Qh(){var e=Hh;null===Vh?Vh=[e]:Vh.push(e)}function Gh(){var e=Hh;null!==Vh&&(qh++,Vh[qh]!==e&&function(e){var t=mt(Bh);if(!Ph.has(t)&&(Ph.add(t),null!==Vh)){for(var n="",r=30,o=0;o<=qh;o++){for(var a=Vh[o],i=o===qh?e:a,s=o+1+". "+a;s.length<r;)s+=" ";n+=s+=i+"\n"}l("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",t,n)}}(e))}function Kh(e){null==e||Xt(e)||l("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.",Hh,typeof e)}function Xh(){throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.")}function Zh(e,t){if(Yh)return!1;if(null===t)return l("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.",Hh),!1;e.length!==t.length&&l("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s",Hh,"["+t.join(", ")+"]","["+e.join(", ")+"]");for(var n=0;n<t.length&&n<e.length;n++)if(!Ss(e[n],t[n]))return!1;return!0}function Jh(e,t,n,r,o,a){Lh=a,Bh=t,Vh=null!==e?e._debugHookTypes:null,qh=-1,Yh=null!==e&&e.type!==t.type,t.memoizedState=null,t.updateQueue=null,t.lanes=ha,null!==e&&null!==e.memoizedState?Dh.current=av:Dh.current=null!==Vh?ov:rv;var i=n(r,o);if(Uh){var s=0;do{if(Uh=!1,Fh=0,s>=$h)throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");s+=1,Yh=!1,Nh=null,Mh=null,t.updateQueue=null,qh=-1,Dh.current=iv,i=n(r,o)}while(Uh)}Dh.current=nv,t._debugHookTypes=Vh;var u=null!==Nh&&null!==Nh.next;if(Lh=ha,Bh=null,Nh=null,Mh=null,Hh=null,Vh=null,qh=-1,null!==e&&(e.flags&vo)!=(t.flags&vo)&&(e.mode&ia)!==aa&&l("Internal React error: Expected static flag was missing. Please notify the React team."),zh=!1,u)throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");return i}function em(){var e=0!==Fh;return Fh=0,e}function tm(e,t,n){t.updateQueue=e.updateQueue,(t.mode&ua)!==aa?t.flags&=~(co|uo|Kr|Wr):t.flags&=~(Kr|Wr),e.lanes=yi(e.lanes,n)}function nm(){if(Dh.current=nv,zh){for(var e=Bh.memoizedState;null!==e;){var t=e.queue;null!==t&&(t.pending=null),e=e.next}zh=!1}Lh=ha,Bh=null,Nh=null,Mh=null,Vh=null,qh=-1,Hh=null,Ym=!1,Uh=!1,Fh=0}function rm(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Mh?Bh.memoizedState=Mh=e:Mh=Mh.next=e,Mh}function om(){var e,t;if(null===Nh){var n=Bh.alternate;e=null!==n?n.memoizedState:null}else e=Nh.next;if(null!==(t=null===Mh?Bh.memoizedState:Mh.next))t=(Mh=t).next,Nh=e;else{if(null===e)throw new Error("Rendered more hooks than during the previous render.");var r={memoizedState:(Nh=e).memoizedState,baseState:Nh.baseState,baseQueue:Nh.baseQueue,queue:Nh.queue,next:null};null===Mh?Bh.memoizedState=Mh=r:Mh=Mh.next=r}return Mh}function am(e,t){return"function"==typeof t?t(e):t}function im(e,t,n){var r,o=rm();r=void 0!==n?n(t):t,o.memoizedState=o.baseState=r;var a={pending:null,interleaved:null,lanes:ha,dispatch:null,lastRenderedReducer:e,lastRenderedState:r};o.queue=a;var i=a.dispatch=Km.bind(null,Bh,a);return[o.memoizedState,i]}function lm(e,t,n){var r=om(),o=r.queue;if(null===o)throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");o.lastRenderedReducer=e;var a=Nh,i=a.baseQueue,s=o.pending;if(null!==s){if(null!==i){var u=i.next,c=s.next;i.next=c,s.next=u}a.baseQueue!==i&&l("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React."),a.baseQueue=i=s,o.pending=null}if(null!==i){var d=i.next,f=a.baseState,p=null,h=null,m=null,v=d;do{var y=v.lane;if(mi(Lh,y)){if(null!==m){var g={lane:ma,action:v.action,hasEagerState:v.hasEagerState,eagerState:v.eagerState,next:null};m=m.next=g}if(v.hasEagerState)f=v.eagerState;else f=e(f,v.action)}else{var b={lane:y,action:v.action,hasEagerState:v.hasEagerState,eagerState:v.eagerState,next:null};null===m?(h=m=b,p=f):m=m.next=b,Bh.lanes=vi(Bh.lanes,y),mw(y)}v=v.next}while(null!==v&&v!==d);null===m?p=f:m.next=h,Ss(f,r.memoizedState)||Sy(),r.memoizedState=f,r.baseState=p,r.baseQueue=m,o.lastRenderedState=f}var w=o.interleaved;if(null!==w){var k=w;do{var A=k.lane;Bh.lanes=vi(Bh.lanes,A),mw(A),k=k.next}while(k!==w)}else null===i&&(o.lanes=ha);var E=o.dispatch;return[r.memoizedState,E]}function sm(e,t,n){var r=om(),o=r.queue;if(null===o)throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");o.lastRenderedReducer=e;var a=o.dispatch,i=o.pending,l=r.memoizedState;if(null!==i){o.pending=null;var s=i.next,u=s;do{l=e(l,u.action),u=u.next}while(u!==s);Ss(l,r.memoizedState)||Sy(),r.memoizedState=l,null===r.baseQueue&&(r.baseState=l),o.lastRenderedState=l}return[l,a]}function um(e,t,n){var r,o=Bh,a=rm();if(bf()){if(void 0===n)throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");r=n(),jh||r!==n()&&(l("The result of getServerSnapshot should be cached to avoid an infinite loop"),jh=!0)}else{if(r=t(),!jh){var i=t();Ss(r,i)||(l("The result of getSnapshot should be cached to avoid an infinite loop"),jh=!0)}var s=Gb();if(null===s)throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");li(0,Lh)||dm(o,t,r)}a.memoizedState=r;var u={value:r,getSnapshot:t};return a.queue=u,xm(pm.bind(null,o,u,e),[e]),o.flags|=Kr,bm(xh|_h,fm.bind(null,o,u,r,t),void 0,null),r}function cm(e,t,n){var r=Bh,o=om(),a=t();if(!jh){var i=t();Ss(a,i)||(l("The result of getSnapshot should be cached to avoid an infinite loop"),jh=!0)}var s=o.memoizedState,u=!Ss(s,a);u&&(o.memoizedState=a,Sy());var c=o.queue;if(Cm(pm.bind(null,r,c,e),[e]),c.getSnapshot!==t||u||null!==Mh&&Mh.memoizedState.tag&xh){r.flags|=Kr,bm(xh|_h,fm.bind(null,r,c,a,t),void 0,null);var d=Gb();if(null===d)throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");li(0,Lh)||dm(r,t,a)}return a}function dm(e,t,n){e.flags|=Jr;var r={getSnapshot:t,value:n},o=Bh.updateQueue;if(null===o)o={lastEffect:null,stores:null},Bh.updateQueue=o,o.stores=[r];else{var a=o.stores;null===a?o.stores=[r]:a.push(r)}}function fm(e,t,n,r){t.value=n,t.getSnapshot=r,hm(t)&&mm(e)}function pm(e,t,n){return n((function(){hm(t)&&mm(e)}))}function hm(e){var t=e.getSnapshot,n=e.value;try{var r=t();return!Ss(n,r)}catch(e){return!0}}function mm(e){var t=Jf(e,va);null!==t&&Jb(t,e,va,Za)}function vm(e){var t=rm();"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e;var n={pending:null,interleaved:null,lanes:ha,dispatch:null,lastRenderedReducer:am,lastRenderedState:e};t.queue=n;var r=n.dispatch=Xm.bind(null,Bh,n);return[t.memoizedState,r]}function ym(e){return lm(am)}function gm(e){return sm(am)}function bm(e,t,n,r){var o={tag:e,create:t,destroy:n,deps:r,next:null},a=Bh.updateQueue;if(null===a)a={lastEffect:null,stores:null},Bh.updateQueue=a,a.lastEffect=o.next=o;else{var i=a.lastEffect;if(null===i)a.lastEffect=o.next=o;else{var l=i.next;i.next=o,o.next=l,a.lastEffect=o}}return o}function wm(e){var t={current:e};return rm().memoizedState=t,t}function km(e){return om().memoizedState}function Am(e,t,n,r){var o=rm(),a=void 0===r?null:r;Bh.flags|=e,o.memoizedState=bm(xh|t,n,void 0,a)}function Em(e,t,n,r){var o=om(),a=void 0===r?null:r,i=void 0;if(null!==Nh){var l=Nh.memoizedState;if(i=l.destroy,null!==a)if(Zh(a,l.deps))return void(o.memoizedState=bm(t,n,i,a))}Bh.flags|=e,o.memoizedState=bm(xh|t,n,i,a)}function xm(e,t){return(Bh.mode&ua)!==aa?Am(co|Kr|so,_h,e,t):Am(Kr|so,_h,e,t)}function Cm(e,t){return Em(Kr,_h,e,t)}function Sm(e,t){return Am(Wr,Ch,e,t)}function _m(e,t){return Em(Wr,Ch,e,t)}function Tm(e,t){var n=Wr;return n|=lo,(Bh.mode&ua)!==aa&&(n|=uo),Am(n,Sh,e,t)}function Om(e,t){return Em(Wr,Sh,e,t)}function Rm(e,t){if("function"==typeof t){var n=t,r=e();return n(r),function(){n(null)}}if(null!=t){var o=t;o.hasOwnProperty("current")||l("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.","an object with keys {"+Object.keys(o).join(", ")+"}");var a=e();return o.current=a,function(){o.current=null}}}function Pm(e,t,n){"function"!=typeof t&&l("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.",null!==t?typeof t:"null");var r=null!=n?n.concat([e]):null,o=Wr;return o|=lo,(Bh.mode&ua)!==aa&&(o|=uo),Am(o,Sh,Rm.bind(null,t,e),r)}function jm(e,t,n){"function"!=typeof t&&l("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.",null!==t?typeof t:"null");var r=null!=n?n.concat([e]):null;return Em(Wr,Sh,Rm.bind(null,t,e),r)}function Dm(e,t){}var Im=Dm;function Lm(e,t){var n=void 0===t?null:t;return rm().memoizedState=[e,n],e}function Bm(e,t){var n=om(),r=void 0===t?null:t,o=n.memoizedState;if(null!==o&&(null!==r&&Zh(r,o[1])))return o[0];return n.memoizedState=[e,r],e}function Nm(e,t){var n=rm(),r=void 0===t?null:t,o=e();return n.memoizedState=[o,r],o}function Mm(e,t){var n=om(),r=void 0===t?null:t,o=n.memoizedState;if(null!==o&&(null!==r&&Zh(r,o[1])))return o[0];var a=e();return n.memoizedState=[a,r],a}function zm(e){return rm().memoizedState=e,e}function Um(e){return Wm(om(),Nh.memoizedState,e)}function Fm(e){var t=om();return null===Nh?(t.memoizedState=e,e):Wm(t,Nh.memoizedState,e)}function Wm(e,t,n){if(!((Lh&(va|ga|wa))===ha)){if(!Ss(n,t)){var r=ui();Bh.lanes=vi(Bh.lanes,r),mw(r),e.baseState=!0}return t}return e.baseState&&(e.baseState=!1,Sy()),e.memoizedState=n,n}function $m(e,t,n){var r,o,a=Li();Bi((o=Pi,0!==(r=a)&&r<o?r:o)),e(!0);var l=Ih.transition;Ih.transition={};var s=Ih.transition;Ih.transition._updatedFibers=new Set;try{e(!1),t()}finally{if(Bi(a),Ih.transition=l,null===l&&s._updatedFibers)s._updatedFibers.size>10&&i("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."),s._updatedFibers.clear()}}function Hm(){var e=vm(!1),t=e[0],n=e[1],r=$m.bind(null,n);return rm().memoizedState=r,[t,r]}function Vm(){return[ym()[0],om().memoizedState]}function qm(){return[gm()[0],om().memoizedState]}var Ym=!1;function Qm(){var e,t=rm(),n=Gb().identifierPrefix;if(bf()){e=":"+n+"R"+Ud();var r=Fh++;r>0&&(e+="H"+r.toString(32)),e+=":"}else{e=":"+n+"r"+(Wh++).toString(32)+":"}return t.memoizedState=e,e}function Gm(){return om().memoizedState}function Km(e,t,n){"function"==typeof arguments[3]&&l("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");var r=Xb(e),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(Zm(e))Jm(t,o);else{var a=Zf(e,t,o,r);if(null!==a)Jb(a,e,r,Kb()),ev(a,t,r)}tv(e,r)}function Xm(e,t,n){"function"==typeof arguments[3]&&l("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");var r=Xb(e),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(Zm(e))Jm(t,o);else{var a=e.alternate;if(e.lanes===ha&&(null===a||a.lanes===ha)){var i=t.lastRenderedReducer;if(null!==i){var s;s=Dh.current,Dh.current=sv;try{var u=t.lastRenderedState,c=i(u,n);if(o.hasEagerState=!0,o.eagerState=c,Ss(c,u))return void function(e,t,n,r){var o=t.interleaved;null===o?(n.next=n,Xf(t)):(n.next=o.next,o.next=n),t.interleaved=n}(0,t,o)}catch(e){}finally{Dh.current=s}}}var d=Zf(e,t,o,r);if(null!==d)Jb(d,e,r,Kb()),ev(d,t,r)}tv(e,r)}function Zm(e){var t=e.alternate;return e===Bh||null!==t&&t===Bh}function Jm(e,t){Uh=zh=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function ev(e,t,n){if(si(n)){var r=t.lanes,o=vi(r=gi(r,e.pendingLanes),n);t.lanes=o,Ai(e,o)}}function tv(e,t,n){oa(e,t)}var nv={readContext:Gf,useCallback:Xh,useContext:Xh,useEffect:Xh,useImperativeHandle:Xh,useInsertionEffect:Xh,useLayoutEffect:Xh,useMemo:Xh,useReducer:Xh,useRef:Xh,useState:Xh,useDebugValue:Xh,useDeferredValue:Xh,useTransition:Xh,useMutableSource:Xh,useSyncExternalStore:Xh,useId:Xh,unstable_isNewReconciler:L},rv=null,ov=null,av=null,iv=null,lv=null,sv=null,uv=null,cv=function(){l("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().")},dv=function(){l("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks")};rv={readContext:function(e){return Gf(e)},useCallback:function(e,t){return Hh="useCallback",Qh(),Kh(t),Lm(e,t)},useContext:function(e){return Hh="useContext",Qh(),Gf(e)},useEffect:function(e,t){return Hh="useEffect",Qh(),Kh(t),xm(e,t)},useImperativeHandle:function(e,t,n){return Hh="useImperativeHandle",Qh(),Kh(n),Pm(e,t,n)},useInsertionEffect:function(e,t){return Hh="useInsertionEffect",Qh(),Kh(t),Sm(e,t)},useLayoutEffect:function(e,t){return Hh="useLayoutEffect",Qh(),Kh(t),Tm(e,t)},useMemo:function(e,t){Hh="useMemo",Qh(),Kh(t);var n=Dh.current;Dh.current=lv;try{return Nm(e,t)}finally{Dh.current=n}},useReducer:function(e,t,n){Hh="useReducer",Qh();var r=Dh.current;Dh.current=lv;try{return im(e,t,n)}finally{Dh.current=r}},useRef:function(e){return Hh="useRef",Qh(),wm(e)},useState:function(e){Hh="useState",Qh();var t=Dh.current;Dh.current=lv;try{return vm(e)}finally{Dh.current=t}},useDebugValue:function(e,t){Hh="useDebugValue",Qh()},useDeferredValue:function(e){return Hh="useDeferredValue",Qh(),zm(e)},useTransition:function(){return Hh="useTransition",Qh(),Hm()},useMutableSource:function(e,t,n){Hh="useMutableSource",Qh()},useSyncExternalStore:function(e,t,n){return Hh="useSyncExternalStore",Qh(),um(e,t,n)},useId:function(){return Hh="useId",Qh(),Qm()},unstable_isNewReconciler:L},ov={readContext:function(e){return Gf(e)},useCallback:function(e,t){return Hh="useCallback",Gh(),Lm(e,t)},useContext:function(e){return Hh="useContext",Gh(),Gf(e)},useEffect:function(e,t){return Hh="useEffect",Gh(),xm(e,t)},useImperativeHandle:function(e,t,n){return Hh="useImperativeHandle",Gh(),Pm(e,t,n)},useInsertionEffect:function(e,t){return Hh="useInsertionEffect",Gh(),Sm(e,t)},useLayoutEffect:function(e,t){return Hh="useLayoutEffect",Gh(),Tm(e,t)},useMemo:function(e,t){Hh="useMemo",Gh();var n=Dh.current;Dh.current=lv;try{return Nm(e,t)}finally{Dh.current=n}},useReducer:function(e,t,n){Hh="useReducer",Gh();var r=Dh.current;Dh.current=lv;try{return im(e,t,n)}finally{Dh.current=r}},useRef:function(e){return Hh="useRef",Gh(),wm(e)},useState:function(e){Hh="useState",Gh();var t=Dh.current;Dh.current=lv;try{return vm(e)}finally{Dh.current=t}},useDebugValue:function(e,t){Hh="useDebugValue",Gh()},useDeferredValue:function(e){return Hh="useDeferredValue",Gh(),zm(e)},useTransition:function(){return Hh="useTransition",Gh(),Hm()},useMutableSource:function(e,t,n){Hh="useMutableSource",Gh()},useSyncExternalStore:function(e,t,n){return Hh="useSyncExternalStore",Gh(),um(e,t,n)},useId:function(){return Hh="useId",Gh(),Qm()},unstable_isNewReconciler:L},av={readContext:function(e){return Gf(e)},useCallback:function(e,t){return Hh="useCallback",Gh(),Bm(e,t)},useContext:function(e){return Hh="useContext",Gh(),Gf(e)},useEffect:function(e,t){return Hh="useEffect",Gh(),Cm(e,t)},useImperativeHandle:function(e,t,n){return Hh="useImperativeHandle",Gh(),jm(e,t,n)},useInsertionEffect:function(e,t){return Hh="useInsertionEffect",Gh(),_m(e,t)},useLayoutEffect:function(e,t){return Hh="useLayoutEffect",Gh(),Om(e,t)},useMemo:function(e,t){Hh="useMemo",Gh();var n=Dh.current;Dh.current=sv;try{return Mm(e,t)}finally{Dh.current=n}},useReducer:function(e,t,n){Hh="useReducer",Gh();var r=Dh.current;Dh.current=sv;try{return lm(e)}finally{Dh.current=r}},useRef:function(e){return Hh="useRef",Gh(),km()},useState:function(e){Hh="useState",Gh();var t=Dh.current;Dh.current=sv;try{return ym()}finally{Dh.current=t}},useDebugValue:function(e,t){return Hh="useDebugValue",Gh(),Im()},useDeferredValue:function(e){return Hh="useDeferredValue",Gh(),Um(e)},useTransition:function(){return Hh="useTransition",Gh(),Vm()},useMutableSource:function(e,t,n){Hh="useMutableSource",Gh()},useSyncExternalStore:function(e,t,n){return Hh="useSyncExternalStore",Gh(),cm(e,t)},useId:function(){return Hh="useId",Gh(),Gm()},unstable_isNewReconciler:L},iv={readContext:function(e){return Gf(e)},useCallback:function(e,t){return Hh="useCallback",Gh(),Bm(e,t)},useContext:function(e){return Hh="useContext",Gh(),Gf(e)},useEffect:function(e,t){return Hh="useEffect",Gh(),Cm(e,t)},useImperativeHandle:function(e,t,n){return Hh="useImperativeHandle",Gh(),jm(e,t,n)},useInsertionEffect:function(e,t){return Hh="useInsertionEffect",Gh(),_m(e,t)},useLayoutEffect:function(e,t){return Hh="useLayoutEffect",Gh(),Om(e,t)},useMemo:function(e,t){Hh="useMemo",Gh();var n=Dh.current;Dh.current=uv;try{return Mm(e,t)}finally{Dh.current=n}},useReducer:function(e,t,n){Hh="useReducer",Gh();var r=Dh.current;Dh.current=uv;try{return sm(e)}finally{Dh.current=r}},useRef:function(e){return Hh="useRef",Gh(),km()},useState:function(e){Hh="useState",Gh();var t=Dh.current;Dh.current=uv;try{return gm()}finally{Dh.current=t}},useDebugValue:function(e,t){return Hh="useDebugValue",Gh(),Im()},useDeferredValue:function(e){return Hh="useDeferredValue",Gh(),Fm(e)},useTransition:function(){return Hh="useTransition",Gh(),qm()},useMutableSource:function(e,t,n){Hh="useMutableSource",Gh()},useSyncExternalStore:function(e,t,n){return Hh="useSyncExternalStore",Gh(),cm(e,t)},useId:function(){return Hh="useId",Gh(),Gm()},unstable_isNewReconciler:L},lv={readContext:function(e){return cv(),Gf(e)},useCallback:function(e,t){return Hh="useCallback",dv(),Qh(),Lm(e,t)},useContext:function(e){return Hh="useContext",dv(),Qh(),Gf(e)},useEffect:function(e,t){return Hh="useEffect",dv(),Qh(),xm(e,t)},useImperativeHandle:function(e,t,n){return Hh="useImperativeHandle",dv(),Qh(),Pm(e,t,n)},useInsertionEffect:function(e,t){return Hh="useInsertionEffect",dv(),Qh(),Sm(e,t)},useLayoutEffect:function(e,t){return Hh="useLayoutEffect",dv(),Qh(),Tm(e,t)},useMemo:function(e,t){Hh="useMemo",dv(),Qh();var n=Dh.current;Dh.current=lv;try{return Nm(e,t)}finally{Dh.current=n}},useReducer:function(e,t,n){Hh="useReducer",dv(),Qh();var r=Dh.current;Dh.current=lv;try{return im(e,t,n)}finally{Dh.current=r}},useRef:function(e){return Hh="useRef",dv(),Qh(),wm(e)},useState:function(e){Hh="useState",dv(),Qh();var t=Dh.current;Dh.current=lv;try{return vm(e)}finally{Dh.current=t}},useDebugValue:function(e,t){Hh="useDebugValue",dv(),Qh()},useDeferredValue:function(e){return Hh="useDeferredValue",dv(),Qh(),zm(e)},useTransition:function(){return Hh="useTransition",dv(),Qh(),Hm()},useMutableSource:function(e,t,n){Hh="useMutableSource",dv(),Qh()},useSyncExternalStore:function(e,t,n){return Hh="useSyncExternalStore",dv(),Qh(),um(e,t,n)},useId:function(){return Hh="useId",dv(),Qh(),Qm()},unstable_isNewReconciler:L},sv={readContext:function(e){return cv(),Gf(e)},useCallback:function(e,t){return Hh="useCallback",dv(),Gh(),Bm(e,t)},useContext:function(e){return Hh="useContext",dv(),Gh(),Gf(e)},useEffect:function(e,t){return Hh="useEffect",dv(),Gh(),Cm(e,t)},useImperativeHandle:function(e,t,n){return Hh="useImperativeHandle",dv(),Gh(),jm(e,t,n)},useInsertionEffect:function(e,t){return Hh="useInsertionEffect",dv(),Gh(),_m(e,t)},useLayoutEffect:function(e,t){return Hh="useLayoutEffect",dv(),Gh(),Om(e,t)},useMemo:function(e,t){Hh="useMemo",dv(),Gh();var n=Dh.current;Dh.current=sv;try{return Mm(e,t)}finally{Dh.current=n}},useReducer:function(e,t,n){Hh="useReducer",dv(),Gh();var r=Dh.current;Dh.current=sv;try{return lm(e)}finally{Dh.current=r}},useRef:function(e){return Hh="useRef",dv(),Gh(),km()},useState:function(e){Hh="useState",dv(),Gh();var t=Dh.current;Dh.current=sv;try{return ym()}finally{Dh.current=t}},useDebugValue:function(e,t){return Hh="useDebugValue",dv(),Gh(),Im()},useDeferredValue:function(e){return Hh="useDeferredValue",dv(),Gh(),Um(e)},useTransition:function(){return Hh="useTransition",dv(),Gh(),Vm()},useMutableSource:function(e,t,n){Hh="useMutableSource",dv(),Gh()},useSyncExternalStore:function(e,t,n){return Hh="useSyncExternalStore",dv(),Gh(),cm(e,t)},useId:function(){return Hh="useId",dv(),Gh(),Gm()},unstable_isNewReconciler:L},uv={readContext:function(e){return cv(),Gf(e)},useCallback:function(e,t){return Hh="useCallback",dv(),Gh(),Bm(e,t)},useContext:function(e){return Hh="useContext",dv(),Gh(),Gf(e)},useEffect:function(e,t){return Hh="useEffect",dv(),Gh(),Cm(e,t)},useImperativeHandle:function(e,t,n){return Hh="useImperativeHandle",dv(),Gh(),jm(e,t,n)},useInsertionEffect:function(e,t){return Hh="useInsertionEffect",dv(),Gh(),_m(e,t)},useLayoutEffect:function(e,t){return Hh="useLayoutEffect",dv(),Gh(),Om(e,t)},useMemo:function(e,t){Hh="useMemo",dv(),Gh();var n=Dh.current;Dh.current=sv;try{return Mm(e,t)}finally{Dh.current=n}},useReducer:function(e,t,n){Hh="useReducer",dv(),Gh();var r=Dh.current;Dh.current=sv;try{return sm(e)}finally{Dh.current=r}},useRef:function(e){return Hh="useRef",dv(),Gh(),km()},useState:function(e){Hh="useState",dv(),Gh();var t=Dh.current;Dh.current=sv;try{return gm()}finally{Dh.current=t}},useDebugValue:function(e,t){return Hh="useDebugValue",dv(),Gh(),Im()},useDeferredValue:function(e){return Hh="useDeferredValue",dv(),Gh(),Fm(e)},useTransition:function(){return Hh="useTransition",dv(),Gh(),qm()},useMutableSource:function(e,t,n){Hh="useMutableSource",dv(),Gh()},useSyncExternalStore:function(e,t,n){return Hh="useSyncExternalStore",dv(),Gh(),cm(e,t)},useId:function(){return Hh="useId",dv(),Gh(),Gm()},unstable_isNewReconciler:L};var fv=r.unstable_now,pv=0,hv=-1,mv=-1,vv=-1,yv=!1,gv=!1;function bv(){return yv}function wv(){return pv}function kv(){pv=fv()}function Av(e){mv=fv(),e.actualStartTime<0&&(e.actualStartTime=fv())}function Ev(e){mv=-1}function xv(e,t){if(mv>=0){var n=fv()-mv;e.actualDuration+=n,t&&(e.selfBaseDuration=n),mv=-1}}function Cv(e){if(hv>=0){var t=fv()-hv;hv=-1;for(var n=e.return;null!==n;){switch(n.tag){case f:return void(n.stateNode.effectDuration+=t);case k:return void(n.stateNode.effectDuration+=t)}n=n.return}}}function Sv(e){if(vv>=0){var t=fv()-vv;vv=-1;for(var n=e.return;null!==n;){switch(n.tag){case f:var r=n.stateNode;return void(null!==r&&(r.passiveEffectDuration+=t));case k:var o=n.stateNode;return void(null!==o&&(o.passiveEffectDuration+=t))}n=n.return}}}function _v(){hv=fv()}function Tv(){vv=fv()}function Ov(e){for(var t=e.child;t;)e.actualDuration+=t.actualDuration,t=t.sibling}function Rv(e,t){return{value:e,source:t,stack:dt(t),digest:null}}function Pv(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function jv(e,t){try{0;var n=t.value,r=t.source,o=t.stack,a=null!==o?o:"";if(null!=n&&n._suppressLogging&&e.tag===c)return;var i=r?mt(r):null;e.tag===f||mt(e)}catch(e){setTimeout((function(){throw e}))}}var Dv="function"==typeof WeakMap?WeakMap:Map;function Iv(e,t,n){var r=dp(Za,n);r.tag=lp,r.payload={element:null};var o=t.value;return r.callback=function(){Cw(o),jv(e,t)},r}function Lv(e,t,n){var r=dp(Za,n);r.tag=lp;var o=e.type.getDerivedStateFromError;if("function"==typeof o){var a=t.value;r.payload=function(){return o(a)},r.callback=function(){Zw(e),jv(e,t)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(r.callback=function(){var n;Zw(e),jv(e,t),"function"!=typeof o&&(n=this,null===jb?jb=new Set([n]):jb.add(n));var r=t.value,a=t.stack;this.componentDidCatch(r,{componentStack:null!==a?a:""}),"function"!=typeof o&&(hi(e.lanes,va)||l("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.",mt(e)||"Unknown"))}),r}function Bv(e,t,n){var r,o=e.pingCache;if(null===o?(o=e.pingCache=new Dv,r=new Set,o.set(t,r)):void 0===(r=o.get(t))&&(r=new Set,o.set(t,r)),!r.has(n)){r.add(n);var a=Tw.bind(null,e,t,n);Ho&&zw(e,n),t.then(a,a)}}function Nv(e){var t=e;do{if(t.tag===A&&kh(t))return t;t=t.return}while(null!==t);return null}function Mv(e,t,n,r,o){if((e.mode&ia)===aa){if(e===t)e.flags|=ro;else{if(e.flags|=qr,n.flags|=oo,n.flags&=~(eo|no),n.tag===c)if(null===n.alternate)n.tag=S;else{var a=dp(Za,va);a.tag=ip,fp(n,a,va)}n.lanes=vi(n.lanes,va)}return e}return e.flags|=ro,e.lanes=o,e}function zv(e,t,n,r,o){if(n.flags|=no,Ho&&zw(e,o),null!==r&&"object"==typeof r&&"function"==typeof r.then){var a=r;!function(e,t){var n=e.tag;if((e.mode&ia)===aa&&(n===u||n===w||n===x)){var r=e.alternate;r?(e.updateQueue=r.updateQueue,e.memoizedState=r.memoizedState,e.lanes=r.lanes):(e.updateQueue=null,e.memoizedState=null)}}(n),bf()&&n.mode&ia&&Jd();var i=Nv(t);if(null!==i)return i.flags&=~Yr,Mv(i,t,n,0,o),i.mode&ia&&Bv(e,a,o),void function(e,t,n,r){var o=e.updateQueue;if(null===o){var a=new Set;a.add(n),e.updateQueue=a}else o.add(n)}(i,0,a);if((o&va)===ha)return Bv(e,a,o),void vw();r=new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.")}else if(bf()&&n.mode&ia){Jd();var l=Nv(t);if(null!==l)return(l.flags&ro)===zr&&(l.flags|=Yr),Mv(l,t,n,0,o),void wf(Rv(r,n))}!function(e){mb!==ib&&(mb=ob);null===kb?kb=[e]:kb.push(e)}(r=Rv(r,n));var s=t;do{switch(s.tag){case f:var d=r;s.flags|=ro;var p=di(o);return s.lanes=vi(s.lanes,p),void hp(s,Iv(s,d,p));case c:var h=r,m=s.type,v=s.stateNode;if((s.flags&qr)===zr&&("function"==typeof m.getDerivedStateFromError||null!==v&&"function"==typeof v.componentDidCatch&&!xw(v))){s.flags|=ro;var y=di(o);return s.lanes=vi(s.lanes,y),void hp(s,Lv(s,h,y))}}s=s.return}while(null!==s)}var Uv,Fv,Wv,$v,Hv,Vv,qv,Yv,Qv=o.ReactCurrentOwner,Gv=!1;function Kv(e,t,n,r){t.child=null===e?Jp(t,null,n,r):Zp(t,e.child,n,r)}function Xv(e,t,n,r,o){if(t.type!==t.elementType){var a=n.propTypes;a&&Jc(a,r,"prop",pt(n))}var i,l,s=n.render,u=t.ref;if(Qf(t,o),Go(t),Qv.current=t,Et(!0),i=Jh(e,t,s,r,u,o),l=em(),t.mode&sa){Vo(!0);try{i=Jh(e,t,s,r,u,o),l=em()}finally{Vo(!1)}}return Et(!1),Ko(),null===e||Gv?(bf()&&l&&$d(t),t.flags|=Ur,Kv(e,t,i,o),t.child):(tm(e,t,o),Ty(e,t,o))}function Zv(e,t,n,r,o){if(null===e){var a=n.type;if(function(e){return"function"==typeof e&&!sk(e)&&void 0===e.defaultProps}(a)&&null===n.compare&&void 0===n.defaultProps){var i;return i=Qw(a),t.tag=x,t.type=i,sy(t,a),Jv(e,t,i,r,o)}var l=a.propTypes;l&&Jc(l,r,"prop",pt(a));var s=dk(n.type,null,r,t,t.mode,o);return s.ref=t.ref,s.return=t,t.child=s,s}var u=n.type,c=u.propTypes;c&&Jc(c,r,"prop",pt(u));var d=e.child;if(!Oy(e,o)){var f=d.memoizedProps,p=n.compare;if((p=null!==p?p:_s)(f,r)&&e.ref===t.ref)return Ty(e,t,o)}t.flags|=Ur;var h=uk(d,r);return h.ref=t.ref,h.return=t,t.child=h,h}function Jv(e,t,n,r,o){if(t.type!==t.elementType){var a=t.elementType;if(a.$$typeof===Ue){var i=a,l=i._payload,s=i._init;try{a=s(l)}catch(e){a=null}var u=a&&a.propTypes;u&&Jc(u,r,"prop",pt(a))}}if(null!==e){var c=e.memoizedProps;if(_s(c,r)&&e.ref===t.ref&&t.type===e.type){if(Gv=!1,t.pendingProps=r=c,!Oy(e,o))return t.lanes=e.lanes,Ty(e,t,o);(e.flags&oo)!==zr&&(Gv=!0)}}return ny(e,t,n,r,o)}function ey(e,t,n){var r,o=t.pendingProps,a=o.children,i=null!==e?e.memoizedState:null;if("hidden"===o.mode||N)if((t.mode&ia)===aa){var l={baseLanes:ha,cachePool:null,transitions:null};t.memoizedState=l,uw(t,n)}else{if(!hi(n,Ka)){var s;if(null!==i)s=vi(i.baseLanes,n);else s=n;t.lanes=t.childLanes=Ka;var u={baseLanes:s,cachePool:null,transitions:null};return t.memoizedState=u,t.updateQueue=null,uw(t,s),null}var c={baseLanes:ha,cachePool:null,transitions:null};t.memoizedState=c,uw(t,null!==i?i.baseLanes:n)}else null!==i?(r=vi(i.baseLanes,n),t.memoizedState=null):r=n,uw(t,r);return Kv(e,t,a,n),t.child}function ty(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=Qr,t.flags|=io)}function ny(e,t,n,r,o){if(t.type!==t.elementType){var a=n.propTypes;a&&Jc(a,r,"prop",pt(n))}var i,l,s;if(i=pd(t,dd(0,n,!0)),Qf(t,o),Go(t),Qv.current=t,Et(!0),l=Jh(e,t,n,r,i,o),s=em(),t.mode&sa){Vo(!0);try{l=Jh(e,t,n,r,i,o),s=em()}finally{Vo(!1)}}return Et(!1),Ko(),null===e||Gv?(bf()&&s&&$d(t),t.flags|=Ur,Kv(e,t,l,o),t.child):(tm(e,t,o),Ty(e,t,o))}function ry(e,t,n,r,o){switch(jk(t)){case!1:var a=t.stateNode,i=new(0,t.type)(t.memoizedProps,a.context).state;a.updater.enqueueSetState(a,i,null);break;case!0:t.flags|=qr,t.flags|=ro;var s=new Error("Simulated error coming from DevTools"),u=di(o);t.lanes=vi(t.lanes,u),hp(t,Lv(t,Rv(s,t),u))}if(t.type!==t.elementType){var c=n.propTypes;c&&Jc(c,r,"prop",pt(n))}var d,f;md(n)?(d=!0,wd(t)):d=!1,Qf(t,o),null===t.stateNode?(_y(e,t),$p(t,n,r),Vp(t,n,r,o),f=!0):f=null===e?function(e,t,n,r){var o=e.stateNode,a=e.memoizedProps;o.props=a;var i=o.context,l=t.contextType,s=ld;s="object"==typeof l&&null!==l?Gf(l):pd(e,dd(0,t,!0));var u=t.getDerivedStateFromProps,c="function"==typeof u||"function"==typeof o.getSnapshotBeforeUpdate;c||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||a===n&&i===s||Hp(e,o,n,s),gp();var d=e.memoizedState,f=o.state=d;if(vp(e,n,o,r),f=e.memoizedState,a===n&&d===f&&!hd()&&!bp()){if("function"==typeof o.componentDidMount){var p=Wr;p|=lo,(e.mode&ua)!==aa&&(p|=uo),e.flags|=p}return!1}"function"==typeof u&&(Ip(e,t,u,n),f=e.memoizedState);var h=bp()||Fp(e,t,a,n,d,f,s);if(h){if(c||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||("function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount()),"function"==typeof o.componentDidMount){var m=Wr;m|=lo,(e.mode&ua)!==aa&&(m|=uo),e.flags|=m}}else{if("function"==typeof o.componentDidMount){var v=Wr;v|=lo,(e.mode&ua)!==aa&&(v|=uo),e.flags|=v}e.memoizedProps=n,e.memoizedState=f}return o.props=n,o.state=f,o.context=s,h}(t,n,r,o):function(e,t,n,r,o){var a=t.stateNode;cp(e,t);var i=t.memoizedProps,l=t.type===t.elementType?i:If(t.type,i);a.props=l;var s=t.pendingProps,u=a.context,c=n.contextType,d=ld;d="object"==typeof c&&null!==c?Gf(c):pd(t,dd(0,n,!0));var f=n.getDerivedStateFromProps,p="function"==typeof f||"function"==typeof a.getSnapshotBeforeUpdate;p||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||i===s&&u===d||Hp(t,a,r,d),gp();var h=t.memoizedState,m=a.state=h;if(vp(t,r,a,o),m=t.memoizedState,i===s&&h===m&&!hd()&&!bp()&&!B)return"function"==typeof a.componentDidUpdate&&(i===e.memoizedProps&&h===e.memoizedState||(t.flags|=Wr)),"function"==typeof a.getSnapshotBeforeUpdate&&(i===e.memoizedProps&&h===e.memoizedState||(t.flags|=Gr)),!1;"function"==typeof f&&(Ip(t,n,f,r),m=t.memoizedState);var v=bp()||Fp(t,n,l,r,h,m,d)||B;return v?(p||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,m,d),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,m,d)),"function"==typeof a.componentDidUpdate&&(t.flags|=Wr),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=Gr)):("function"==typeof a.componentDidUpdate&&(i===e.memoizedProps&&h===e.memoizedState||(t.flags|=Wr)),"function"==typeof a.getSnapshotBeforeUpdate&&(i===e.memoizedProps&&h===e.memoizedState||(t.flags|=Gr)),t.memoizedProps=r,t.memoizedState=m),a.props=r,a.state=m,a.context=d,v}(e,t,n,r,o);var p=oy(e,t,n,f,d,o),h=t.stateNode;return f&&h.props!==r&&(Vv||l("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.",mt(t)||"a component"),Vv=!0),p}function oy(e,t,n,r,o,a){ty(e,t);var i=(t.flags&qr)!==zr;if(!r&&!i)return o&&kd(t,n,!1),Ty(e,t,a);var l,s=t.stateNode;if(Qv.current=t,i&&"function"!=typeof n.getDerivedStateFromError)l=null,Ev();else{if(Go(t),Et(!0),l=s.render(),t.mode&sa){Vo(!0);try{s.render()}finally{Vo(!1)}}Et(!1),Ko()}return t.flags|=Ur,null!==e&&i?function(e,t,n,r){t.child=Zp(t,e.child,null,r),t.child=Zp(t,null,n,r)}(e,t,l,a):Kv(e,t,l,a),t.memoizedState=s.state,o&&kd(t,n,!0),t.child}function ay(e){var t=e.stateNode;t.pendingContext?gd(e,t.pendingContext,t.pendingContext!==t.context):t.context&&gd(e,t.context,!1),lh(e,t.containerInfo)}function iy(e,t,n,r,o){return yf(),wf(o),t.flags|=Yr,Kv(e,t,n,r),t.child}function ly(e,t,n,r){_y(e,t);var o=t.pendingProps,a=n,i=a._payload,l=(0,a._init)(i);t.type=l;var s=t.tag=function(e){if("function"==typeof e)return sk(e)?c:u;if(null!=e){var t=e.$$typeof;if(t===Be)return w;if(t===ze)return E}return d}(l),f=If(l,o);switch(s){case u:return sy(t,l),t.type=l=Qw(l),ny(null,t,l,f,r);case c:return t.type=l=Gw(l),ry(null,t,l,f,r);case w:return t.type=l=Kw(l),Xv(null,t,l,f,r);case E:if(t.type!==t.elementType){var p=l.propTypes;p&&Jc(p,f,"prop",pt(l))}return Zv(null,t,l,If(l.type,f),r)}var h="";throw null!==l&&"object"==typeof l&&l.$$typeof===Ue&&(h=" Did you wrap a component in React.lazy() more than once?"),new Error("Element type is invalid. Received a promise that resolves to: "+l+". Lazy element type must resolve to a class or function."+h)}function sy(e,t){if(t&&t.childContextTypes&&l("%s(...): childContextTypes cannot be defined on a function component.",t.displayName||t.name||"Component"),null!==e.ref){var n="",r=bt();r&&(n+="\n\nCheck the render method of `"+r+"`.");var o=r||"",a=e._debugSource;a&&(o=a.fileName+":"+a.lineNumber),Hv[o]||(Hv[o]=!0,l("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s",n))}if("function"==typeof t.getDerivedStateFromProps){var i=pt(t)||"Unknown";$v[i]||(l("%s: Function components do not support getDerivedStateFromProps.",i),$v[i]=!0)}if("object"==typeof t.contextType&&null!==t.contextType){var s=pt(t)||"Unknown";Wv[s]||(l("%s: Function components do not support contextType.",s),Wv[s]=!0)}}Uv={},Fv={},Wv={},$v={},Hv={},Vv=!1,qv={},Yv={};var uy={dehydrated:null,treeContext:null,retryLane:ma};function cy(e){return{baseLanes:e,cachePool:null,transitions:null}}function dy(e,t,n){var r=t.pendingProps;Dk(t)&&(t.flags|=qr);var o=mh.current,a=!1,i=(t.flags&qr)!==zr;if(i||function(e,t,n,r){return(null===t||null!==t.memoizedState)&&vh(e,hh)}(o,e)?(a=!0,t.flags&=~qr):null!==e&&null===e.memoizedState||(o=o|ph),bh(t,o=yh(o)),null===e){cf(t);var s=t.memoizedState;if(null!==s){var u=s.dehydrated;if(null!==u)return function(e,t,n){(e.mode&ia)===aa?(l("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components."),e.lanes=va):Oc(t)?e.lanes=ba:e.lanes=Ka;return null}(t,u)}var c=r.children,d=r.fallback;if(a){var f=function(e,t,n,r){var o,a,i=e.mode,l=e.child,s={mode:"hidden",children:t};(i&ia)===aa&&null!==l?((o=l).childLanes=ha,o.pendingProps=s,e.mode&la&&(o.actualDuration=0,o.actualStartTime=-1,o.selfBaseDuration=0,o.treeBaseDuration=0),a=pk(n,i,r,null)):(o=py(s,i),a=pk(n,i,r,null));return o.return=e,a.return=e,o.sibling=a,e.child=o,a}(t,c,d,n);return t.child.memoizedState=cy(n),t.memoizedState=uy,f}return fy(t,c)}var p=e.memoizedState;if(null!==p){var h=p.dehydrated;if(null!==h)return function(e,t,n,r,o,a,i){if(n){if(t.flags&Yr)return t.flags&=~Yr,my(e,t,i,Pv(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering.")));if(null!==t.memoizedState)return t.child=e.child,t.flags|=qr,null;var l=function(e,t,n,r,o){var a=t.mode,i={mode:"visible",children:n},l=py(i,a),s=pk(r,a,o,null);s.flags|=Fr,l.return=t,s.return=t,l.sibling=s,t.child=l,(t.mode&ia)!==aa&&Zp(t,e.child,null,o);return s}(e,t,r.children,r.fallback,i);return t.child.memoizedState=cy(i),t.memoizedState=uy,l}if(Zd(),(t.mode&ia)===aa)return my(e,t,i,null);if(Oc(o)){var s,u,c,d=function(e){var t,n,r,o=e.nextSibling&&e.nextSibling.dataset;return o&&(t=o.dgst,n=o.msg,r=o.stck),{message:n,digest:t,stack:r}}(o);return s=d.digest,u=d.message,c=d.stack,my(e,t,i,Pv(u?new Error(u):new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering."),s,c))}var f=hi(i,e.childLanes);if(Gv||f){var p=Gb();if(null!==p){var h=function(e,t){var n;switch(ci(t)){case ga:n=ya;break;case wa:n=ba;break;case Ea:case xa:case Ca:case Sa:case _a:case Ta:case Oa:case Ra:case Pa:case ja:case Da:case Ia:case La:case Ba:case Na:case Ma:case Ua:case Fa:case Wa:case $a:case Ha:n=ka;break;case Ga:n=Qa;break;default:n=ma}return(n&(e.suspendedLanes|t))!==ma?ma:n}(p,i);if(h!==ma&&h!==a.retryLane){a.retryLane=h;var m=Za;Jf(e,h),Jb(p,e,h,m)}}return vw(),my(e,t,i,Pv(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition.")))}if(Tc(o)){t.flags|=qr,t.child=e.child;var v=Rw.bind(null,e);return g=v,o._reactRetry=g,null}tf(t,o,a.treeContext);var y=fy(t,r.children);return y.flags|=Xr,y;var g}(e,t,i,r,h,p,n)}if(a){var m=r.fallback,v=function(e,t,n,r,o){var a,i,l=t.mode,s=e.child,u=s.sibling,c={mode:"hidden",children:n};if((l&ia)===aa&&t.child!==s){(a=t.child).childLanes=ha,a.pendingProps=c,t.mode&la&&(a.actualDuration=0,a.actualStartTime=-1,a.selfBaseDuration=s.selfBaseDuration,a.treeBaseDuration=s.treeBaseDuration),t.deletions=null}else(a=hy(s,c)).subtreeFlags=s.subtreeFlags&vo;null!==u?i=uk(u,r):(i=pk(r,l,o,null)).flags|=Fr;return i.return=t,a.return=t,a.sibling=i,t.child=a,i}(e,t,r.children,m,n),y=t.child,g=e.child.memoizedState;return y.memoizedState=null===g?cy(n):function(e,t){return{baseLanes:vi(e.baseLanes,t),cachePool:null,transitions:e.transitions}}(g,n),y.childLanes=function(e,t){return yi(e.childLanes,t)}(e,n),t.memoizedState=uy,v}var b=function(e,t,n,r){var o=e.child,a=o.sibling,i=hy(o,{mode:"visible",children:n});(t.mode&ia)===aa&&(i.lanes=r);if(i.return=t,i.sibling=null,null!==a){var l=t.deletions;null===l?(t.deletions=[a],t.flags|=$r):l.push(a)}return t.child=i,i}(e,t,r.children,n);return t.memoizedState=null,b}function fy(e,t,n){var r=py({mode:"visible",children:t},e.mode);return r.return=e,e.child=r,r}function py(e,t,n){return hk(e,t,ha,null)}function hy(e,t){return uk(e,t)}function my(e,t,n,r){null!==r&&wf(r),Zp(t,e.child,null,n);var o=fy(t,t.pendingProps.children);return o.flags|=Fr,t.memoizedState=null,o}function vy(e,t,n){e.lanes=vi(e.lanes,t);var r=e.alternate;null!==r&&(r.lanes=vi(r.lanes,t)),qf(e.return,t,n)}function yy(e,t){var n=Xt(e),r=!n&&"function"==typeof He(e);if(n||r){var o=n?"array":"iterable";return l("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>",o,t,o),!1}return!0}function gy(e,t,n,r,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o)}function by(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail,i=r.children;!function(e){if(void 0!==e&&"forwards"!==e&&"backwards"!==e&&"together"!==e&&!qv[e])if(qv[e]=!0,"string"==typeof e)switch(e.toLowerCase()){case"together":case"forwards":case"backwards":l('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.',e,e.toLowerCase());break;case"forward":case"backward":l('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.',e,e.toLowerCase());break;default:l('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?',e)}else l('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?',e)}(o),function(e,t){void 0===e||Yv[e]||("collapsed"!==e&&"hidden"!==e?(Yv[e]=!0,l('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?',e)):"forwards"!==t&&"backwards"!==t&&(Yv[e]=!0,l('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?',e)))}(a,o),function(e,t){if(("forwards"===t||"backwards"===t)&&null!=e&&!1!==e)if(Xt(e)){for(var n=0;n<e.length;n++)if(!yy(e[n],n))return}else{var r=He(e);if("function"==typeof r){var o=r.call(e);if(o)for(var a=o.next(),i=0;!a.done;a=o.next()){if(!yy(a.value,i))return;i++}}else l('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?',t)}}(i,o),Kv(e,t,i,n);var s=mh.current;vh(s,hh)?(s=gh(s,hh),t.flags|=qr):(null!==e&&(e.flags&qr)!==zr&&function(e,t,n){for(var r=t;null!==r;){if(r.tag===A)null!==r.memoizedState&&vy(r,n,e);else if(r.tag===T)vy(r,n,e);else if(null!==r.child){r.child.return=r,r=r.child;continue}if(r===e)return;for(;null===r.sibling;){if(null===r.return||r.return===e)return;r=r.return}r.sibling.return=r.return,r=r.sibling}}(t,t.child,n),s=yh(s));if(bh(t,s),(t.mode&ia)===aa)t.memoizedState=null;else switch(o){case"forwards":var u,c=function(e){for(var t=e,n=null;null!==t;){var r=t.alternate;null!==r&&null===Ah(r)&&(n=t),t=t.sibling}return n}(t.child);null===c?(u=t.child,t.child=null):(u=c.sibling,c.sibling=null),gy(t,!1,u,c,a);break;case"backwards":var d=null,f=t.child;for(t.child=null;null!==f;){var p=f.alternate;if(null!==p&&null===Ah(p)){t.child=f;break}var h=f.sibling;f.sibling=d,d=f,f=h}gy(t,!0,d,null,a);break;case"together":gy(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}var wy=!1;var ky,Ay,Ey,xy,Cy=!1;function Sy(){Gv=!0}function _y(e,t){(t.mode&ia)===aa&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=Fr)}function Ty(e,t,n){return null!==e&&(t.dependencies=e.dependencies),Ev(),mw(t.lanes),hi(n,t.childLanes)?(function(e,t){if(null!==e&&t.child!==e.child)throw new Error("Resuming work not yet implemented.");if(null!==t.child){var n=t.child,r=uk(n,n.pendingProps);for(t.child=r,r.return=t;null!==n.sibling;)n=n.sibling,(r=r.sibling=uk(n,n.pendingProps)).return=t;r.sibling=null}}(e,t),t.child):null}function Oy(e,t){return!!hi(e.lanes,t)}function Ry(e,t,n){if(t._debugNeedsRemount&&null!==e)return function(e,t,n){var r=t.return;if(null===r)throw new Error("Cannot swap the root fiber.");if(e.alternate=null,t.alternate=null,n.index=t.index,n.sibling=t.sibling,n.return=t.return,n.ref=t.ref,t===r.child)r.child=n;else{var o=r.child;if(null===o)throw new Error("Expected parent to have a child.");for(;o.sibling!==t;)if(null===(o=o.sibling))throw new Error("Expected to find the previous sibling.");o.sibling=n}var a=r.deletions;return null===a?(r.deletions=[e],r.flags|=$r):a.push(e),n.flags|=Fr,n}(e,t,dk(t.type,t.key,t.pendingProps,t._debugOwner||null,t.mode,t.lanes));if(null!==e)if(e.memoizedProps!==t.pendingProps||hd()||t.type!==e.type)Gv=!0;else{if(!Oy(e,n)&&(t.flags&qr)===zr)return Gv=!1,function(e,t,n){switch(t.tag){case f:ay(t),t.stateNode,yf();break;case h:ch(t);break;case c:md(t.type)&&wd(t);break;case p:lh(t,t.stateNode.containerInfo);break;case b:var r=t.memoizedProps.value;Hf(t,t.type._context,r);break;case k:hi(n,t.childLanes)&&(t.flags|=Wr);var o=t.stateNode;o.effectDuration=0,o.passiveEffectDuration=0;break;case A:var a=t.memoizedState;if(null!==a){if(null!==a.dehydrated)return bh(t,yh(mh.current)),t.flags|=qr,null;if(hi(n,t.child.childLanes))return dy(e,t,n);bh(t,yh(mh.current));var i=Ty(e,t,n);return null!==i?i.sibling:null}bh(t,yh(mh.current));break;case T:var l=(e.flags&qr)!==zr,s=hi(n,t.childLanes);if(l){if(s)return by(e,t,n);t.flags|=qr}var u=t.memoizedState;if(null!==u&&(u.rendering=null,u.tail=null,u.lastEffect=null),bh(t,mh.current),s)break;return null;case R:case P:return t.lanes=ha,ey(e,t,n)}return Ty(e,t,n)}(e,t,n);Gv=(e.flags&oo)!==zr}else if(Gv=!1,bf()&&function(e){return qd(),(e.flags&ao)!==zr}(t)){var r=t.index;Wd(t,(qd(),Id),r)}switch(t.lanes=ha,t.tag){case d:return function(e,t,n,r){_y(e,t);var o,a,i,s=t.pendingProps;if(o=pd(t,dd(0,n,!1)),Qf(t,r),Go(t),n.prototype&&"function"==typeof n.prototype.render){var d=pt(n)||"Unknown";Uv[d]||(l("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.",d,d),Uv[d]=!0)}if(t.mode&sa&&Ef.recordLegacyContextWarning(t,null),Et(!0),Qv.current=t,a=Jh(null,t,n,s,o,r),i=em(),Et(!1),Ko(),t.flags|=Ur,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof){var f=pt(n)||"Unknown";Fv[f]||(l("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.",f,f,f),Fv[f]=!0)}if("object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof){var p=pt(n)||"Unknown";Fv[p]||(l("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.",p,p,p),Fv[p]=!0),t.tag=c,t.memoizedState=null,t.updateQueue=null;var h=!1;return md(n)?(h=!0,wd(t)):h=!1,t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,up(t),Wp(t,a),Vp(t,n,s,r),oy(null,t,n,!0,h,r)}if(t.tag=u,t.mode&sa){Vo(!0);try{a=Jh(null,t,n,s,o,r),i=em()}finally{Vo(!1)}}return bf()&&i&&$d(t),Kv(null,t,a,r),sy(t,n),t.child}(e,t,t.type,n);case C:return ly(e,t,t.elementType,n);case u:var o=t.type,a=t.pendingProps;return ny(e,t,o,t.elementType===o?a:If(o,a),n);case c:var i=t.type,s=t.pendingProps;return ry(e,t,i,t.elementType===i?s:If(i,s),n);case f:return function(e,t,n){if(ay(t),null===e)throw new Error("Should have a current fiber. This is a bug in React.");var r=t.pendingProps,o=t.memoizedState,a=o.element;cp(e,t),vp(t,r,null,n);var i=t.memoizedState,l=(t.stateNode,i.element);if(o.isDehydrated){var s={element:l,isDehydrated:!1,cache:i.cache,pendingSuspenseBoundaries:i.pendingSuspenseBoundaries,transitions:i.transitions};if(t.updateQueue.baseState=s,t.memoizedState=s,t.flags&Yr)return iy(e,t,l,n,Rv(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."),t));if(l!==a)return iy(e,t,l,n,Rv(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."),t));ef(t);var u=Jp(t,null,l,n);t.child=u;for(var c=u;c;)c.flags=c.flags&~Fr|Xr,c=c.sibling}else{if(yf(),l===a)return Ty(e,t,n);Kv(e,t,l,n)}return t.child}(e,t,n);case h:return function(e,t,n){ch(t),null===e&&cf(t);var r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,i=o.children;return mc(r,o)?i=null:null!==a&&mc(r,a)&&(t.flags|=Hr),ty(e,t),Kv(e,t,i,n),t.child}(e,t,n);case m:return function(e,t){return null===e&&cf(t),null}(e,t);case A:return dy(e,t,n);case p:return function(e,t,n){lh(t,t.stateNode.containerInfo);var r=t.pendingProps;return null===e?t.child=Zp(t,null,r,n):Kv(e,t,r,n),t.child}(e,t,n);case w:var _=t.type,j=t.pendingProps;return Xv(e,t,_,t.elementType===_?j:If(_,j),n);case v:return function(e,t,n){return Kv(e,t,t.pendingProps,n),t.child}(e,t,n);case y:return function(e,t,n){return Kv(e,t,t.pendingProps.children,n),t.child}(e,t,n);case k:return function(e,t,n){t.flags|=Wr;var r=t.stateNode;return r.effectDuration=0,r.passiveEffectDuration=0,Kv(e,t,t.pendingProps.children,n),t.child}(e,t,n);case b:return function(e,t,n){var r=t.type._context,o=t.pendingProps,a=t.memoizedProps,i=o.value;"value"in o||wy||(wy=!0,l("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?"));var s=t.type.propTypes;if(s&&Jc(s,o,"prop","Context.Provider"),Hf(t,r,i),null!==a){var u=a.value;if(Ss(u,i)){if(a.children===o.children&&!hd())return Ty(e,t,n)}else Yf(t,r,n)}return Kv(e,t,o.children,n),t.child}(e,t,n);case g:return function(e,t,n){var r=t.type;void 0===r._context?r!==r.Consumer&&(Cy||(Cy=!0,l("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?"))):r=r._context;var o=t.pendingProps.children;"function"!=typeof o&&l("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it."),Qf(t,n);var a,i=Gf(r);return Go(t),Qv.current=t,Et(!0),a=o(i),Et(!1),Ko(),t.flags|=Ur,Kv(e,t,a,n),t.child}(e,t,n);case E:var D=t.type,I=If(D,t.pendingProps);if(t.type!==t.elementType){var L=D.propTypes;L&&Jc(L,I,"prop",pt(D))}return Zv(e,t,D,I=If(D.type,I),n);case x:return Jv(e,t,t.type,t.pendingProps,n);case S:var B=t.type,N=t.pendingProps;return function(e,t,n,r,o){var a;return _y(e,t),t.tag=c,md(n)?(a=!0,wd(t)):a=!1,Qf(t,o),$p(t,n,r),Vp(t,n,r,o),oy(null,t,n,!0,a,o)}(e,t,B,t.elementType===B?N:If(B,N),n);case T:return by(e,t,n);case O:break;case R:return ey(e,t,n)}throw new Error("Unknown unit of work tag ("+t.tag+"). This error is likely caused by a bug in React. Please file an issue.")}function Py(e){e.flags|=Wr}function jy(e){e.flags|=Qr,e.flags|=io}function Dy(e,t){if(!bf())switch(e.tailMode){case"hidden":for(var n=e.tail,r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?e.tail=null:r.sibling=null;break;case"collapsed":for(var o=e.tail,a=null;null!==o;)null!==o.alternate&&(a=o),o=o.sibling;null===a?t||null===e.tail?e.tail=null:e.tail.sibling=null:a.sibling=null}}function Iy(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=ha,r=zr;if(t){if((e.mode&la)!==aa){for(var o=e.selfBaseDuration,a=e.child;null!==a;)n=vi(n,vi(a.lanes,a.childLanes)),r|=a.subtreeFlags&vo,r|=a.flags&vo,o+=a.treeBaseDuration,a=a.sibling;e.treeBaseDuration=o}else for(var i=e.child;null!==i;)n=vi(n,vi(i.lanes,i.childLanes)),r|=i.subtreeFlags&vo,r|=i.flags&vo,i.return=e,i=i.sibling;e.subtreeFlags|=r}else{if((e.mode&la)!==aa){for(var l=e.actualDuration,s=e.selfBaseDuration,u=e.child;null!==u;)n=vi(n,vi(u.lanes,u.childLanes)),r|=u.subtreeFlags,r|=u.flags,l+=u.actualDuration,s+=u.treeBaseDuration,u=u.sibling;e.actualDuration=l,e.treeBaseDuration=s}else for(var c=e.child;null!==c;)n=vi(n,vi(c.lanes,c.childLanes)),r|=c.subtreeFlags,r|=c.flags,c.return=e,c=c.sibling;e.subtreeFlags|=r}return e.childLanes=n,t}function Ly(e,t,n){if(Gd&&null!==Qd&&(t.mode&ia)!==aa&&(t.flags&qr)===zr)return vf(t),yf(),t.flags|=Yr|no|ro,!1;var r=mf(t);if(null!==n&&null!==n.dehydrated){if(null===e){if(!r)throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");if(ff(t),Iy(t),(t.mode&la)!==aa)if(null!==n){var o=t.child;null!==o&&(t.treeBaseDuration-=o.treeBaseDuration)}return!1}if(yf(),(t.flags&qr)===zr&&(t.memoizedState=null),t.flags|=Wr,Iy(t),(t.mode&la)!==aa&&null!==n){var a=t.child;null!==a&&(t.treeBaseDuration-=a.treeBaseDuration)}return!1}return gf(),!0}function By(e,t,n){var r=t.pendingProps;switch(Vd(t),t.tag){case d:case C:case x:case u:case w:case v:case y:case k:case g:case E:return Iy(t),null;case c:return md(t.type)&&vd(t),Iy(t),null;case f:var o=t.stateNode;if(sh(t),yd(t),Oh(),o.pendingContext&&(o.context=o.pendingContext,o.pendingContext=null),null===e||null===e.child)if(mf(t))Py(t);else if(null!==e)e.memoizedState.isDehydrated&&(t.flags&Yr)===zr||(t.flags|=Gr,gf());return Ay(e,t),Iy(t),null;case h:dh(t);var a=ih(),i=t.type;if(null!==e&&null!=t.stateNode)Ey(e,t,i,r,a),e.ref!==t.ref&&jy(t);else{if(!r){if(null===t.stateNode)throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");return Iy(t),null}var l=uh();if(mf(t))(function(e,t,n){var r=e.stateNode,o=!Kd,a=jc(r,e.type,e.memoizedProps,0,n,e,o);return e.updateQueue=a,null!==a})(t,0,l)&&Py(t);else{var s=hc(i,r,a,l,t);ky(s,t,!1,!1),t.stateNode=s,function(e,t,n,r,o){switch(Hu(e,t,n),t){case"button":case"input":case"select":case"textarea":return!!n.autoFocus;case"img":return!0;default:return!1}}(s,i,r)&&Py(t)}null!==t.ref&&jy(t)}return Iy(t),null;case m:var _=r;if(e&&null!=t.stateNode){var I=e.memoizedProps;xy(e,t,I,_)}else{if("string"!=typeof _&&null===t.stateNode)throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");var L=ih(),B=uh();mf(t)?df(t)&&Py(t):t.stateNode=vc(_,L,B,t)}return Iy(t),null;case A:wh(t);var z=t.memoizedState;if(null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated)if(!Ly(e,t,z))return t.flags&ro?t:null;if((t.flags&qr)!==zr)return t.lanes=n,(t.mode&la)!==aa&&Ov(t),t;var U=null!==z;if(U!==(null!==e&&null!==e.memoizedState))if(U)if(t.child.flags|=Zr,(t.mode&ia)!==aa)null===e&&(!0!==t.memoizedProps.unstable_avoidThisFallback||!M)||vh(mh.current,ph)?mb===nb&&(mb=ab):vw();if(null!==t.updateQueue&&(t.flags|=Wr),Iy(t),(t.mode&la)!==aa&&U){var F=t.child;null!==F&&(t.treeBaseDuration-=F.treeBaseDuration)}return null;case p:return sh(t),Ay(e,t),null===e&&hu(t.stateNode.containerInfo),Iy(t),null;case b:return Vf(t.type._context,t),Iy(t),null;case S:return md(t.type)&&vd(t),Iy(t),null;case T:wh(t);var W=t.memoizedState;if(null===W)return Iy(t),null;var $=(t.flags&qr)!==zr,H=W.rendering;if(null===H)if($)Dy(W,!1);else{if(!(mb===nb&&(null===e||(e.flags&qr)===zr)))for(var V=t.child;null!==V;){var q=Ah(V);if(null!==q){$=!0,t.flags|=qr,Dy(W,!1);var Y=q.updateQueue;return null!==Y&&(t.updateQueue=Y,t.flags|=Wr),t.subtreeFlags=zr,eh(t,n),bh(t,gh(mh.current,hh)),t.child}V=V.sibling}null!==W.tail&&Po()>Ob()&&(t.flags|=qr,$=!0,Dy(W,!1),t.lanes=Va)}else{if(!$){var Q=Ah(H);if(null!==Q){t.flags|=qr,$=!0;var G=Q.updateQueue;if(null!==G&&(t.updateQueue=G,t.flags|=Wr),Dy(W,!0),null===W.tail&&"hidden"===W.tailMode&&!H.alternate&&!bf())return Iy(t),null}else 2*Po()-W.renderingStartTime>Ob()&&n!==Ka&&(t.flags|=qr,$=!0,Dy(W,!1),t.lanes=Va)}if(W.isBackwards)H.sibling=t.child,t.child=H;else{var K=W.last;null!==K?K.sibling=H:t.child=H,W.last=H}}if(null!==W.tail){var X=W.tail;W.rendering=X,W.tail=X.sibling,W.renderingStartTime=Po(),X.sibling=null;var Z=mh.current;return bh(t,Z=$?gh(Z,hh):yh(Z)),X}return Iy(t),null;case O:break;case R:case P:cw(t);var J=null!==t.memoizedState;if(null!==e)null!==e.memoizedState===J||N||(t.flags|=Zr);return J&&(t.mode&ia)!==aa?hi(pb,Ka)&&(Iy(t),t.subtreeFlags&(Fr|Wr)&&(t.flags|=Zr)):Iy(t),null;case j:case D:return null}throw new Error("Unknown unit of work tag ("+t.tag+"). This error is likely caused by a bug in React. Please file an issue.")}function Ny(e,t,n){switch(Vd(t),t.tag){case c:md(t.type)&&vd(t);var r=t.flags;return r&ro?(t.flags=r&~ro|qr,(t.mode&la)!==aa&&Ov(t),t):null;case f:t.stateNode;sh(t),yd(t),Oh();var o=t.flags;return(o&ro)!==zr&&(o&qr)===zr?(t.flags=o&~ro|qr,t):null;case h:return dh(t),null;case A:wh(t);var a=t.memoizedState;if(null!==a&&null!==a.dehydrated){if(null===t.alternate)throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");yf()}var i=t.flags;return i&ro?(t.flags=i&~ro|qr,(t.mode&la)!==aa&&Ov(t),t):null;case T:return wh(t),null;case p:return sh(t),null;case b:return Vf(t.type._context,t),null;case R:case P:return cw(t),null;default:return null}}function My(e,t,n){switch(Vd(t),t.tag){case c:var r=t.type.childContextTypes;null!=r&&vd(t);break;case f:t.stateNode;sh(t),yd(t),Oh();break;case h:dh(t);break;case p:sh(t);break;case A:case T:wh(t);break;case b:Vf(t.type._context,t);break;case R:case P:cw(t)}}ky=function(e,t,n,r){for(var o,a,i=t.child;null!==i;){if(i.tag===h||i.tag===m)o=e,a=i.stateNode,o.appendChild(a);else if(i.tag===p);else if(null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)return;for(;null===i.sibling;){if(null===i.return||i.return===t)return;i=i.return}i.sibling.return=i.return,i=i.sibling}},Ay=function(e,t){},Ey=function(e,t,n,r,o){var a=e.memoizedProps;if(a!==r){var i=function(e,t,n,r,o,a){var i=a;if(typeof r.children!=typeof n.children&&("string"==typeof r.children||"number"==typeof r.children)){var l=""+r.children,s=Zu(i.ancestorInfo,t);Xu(null,l,s)}return Vu(e,t,n,r)}(t.stateNode,n,a,r,0,uh());t.updateQueue=i,i&&Py(t)}},xy=function(e,t,n,r){n!==r&&Py(t)};var zy=null;zy=new Set;var Uy=!1,Fy=!1,Wy="function"==typeof WeakSet?WeakSet:Set,$y=null,Hy=null,Vy=null;var qy=function(e,t){if(t.props=e.memoizedProps,t.state=e.memoizedState,e.mode&la)try{_v(),t.componentWillUnmount()}finally{Cv(e)}else t.componentWillUnmount()};function Yy(e,t){try{rg(Sh,e)}catch(n){_w(e,t,n)}}function Qy(e,t,n){try{qy(e,n)}catch(n){_w(e,t,n)}}function Gy(e,t){try{lg(e)}catch(n){_w(e,t,n)}}function Ky(e,t){var n=e.ref;if(null!==n)if("function"==typeof n){var r;try{if($&&H&&e.mode&la)try{_v(),r=n(null)}finally{Cv(e)}else r=n(null)}catch(n){_w(e,t,n)}"function"==typeof r&&l("Unexpected return value from a callback ref in %s. A callback ref should not return a function.",mt(e))}else n.current=null}function Xy(e,t,n){try{n()}catch(n){_w(e,t,n)}}var Zy=!1;function Jy(e,t){pc(e.containerInfo),$y=t,function(){for(;null!==$y;){var e=$y,t=e.child;(e.subtreeFlags&fo)!==zr&&null!==t?(t.return=e,$y=t):eg()}}();var n=Zy;return Zy=!1,null,n}function eg(){for(;null!==$y;){var e=$y;At(e);try{tg(e)}catch(t){_w(e,e.return,t)}kt();var t=e.sibling;if(null!==t)return t.return=e.return,void($y=t);$y=e.return}}function tg(e){var t,n=e.alternate;if((e.flags&Gr)!==zr){switch(At(e),e.tag){case u:case w:case x:break;case c:if(null!==n){var r=n.memoizedProps,o=n.memoizedState,a=e.stateNode;e.type!==e.elementType||Vv||(a.props!==e.memoizedProps&&l("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",mt(e)||"instance"),a.state!==e.memoizedState&&l("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",mt(e)||"instance"));var i=a.getSnapshotBeforeUpdate(e.elementType===e.type?r:If(e.type,r),o),s=zy;void 0!==i||s.has(e.type)||(s.add(e.type),l("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.",mt(e))),a.__reactInternalSnapshotBeforeUpdate=i}break;case f:var d=e.stateNode;(t=d.containerInfo).nodeType===yn?t.textContent="":t.nodeType===wn&&t.documentElement&&t.removeChild(t.documentElement);break;case h:case m:case p:case S:break;default:throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.")}kt()}}function ng(e,t,n){var r,o=t.updateQueue,a=null!==o?o.lastEffect:null;if(null!==a){var i=a.next,l=i;do{if((l.tag&e)===e){var s=l.destroy;l.destroy=void 0,void 0!==s&&((e&_h)!==Eh?(r=t,null!==Wo&&"function"==typeof Wo.markComponentPassiveEffectUnmountStarted&&Wo.markComponentPassiveEffectUnmountStarted(r)):(e&Sh)!==Eh&&Zo(t),(e&Ch)!==Eh&&Hw(!0),Xy(t,n,s),(e&Ch)!==Eh&&Hw(!1),(e&_h)!==Eh?null!==Wo&&"function"==typeof Wo.markComponentPassiveEffectUnmountStopped&&Wo.markComponentPassiveEffectUnmountStopped():(e&Sh)!==Eh&&Jo())}l=l.next}while(l!==i)}}function rg(e,t){var n,r=t.updateQueue,o=null!==r?r.lastEffect:null;if(null!==o){var a=o.next,i=a;do{if((i.tag&e)===e){(e&_h)!==Eh?(n=t,null!==Wo&&"function"==typeof Wo.markComponentPassiveEffectMountStarted&&Wo.markComponentPassiveEffectMountStarted(n)):(e&Sh)!==Eh&&Xo(t);var s=i.create;(e&Ch)!==Eh&&Hw(!0),i.destroy=s(),(e&Ch)!==Eh&&Hw(!1),(e&_h)!==Eh?null!==Wo&&"function"==typeof Wo.markComponentPassiveEffectMountStopped&&Wo.markComponentPassiveEffectMountStopped():(e&Sh)!==Eh&&null!==Wo&&"function"==typeof Wo.markComponentLayoutEffectMountStopped&&Wo.markComponentLayoutEffectMountStopped();var u=i.destroy;if(void 0!==u&&"function"!=typeof u){var c=void 0;l("%s must not return anything besides a function, which is used for clean-up.%s",c=(i.tag&Sh)!==zr?"useLayoutEffect":(i.tag&Ch)!==zr?"useInsertionEffect":"useEffect",null===u?" You returned null. If your effect does not require clean up, return undefined (or nothing).":"function"==typeof u.then?"\n\nIt looks like you wrote "+c+"(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n"+c+"(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching":" You returned: "+u)}}i=i.next}while(i!==a)}}function og(e,t){if((t.flags&Wr)!==zr&&t.tag===k){var n=t.stateNode.passiveEffectDuration,r=t.memoizedProps,o=r.id,a=r.onPostCommit,i=wv(),l=null===t.alternate?"mount":"update";bv()&&(l="nested-update"),"function"==typeof a&&a(o,l,n,i);var s=t.return;e:for(;null!==s;){switch(s.tag){case f:s.stateNode.passiveEffectDuration+=n;break e;case k:s.stateNode.passiveEffectDuration+=n;break e}s=s.return}}}function ag(e,t,n,r){if((n.flags&ho)!==zr)switch(n.tag){case u:case w:case x:if(!Fy)if(n.mode&la)try{_v(),rg(Sh|xh,n)}finally{Cv(n)}else rg(Sh|xh,n);break;case c:var o=n.stateNode;if(n.flags&Wr&&!Fy)if(null===t)if(n.type!==n.elementType||Vv||(o.props!==n.memoizedProps&&l("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",mt(n)||"instance"),o.state!==n.memoizedState&&l("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",mt(n)||"instance")),n.mode&la)try{_v(),o.componentDidMount()}finally{Cv(n)}else o.componentDidMount();else{var a=n.elementType===n.type?t.memoizedProps:If(n.type,t.memoizedProps),i=t.memoizedState;if(n.type!==n.elementType||Vv||(o.props!==n.memoizedProps&&l("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",mt(n)||"instance"),o.state!==n.memoizedState&&l("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",mt(n)||"instance")),n.mode&la)try{_v(),o.componentDidUpdate(a,i,o.__reactInternalSnapshotBeforeUpdate)}finally{Cv(n)}else o.componentDidUpdate(a,i,o.__reactInternalSnapshotBeforeUpdate)}var s=n.updateQueue;null!==s&&(n.type!==n.elementType||Vv||(o.props!==n.memoizedProps&&l("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",mt(n)||"instance"),o.state!==n.memoizedState&&l("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",mt(n)||"instance")),wp(0,s,o));break;case f:var d=n.updateQueue;if(null!==d){var v=null;if(null!==n.child)switch(n.child.tag){case h:case c:v=n.child.stateNode}wp(0,d,v)}break;case h:var y=n.stateNode;if(null===t&&n.flags&Wr)!function(e,t,n,r){switch(t){case"button":case"input":case"select":case"textarea":return void(n.autoFocus&&e.focus());case"img":n.src&&(e.src=n.src)}}(y,n.type,n.memoizedProps);break;case m:case p:break;case k:var g=n.memoizedProps,b=g.onCommit,E=g.onRender,C=n.stateNode.effectDuration,_=wv(),j=null===t?"mount":"update";bv()&&(j="nested-update"),"function"==typeof E&&E(n.memoizedProps.id,j,n.actualDuration,n.treeBaseDuration,n.actualStartTime,_),"function"==typeof b&&b(n.memoizedProps.id,j,C,_),L=n,Bb.push(L),Db||(Db=!0,Fw(Lo,(function(){return Ew(),null})));var I=n.return;e:for(;null!==I;){switch(I.tag){case f:I.stateNode.effectDuration+=C;break e;case k:I.stateNode.effectDuration+=C;break e}I=I.return}break;case A:!function(e,t){var n=t.memoizedState;if(null===n){var r=t.alternate;if(null!==r){var o=r.memoizedState;if(null!==o){var a=o.dehydrated;null!==a&&function(e){rl(e)}(a)}}}}(0,n);break;case T:case S:case O:case R:case P:case D:break;default:throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.")}var L;Fy||n.flags&Qr&&lg(n)}function ig(e){switch(e.tag){case u:case w:case x:if(e.mode&la)try{_v(),Yy(e,e.return)}finally{Cv(e)}else Yy(e,e.return);break;case c:var t=e.stateNode;"function"==typeof t.componentDidMount&&function(e,t,n){try{n.componentDidMount()}catch(n){_w(e,t,n)}}(e,e.return,t),Gy(e,e.return);break;case h:Gy(e,e.return)}}function lg(e){var t=e.ref;if(null!==t){var n,r=e.stateNode;if(e.tag,n=r,"function"==typeof t){var o;if(e.mode&la)try{_v(),o=t(n)}finally{Cv(e)}else o=t(n);"function"==typeof o&&l("Unexpected return value from a callback ref in %s. A callback ref should not return a function.",mt(e))}else t.hasOwnProperty("current")||l("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().",mt(e)),t.current=n}}function sg(e){var t,n=e.alternate;if(null!==n&&(e.alternate=null,sg(n)),e.child=null,e.deletions=null,e.sibling=null,e.tag===h){var r=e.stateNode;null!==r&&(delete(t=r)[Lc],delete t[Bc],delete t[Mc],delete t[zc],delete t[Uc])}e.stateNode=null,e._debugOwner=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function ug(e){return e.tag===h||e.tag===f||e.tag===p}function cg(e){var t=e;e:for(;;){for(;null===t.sibling;){if(null===t.return||ug(t.return))return null;t=t.return}for(t.sibling.return=t.return,t=t.sibling;t.tag!==h&&t.tag!==m&&t.tag!==_;){if(t.flags&Fr)continue e;if(null===t.child||t.tag===p)continue e;t.child.return=t,t=t.child}if(!(t.flags&Fr))return t.stateNode}}function dg(e){var t=function(e){for(var t=e.return;null!==t;){if(ug(t))return t;t=t.return}throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.")}(e);switch(t.tag){case h:var n=t.stateNode;t.flags&Hr&&(Ec(n),t.flags&=~Hr),pg(e,cg(e),n);break;case f:case p:var r=t.stateNode.containerInfo;fg(e,cg(e),r);break;default:throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.")}}function fg(e,t,n){var r=e.tag;if(r===h||r===m){var o=e.stateNode;t?function(e,t,n){e.nodeType===bn?e.parentNode.insertBefore(t,n):e.insertBefore(t,n)}(n,o,t):function(e,t){var n;e.nodeType===bn?(n=e.parentNode).insertBefore(t,e):(n=e).appendChild(t),null==e._reactRootContainer&&null===n.onclick&&$u(n)}(n,o)}else if(r===p);else{var a=e.child;if(null!==a){fg(a,t,n);for(var i=a.sibling;null!==i;)fg(i,t,n),i=i.sibling}}}function pg(e,t,n){var r=e.tag;if(r===h||r===m){var o=e.stateNode;t?function(e,t,n){e.insertBefore(t,n)}(n,o,t):function(e,t){e.appendChild(t)}(n,o)}else if(r===p);else{var a=e.child;if(null!==a){pg(a,t,n);for(var i=a.sibling;null!==i;)pg(i,t,n),i=i.sibling}}}var hg=null,mg=!1;function vg(e,t,n){var r,o,a=t;e:for(;null!==a;){switch(a.tag){case h:hg=a.stateNode,mg=!1;break e;case f:case p:hg=a.stateNode.containerInfo,mg=!0;break e}a=a.return}if(null===hg)throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");gg(e,t,n),hg=null,mg=!1,null!==(o=(r=n).alternate)&&(o.return=null),r.return=null}function yg(e,t,n){for(var r=n.child;null!==r;)gg(e,t,r),r=r.sibling}function gg(e,t,n){switch(function(e){if(Fo&&"function"==typeof Fo.onCommitFiberUnmount)try{Fo.onCommitFiberUnmount(Uo,e)}catch(e){$o||($o=!0,l("React instrumentation encountered an error: %s",e))}}(n),n.tag){case h:Fy||Ky(n,t);case m:var r=hg,o=mg;return hg=null,yg(e,t,n),mg=o,void(null!==(hg=r)&&(mg?(C=hg,S=n.stateNode,C.nodeType===bn?C.parentNode.removeChild(S):C.removeChild(S)):function(e,t){e.removeChild(t)}(hg,n.stateNode)));case _:return void(null!==hg&&(mg?function(e,t){e.nodeType===bn?xc(e.parentNode,t):e.nodeType===yn&&xc(e,t),rl(e)}(hg,n.stateNode):xc(hg,n.stateNode)));case p:var a=hg,i=mg;return hg=n.stateNode.containerInfo,mg=!0,yg(e,t,n),hg=a,void(mg=i);case u:case w:case E:case x:if(!Fy){var s=n.updateQueue;if(null!==s){var d=s.lastEffect;if(null!==d){var f=d.next,v=f;do{var y=v,g=y.destroy,b=y.tag;void 0!==g&&((b&Ch)!==Eh?Xy(n,t,g):(b&Sh)!==Eh&&(Zo(n),n.mode&la?(_v(),Xy(n,t,g),Cv(n)):Xy(n,t,g),Jo())),v=v.next}while(v!==f)}}}return void yg(e,t,n);case c:if(!Fy){Ky(n,t);var k=n.stateNode;"function"==typeof k.componentWillUnmount&&Qy(n,t,k)}return void yg(e,t,n);case O:return void yg(e,t,n);case R:if(n.mode&ia){var A=Fy;Fy=A||null!==n.memoizedState,yg(e,t,n),Fy=A}else yg(e,t,n);break;default:return void yg(e,t,n)}var C,S}function bg(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Wy),t.forEach((function(t){var r=Pw.bind(null,e,t);if(!n.has(t)){if(n.add(t),Ho){if(null===Hy||null===Vy)throw Error("Expected finished root and lanes to be set. This is a bug in React.");zw(Vy,Hy)}t.then(r,r)}}))}}function wg(e,t,n){var r=t.deletions;if(null!==r)for(var o=0;o<r.length;o++){var a=r[o];try{vg(e,t,a)}catch(e){_w(a,t,e)}}var i=yt;if(t.subtreeFlags&po)for(var l=t.child;null!==l;)At(l),kg(l,e),l=l.sibling;At(i)}function kg(e,t,n){var r=e.alternate,o=e.flags;switch(e.tag){case u:case w:case E:case x:if(wg(t,e),Ag(e),o&Wr){try{ng(Ch|xh,e,e.return),rg(Ch|xh,e)}catch(t){_w(e,e.return,t)}if(e.mode&la){try{_v(),ng(Sh|xh,e,e.return)}catch(t){_w(e,e.return,t)}Cv(e)}else try{ng(Sh|xh,e,e.return)}catch(t){_w(e,e.return,t)}}return;case c:return wg(t,e),Ag(e),void(o&Qr&&null!==r&&Ky(r,r.return));case h:if(wg(t,e),Ag(e),o&Qr&&null!==r&&Ky(r,r.return),e.flags&Hr){var a=e.stateNode;try{Ec(a)}catch(t){_w(e,e.return,t)}}if(o&Wr){var i=e.stateNode;if(null!=i){var l=e.memoizedProps,s=null!==r?r.memoizedProps:l,d=e.type,v=e.updateQueue;if(e.updateQueue=null,null!==v)try{!function(e,t,n,r,o,a){qu(e,t,n,r,o),Gc(e,o)}(i,v,d,s,l)}catch(t){_w(e,e.return,t)}}}return;case m:if(wg(t,e),Ag(e),o&Wr){if(null===e.stateNode)throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");var y=e.stateNode,g=e.memoizedProps;null!==r&&r.memoizedProps;try{!function(e,t,n){e.nodeValue=n}(y,0,g)}catch(t){_w(e,e.return,t)}}return;case f:if(wg(t,e),Ag(e),o&Wr)if(null!==r)if(r.memoizedState.isDehydrated)try{rl(t.containerInfo)}catch(t){_w(e,e.return,t)}return;case p:return wg(t,e),void Ag(e);case A:wg(t,e),Ag(e);var b=e.child;if(b.flags&Zr){var k=b.stateNode,C=null!==b.memoizedState;if(k.isHidden=C,C)null!==b.alternate&&null!==b.alternate.memoizedState||(Eb=Po())}if(o&Wr){try{!function(e){e.memoizedState}(e)}catch(t){_w(e,e.return,t)}bg(e)}return;case R:var S=null!==r&&null!==r.memoizedState;if(e.mode&ia){var _=Fy;Fy=_||S,wg(t,e),Fy=_}else wg(t,e);if(Ag(e),o&Zr){var j=e.stateNode,D=null!==e.memoizedState,I=e;if(j.isHidden=D,D&&!S&&(I.mode&ia)!==aa){$y=I;for(var L=I.child;null!==L;)$y=L,Sg(L),L=L.sibling}!function(e,t){for(var n=null,r=e;;){if(r.tag===h){if(null===n){n=r;try{var o=r.stateNode;t?Cc(o):Sc(r.stateNode,r.memoizedProps)}catch(t){_w(e,e.return,t)}}}else if(r.tag===m){if(null===n)try{var a=r.stateNode;t?a.nodeValue="":_c(a,r.memoizedProps)}catch(t){_w(e,e.return,t)}}else if((r.tag!==R&&r.tag!==P||null===r.memoizedState||r===e)&&null!==r.child){r.child.return=r,r=r.child;continue}if(r===e)return;for(;null===r.sibling;){if(null===r.return||r.return===e)return;n===r&&(n=null),r=r.return}n===r&&(n=null),r.sibling.return=r.return,r=r.sibling}}(I,D)}return;case T:return wg(t,e),Ag(e),void(o&Wr&&bg(e));case O:return;default:return wg(t,e),void Ag(e)}}function Ag(e){var t=e.flags;if(t&Fr){try{dg(e)}catch(t){_w(e,e.return,t)}e.flags&=~Fr}t&Xr&&(e.flags&=~Xr)}function Eg(e,t,n){Hy=n,Vy=t,$y=e,xg(e,t,n),Hy=null,Vy=null}function xg(e,t,n){for(var r=(e.mode&ia)!==aa;null!==$y;){var o=$y,a=o.child;if(o.tag===R&&r){var i=null!==o.memoizedState||Uy;if(i){Cg(e,t,n);continue}var l=o.alternate,s=null!==l&&null!==l.memoizedState,u=Uy,c=Fy;Uy=i,(Fy=s||Fy)&&!c&&($y=o,Tg(o));for(var d=a;null!==d;)$y=d,xg(d,t,n),d=d.sibling;$y=o,Uy=u,Fy=c,Cg(e,t,n)}else(o.subtreeFlags&ho)!==zr&&null!==a?(a.return=o,$y=a):Cg(e,t,n)}}function Cg(e,t,n){for(;null!==$y;){var r=$y;if((r.flags&ho)!==zr){var o=r.alternate;At(r);try{ag(0,o,r)}catch(e){_w(r,r.return,e)}kt()}if(r===e)return void($y=null);var a=r.sibling;if(null!==a)return a.return=r.return,void($y=a);$y=r.return}}function Sg(e){for(;null!==$y;){var t=$y,n=t.child;switch(t.tag){case u:case w:case E:case x:if(t.mode&la)try{_v(),ng(Sh,t,t.return)}finally{Cv(t)}else ng(Sh,t,t.return);break;case c:Ky(t,t.return);var r=t.stateNode;"function"==typeof r.componentWillUnmount&&Qy(t,t.return,r);break;case h:Ky(t,t.return);break;case R:if(null!==t.memoizedState){_g(e);continue}}null!==n?(n.return=t,$y=n):_g(e)}}function _g(e){for(;null!==$y;){var t=$y;if(t===e)return void($y=null);var n=t.sibling;if(null!==n)return n.return=t.return,void($y=n);$y=t.return}}function Tg(e){for(;null!==$y;){var t=$y,n=t.child;if(t.tag===R)if(null!==t.memoizedState){Og(e);continue}null!==n?(n.return=t,$y=n):Og(e)}}function Og(e){for(;null!==$y;){var t=$y;At(t);try{ig(t)}catch(e){_w(t,t.return,e)}if(kt(),t===e)return void($y=null);var n=t.sibling;if(null!==n)return n.return=t.return,void($y=n);$y=t.return}}function Rg(e,t,n,r){$y=t,function(e,t,n,r){for(;null!==$y;){var o=$y,a=o.child;(o.subtreeFlags&mo)!==zr&&null!==a?(a.return=o,$y=a):Pg(e,t,n,r)}}(t,e,n,r)}function Pg(e,t,n,r){for(;null!==$y;){var o=$y;if((o.flags&Kr)!==zr){At(o);try{jg(t,o,n,r)}catch(e){_w(o,o.return,e)}kt()}if(o===e)return void($y=null);var a=o.sibling;if(null!==a)return a.return=o.return,void($y=a);$y=o.return}}function jg(e,t,n,r){switch(t.tag){case u:case w:case x:if(t.mode&la){Tv();try{rg(_h|xh,t)}finally{Sv(t)}}else rg(_h|xh,t)}}function Dg(e){$y=e,function(){for(;null!==$y;){var e=$y,t=e.child;if(($y.flags&$r)!==zr){var n=e.deletions;if(null!==n){for(var r=0;r<n.length;r++){var o=n[r];$y=o,Bg(o,e)}var a=e.alternate;if(null!==a){var i=a.child;if(null!==i){a.child=null;do{var l=i.sibling;i.sibling=null,i=l}while(null!==i)}}$y=e}}(e.subtreeFlags&mo)!==zr&&null!==t?(t.return=e,$y=t):Ig()}}()}function Ig(){for(;null!==$y;){var e=$y;(e.flags&Kr)!==zr&&(At(e),Lg(e),kt());var t=e.sibling;if(null!==t)return t.return=e.return,void($y=t);$y=e.return}}function Lg(e){switch(e.tag){case u:case w:case x:e.mode&la?(Tv(),ng(_h|xh,e,e.return),Sv(e)):ng(_h|xh,e,e.return)}}function Bg(e,t){for(;null!==$y;){var n=$y;At(n),Mg(n,t),kt();var r=n.child;null!==r?(r.return=n,$y=r):Ng(e)}}function Ng(e){for(;null!==$y;){var t=$y,n=t.sibling,r=t.return;if(sg(t),t===e)return void($y=null);if(null!==n)return n.return=r,void($y=n);$y=r}}function Mg(e,t){switch(e.tag){case u:case w:case x:e.mode&la?(Tv(),ng(_h,e,t),Sv(e)):ng(_h,e,t)}}function zg(e){switch(e.tag){case u:case w:case x:try{rg(Sh|xh,e)}catch(t){_w(e,e.return,t)}break;case c:var t=e.stateNode;try{t.componentDidMount()}catch(t){_w(e,e.return,t)}}}function Ug(e){switch(e.tag){case u:case w:case x:try{rg(_h|xh,e)}catch(t){_w(e,e.return,t)}}}function Fg(e){switch(e.tag){case u:case w:case x:try{ng(Sh|xh,e,e.return)}catch(t){_w(e,e.return,t)}break;case c:var t=e.stateNode;"function"==typeof t.componentWillUnmount&&Qy(e,e.return,t)}}function Wg(e){switch(e.tag){case u:case w:case x:try{ng(_h|xh,e,e.return)}catch(t){_w(e,e.return,t)}}}if("function"==typeof Symbol&&Symbol.for){var $g=Symbol.for;$g("selector.component"),$g("selector.has_pseudo_class"),$g("selector.role"),$g("selector.test_id"),$g("selector.text")}var Hg=[];var Vg=o.ReactCurrentActQueue;function qg(){var e="undefined"!=typeof IS_REACT_ACT_ENVIRONMENT?IS_REACT_ACT_ENVIRONMENT:void 0;return e||null===Vg.current||l("The current testing environment is not configured to support act(...)"),e}var Yg=Math.ceil,Qg=o.ReactCurrentDispatcher,Gg=o.ReactCurrentOwner,Kg=o.ReactCurrentBatchConfig,Xg=o.ReactCurrentActQueue,Zg=0,Jg=1,eb=2,tb=4,nb=0,rb=1,ob=2,ab=3,ib=4,lb=5,sb=6,ub=Zg,cb=null,db=null,fb=ha,pb=ha,hb=od(ha),mb=nb,vb=null,yb=ha,gb=ha,bb=ha,wb=ha,kb=null,Ab=null,Eb=0,xb=500,Cb=1/0,Sb=500,_b=null;function Tb(){Cb=Po()+Sb}function Ob(){return Cb}var Rb=!1,Pb=null,jb=null,Db=!1,Ib=null,Lb=ha,Bb=[],Nb=null,Mb=50,zb=0,Ub=null,Fb=!1,Wb=!1,$b=50,Hb=0,Vb=null,qb=Za,Yb=ha,Qb=!1;function Gb(){return cb}function Kb(){return(ub&(eb|tb))!==Zg?Po():qb!==Za?qb:qb=Po()}function Xb(e){if((e.mode&ia)===aa)return va;if((ub&eb)!==Zg&&fb!==ha)return di(fb);if(kf.transition!==Af){if(null!==Kg.transition){var t=Kg.transition;t._updatedFibers||(t._updatedFibers=new Set),t._updatedFibers.add(e)}return Yb===ma&&(Yb=ui()),Yb}var n,r=Li();return r!==ma?r:void 0===(n=window.event)?ji:fl(n.type)}function Zb(e){var t;return(e.mode&ia)===aa?va:(t=ei,((ei<<=1)&za)===ha&&(ei=Ua),t)}function Jb(e,t,n,r){!function(){if(zb>Mb)throw zb=0,Ub=null,new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");Hb>$b&&(Hb=0,Vb=null,l("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render."))}(),Qb&&l("useInsertionEffect must not schedule updates."),Fb&&(Wb=!0),wi(e,n,r),(ub&eb)!==ha&&e===cb?function(e){if(gt&&!Ym)switch(e.tag){case u:case w:case x:var t=db&&mt(db)||"Unknown",n=t;if(!Nw.has(n))Nw.add(n),l("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render",mt(e)||"Unknown",t,t);break;case c:Mw||(l("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state."),Mw=!0)}}(t):(Ho&&Ei(e,t,n),function(e){if(e.mode&ia){if(!qg())return}else{if(t="undefined"!=typeof IS_REACT_ACT_ENVIRONMENT?IS_REACT_ACT_ENVIRONMENT:void 0,"undefined"==typeof jest||!1===t)return;if(ub!==Zg)return;if(e.tag!==u&&e.tag!==w&&e.tag!==x)return}var t;if(null===Xg.current){var n=yt;try{At(e),l("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act",mt(e))}finally{n?At(e):kt()}}}(t),e===cb&&((ub&eb)===Zg&&(bb=vi(bb,n)),mb===ib&&ow(e,fb)),ew(e,r),n!==va||ub!==Zg||(t.mode&ia)!==aa||Xg.isBatchingLegacy||(Tb(),Od()))}function ew(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.pendingLanes,r=e.suspendedLanes,o=e.pingedLanes,a=e.expirationTimes,i=n;i>0;){var l=fi(i),s=1<<l,u=a[l];u===Za?(s&r)!==ha&&(s&o)===ha||(a[l]=ri(s,t)):u<=t&&(e.expiredLanes|=s),i&=~s}}(e,t);var r=ni(e,e===cb?fb:ha);if(r===ha)return null!==n&&Ww(n),e.callbackNode=null,void(e.callbackPriority=ma);var o=ci(r),a=e.callbackPriority;if(a!==o||null!==Xg.current&&n!==Uw){var i,s;if(null!=n&&Ww(n),o===va)e.tag===Ed?(null!==Xg.isBatchingLegacy&&(Xg.didScheduleLegacyUpdate=!0),s=aw.bind(null,e),Sd=!0,Td(s)):Td(aw.bind(null,e)),null!==Xg.current?Xg.current.push(Rd):kc((function(){(ub&(eb|tb))===Zg&&Rd()})),i=null;else{var u;switch(Mi(r)){case Ri:u=Do;break;case Pi:u=Io;break;case ji:u=Lo;break;case Di:u=No;break;default:u=Lo}i=Fw(u,tw.bind(null,e))}e.callbackPriority=o,e.callbackNode=i}else null==n&&a!==va&&l("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.")}function tw(e,t){if(yv=!1,gv=!1,qb=Za,Yb=ha,(ub&(eb|tb))!==Zg)throw new Error("Should not already be working.");var n=e.callbackNode;if(Ew()&&e.callbackNode!==n)return null;var r=ni(e,e===cb?fb:ha);if(r===ha)return null;var o=!li(0,r)&&!function(e,t){return(t&e.expiredLanes)!==ha}(e,r)&&!t,a=o?function(e,t){var n=ub;ub|=eb;var r=pw();if(cb!==e||fb!==t){if(Ho){var o=e.memoizedUpdaters;o.size>0&&(zw(e,fb),o.clear()),xi(e,t)}_b=null,Tb(),dw(e,t)}na(t);for(;;)try{bw();break}catch(t){fw(e,t)}return Ff(),hw(r),ub=n,null!==db?(null!==Wo&&"function"==typeof Wo.markRenderYielded&&Wo.markRenderYielded(),nb):(ra(),cb=null,fb=ha,mb)}(e,r):yw(e,r);if(a!==nb){if(a===ob){var i=oi(e);i!==ha&&(r=i,a=nw(e,i))}if(a===rb){var l=vb;throw dw(e,ha),ow(e,r),ew(e,Po()),l}if(a===sb)ow(e,r);else{var s=!li(0,r),u=e.current.alternate;if(s&&!function(e){var t=e;for(;;){if(t.flags&Jr){var n=t.updateQueue;if(null!==n){var r=n.stores;if(null!==r)for(var o=0;o<r.length;o++){var a=r[o],i=a.getSnapshot,l=a.value;try{if(!Ss(i(),l))return!1}catch(e){return!1}}}}var s=t.child;if(t.subtreeFlags&Jr&&null!==s)s.return=t,t=s;else{if(t===e)return!0;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(u)){if((a=yw(e,r))===ob){var c=oi(e);c!==ha&&(r=c,a=nw(e,c))}if(a===rb){var d=vb;throw dw(e,ha),ow(e,r),ew(e,Po()),d}}e.finishedWork=u,e.finishedLanes=r,function(e,t,n){switch(t){case nb:case rb:throw new Error("Root did not complete. This is a bug in React.");case ob:Aw(e,Ab,_b);break;case ab:if(ow(e,n),ii(n)&&!$w()){var r=Eb+xb-Po();if(r>10){if(ni(e,ha)!==ha)break;var o=e.suspendedLanes;if(!mi(o,n)){Kb();ki(e,o);break}e.timeoutHandle=yc(Aw.bind(null,e,Ab,_b),r);break}}Aw(e,Ab,_b);break;case ib:if(ow(e,n),function(e){return(e&Aa)===e}(n))break;if(!$w()){var a=function(e,t){for(var n=e.eventTimes,r=Za;t>0;){var o=fi(t),a=1<<o,i=n[o];i>r&&(r=i),t&=~a}return r}(e,n),i=a,l=Po()-i,s=((u=l)<120?120:u<480?480:u<1080?1080:u<1920?1920:u<3e3?3e3:u<4320?4320:1960*Yg(u/1960))-l;if(s>10){e.timeoutHandle=yc(Aw.bind(null,e,Ab,_b),s);break}}Aw(e,Ab,_b);break;case lb:Aw(e,Ab,_b);break;default:throw new Error("Unknown root exit status.")}var u}(e,a,r)}}return ew(e,Po()),e.callbackNode===n?tw.bind(null,e):null}function nw(e,t){var n=kb;zi(e)&&(dw(e,t).flags|=Yr,l("An error occurred during hydration. The server HTML was replaced with client content in <%s>.",e.containerInfo.nodeName.toLowerCase()));var r=yw(e,t);if(r!==ob){var o=Ab;Ab=n,null!==o&&rw(o)}return r}function rw(e){null===Ab?Ab=e:Ab.push.apply(Ab,e)}function ow(e,t){t=yi(t,wb),function(e,t){e.suspendedLanes|=t,e.pingedLanes&=~t;for(var n=e.expirationTimes,r=t;r>0;){var o=fi(r),a=1<<o;n[o]=Za,r&=~a}}(e,t=yi(t,bb))}function aw(e){if(yv=gv,gv=!1,(ub&(eb|tb))!==Zg)throw new Error("Should not already be working.");Ew();var t=ni(e,ha);if(!hi(t,va))return ew(e,Po()),null;var n=yw(e,t);if(e.tag!==Ed&&n===ob){var r=oi(e);r!==ha&&(t=r,n=nw(e,r))}if(n===rb){var o=vb;throw dw(e,ha),ow(e,t),ew(e,Po()),o}if(n===sb)throw new Error("Root did not complete. This is a bug in React.");var a=e.current.alternate;return e.finishedWork=a,e.finishedLanes=t,Aw(e,Ab,_b),ew(e,Po()),null}function iw(e,t){var n=ub;ub|=Jg;try{return e(t)}finally{(ub=n)!==Zg||Xg.isBatchingLegacy||(Tb(),Od())}}function lw(e){null!==Ib&&Ib.tag===Ed&&(ub&(eb|tb))===Zg&&Ew();var t=ub;ub|=Jg;var n=Kg.transition,r=Li();try{return Kg.transition=null,Bi(Ri),e?e():void 0}finally{Bi(r),Kg.transition=n,((ub=t)&(eb|tb))===Zg&&Rd()}}function sw(){return(ub&(eb|tb))!==Zg}function uw(e,t){id(hb,pb,e),pb=vi(pb,t),yb=vi(yb,t)}function cw(e){pb=hb.current,ad(hb,e)}function dw(e,t){e.finishedWork=null,e.finishedLanes=ha;var n=e.timeoutHandle;if(n!==bc&&(e.timeoutHandle=bc,gc(n)),null!==db)for(var r=db.return;null!==r;){r.alternate;My(0,r),r=r.return}cb=e;var o=uk(e.current,null);return db=o,fb=pb=yb=t,mb=nb,vb=null,gb=ha,bb=ha,wb=ha,kb=null,Ab=null,function(){if(null!==Kf){for(var e=0;e<Kf.length;e++){var t=Kf[e],n=t.interleaved;if(null!==n){t.interleaved=null;var r=n.next,o=t.pending;if(null!==o){var a=o.next;o.next=r,n.next=a}t.pending=n}}Kf=null}}(),Ef.discardPendingWarnings(),o}function fw(e,t){for(;;){var n=db;try{if(Ff(),nm(),kt(),Gg.current=null,null===n||null===n.return)return mb=rb,vb=t,void(db=null);if($&&n.mode&la&&xv(n,!0),W)if(Ko(),null!==t&&"object"==typeof t&&"function"==typeof t.then)ta(n,t,fb);else ea(n,t,fb);zv(e,n.return,n,t,fb),kw(n)}catch(e){t=e,db===n&&null!==n?(n=n.return,db=n):n=db;continue}return}}function pw(){var e=Qg.current;return Qg.current=nv,null===e?nv:e}function hw(e){Qg.current=e}function mw(e){gb=vi(e,gb)}function vw(){mb!==nb&&mb!==ab&&mb!==ob||(mb=ib),null!==cb&&(ai(gb)||ai(bb))&&ow(cb,fb)}function yw(e,t){var n=ub;ub|=eb;var r=pw();if(cb!==e||fb!==t){if(Ho){var o=e.memoizedUpdaters;o.size>0&&(zw(e,fb),o.clear()),xi(e,t)}_b=null,dw(e,t)}for(na(t);;)try{gw();break}catch(t){fw(e,t)}if(Ff(),ub=n,hw(r),null!==db)throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");return ra(),cb=null,fb=ha,mb}function gw(){for(;null!==db;)ww(db)}function bw(){for(;null!==db&&!Oo();)ww(db)}function ww(e){var t,n=e.alternate;At(e),(e.mode&la)!==aa?(Av(e),t=Iw(n,e,pb),xv(e,!0)):t=Iw(n,e,pb),kt(),e.memoizedProps=e.pendingProps,null===t?kw(e):db=t,Gg.current=null}function kw(e){var t=e;do{var n=t.alternate,r=t.return;if((t.flags&no)===zr){At(t);var o=void 0;if((t.mode&la)===aa?o=By(n,t,pb):(Av(t),o=By(n,t,pb),xv(t,!1)),kt(),null!==o)return void(db=o)}else{var a=Ny(0,t);if(null!==a)return a.flags&=to,void(db=a);if((t.mode&la)!==aa){xv(t,!1);for(var i=t.actualDuration,l=t.child;null!==l;)i+=l.actualDuration,l=l.sibling;t.actualDuration=i}if(null===r)return mb=sb,void(db=null);r.flags|=no,r.subtreeFlags=zr,r.deletions=null}var s=t.sibling;if(null!==s)return void(db=s);db=t=r}while(null!==t);mb===nb&&(mb=lb)}function Aw(e,t,n){var r=Li(),o=Kg.transition;try{Kg.transition=null,Bi(Ri),function(e,t,n,r){do{Ew()}while(null!==Ib);if(function(){Ef.flushLegacyContextWarning(),Ef.flushPendingUnsafeLifecycleWarnings()}(),(ub&(eb|tb))!==Zg)throw new Error("Should not already be working.");var o=e.finishedWork,a=e.finishedLanes;if(function(e){null!==Wo&&"function"==typeof Wo.markCommitStarted&&Wo.markCommitStarted(e)}(a),null===o)return Qo(),null;a===ha&&l("root.finishedLanes should not be empty during a commit. This is a bug in React.");if(e.finishedWork=null,e.finishedLanes=ha,o===e.current)throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");e.callbackNode=null,e.callbackPriority=ma;var i=vi(o.lanes,o.childLanes);(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=ha,e.pingedLanes=ha,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t;for(var r=e.entanglements,o=e.eventTimes,a=e.expirationTimes,i=n;i>0;){var l=fi(i),s=1<<l;r[l]=ha,o[l]=Za,a[l]=Za,i&=~s}})(e,i),e===cb&&(cb=null,db=null,fb=ha);(o.subtreeFlags&mo)===zr&&(o.flags&mo)===zr||Db||(Db=!0,Nb=n,Fw(Lo,(function(){return Ew(),null})));var s=(o.subtreeFlags&(fo|po|ho|mo))!==zr,u=(o.flags&(fo|po|ho|mo))!==zr;if(s||u){var c=Kg.transition;Kg.transition=null;var d=Li();Bi(Ri);var f=ub;ub|=tb,Gg.current=null;Jy(e,o);kv(),function(e,t,n){Hy=n,Vy=e,At(t),kg(t,e),At(t),Hy=null,Vy=null}(e,o,a),e.containerInfo,Ms(fc),il(dc),dc=null,fc=null,e.current=o,function(e){null!==Wo&&"function"==typeof Wo.markLayoutEffectsStarted&&Wo.markLayoutEffectsStarted(e)}(a),Eg(o,e,a),null!==Wo&&"function"==typeof Wo.markLayoutEffectsStopped&&Wo.markLayoutEffectsStopped(),Ro(),ub=f,Bi(d),Kg.transition=c}else e.current=o,kv();var p=Db;Db?(Db=!1,Ib=e,Lb=a):(Hb=0,Vb=null);i=e.pendingLanes,i===ha&&(jb=null);p||jw(e.current,!1);(function(e,t){if(Fo&&"function"==typeof Fo.onCommitFiberRoot)try{var n=(e.current.flags&qr)===qr;if($){var r;switch(t){case Ri:r=Do;break;case Pi:r=Io;break;case ji:r=Lo;break;case Di:r=No;break;default:r=Lo}Fo.onCommitFiberRoot(Uo,e,r,n)}else Fo.onCommitFiberRoot(Uo,e,void 0,n)}catch(e){$o||($o=!0,l("React instrumentation encountered an error: %s",e))}})(o.stateNode,r),Ho&&e.memoizedUpdaters.clear();if(function(){Hg.forEach((function(e){return e()}))}(),ew(e,Po()),null!==t)for(var h=e.onRecoverableError,m=0;m<t.length;m++){var v=t[m],y=v.stack,g=v.digest;h(v.value,{componentStack:y,digest:g})}if(Rb){Rb=!1;var b=Pb;throw Pb=null,b}hi(Lb,va)&&e.tag!==Ed&&Ew();i=e.pendingLanes,hi(i,va)?(gv=!0,e===Ub?zb++:(zb=0,Ub=e)):zb=0;Rd(),Qo()}(e,t,n,r)}finally{Kg.transition=o,Bi(r)}return null}function Ew(){if(null!==Ib){var e=Mi(Lb),t=(a=e,0===(o=ji)||o>a?o:a),n=Kg.transition,r=Li();try{return Kg.transition=null,Bi(t),function(){if(null===Ib)return!1;var e=Nb;Nb=null;var t=Ib,n=Lb;if(Ib=null,Lb=ha,(ub&(eb|tb))!==Zg)throw new Error("Cannot flush passive effects while already rendering.");Fb=!0,Wb=!1,function(e){null!==Wo&&"function"==typeof Wo.markPassiveEffectsStarted&&Wo.markPassiveEffectsStarted(e)}(n);var r=ub;ub|=tb,Dg(t.current),Rg(t,t.current,n,e);var o=Bb;Bb=[];for(var a=0;a<o.length;a++){og(0,o[a])}void(null!==Wo&&"function"==typeof Wo.markPassiveEffectsStopped&&Wo.markPassiveEffectsStopped()),jw(t.current,!0),ub=r,Rd(),Wb?t===Vb?Hb++:(Hb=0,Vb=t):Hb=0;Fb=!1,Wb=!1,function(e){if(Fo&&"function"==typeof Fo.onPostCommitFiberRoot)try{Fo.onPostCommitFiberRoot(Uo,e)}catch(e){$o||($o=!0,l("React instrumentation encountered an error: %s",e))}}(t);var i=t.current.stateNode;return i.effectDuration=0,i.passiveEffectDuration=0,!0}()}finally{Bi(r),Kg.transition=n}}var o,a;return!1}function xw(e){return null!==jb&&jb.has(e)}var Cw=function(e){Rb||(Rb=!0,Pb=e)};function Sw(e,t,n){var r=fp(e,Iv(e,Rv(n,t),va),va),o=Kb();null!==r&&(wi(r,va,o),ew(r,o))}function _w(e,t,n){if(function(e){Br(null,(function(){throw e})),Nr()}(n),Hw(!1),e.tag!==f){var r=null;for(r=t;null!==r;){if(r.tag===f)return void Sw(r,e,n);if(r.tag===c){var o=r.type,a=r.stateNode;if("function"==typeof o.getDerivedStateFromError||"function"==typeof a.componentDidCatch&&!xw(a)){var i=fp(r,Lv(r,Rv(n,e),va),va),s=Kb();return void(null!==i&&(wi(i,va,s),ew(i,s)))}}r=r.return}l("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s",n)}else Sw(e,e,n)}function Tw(e,t,n){var r=e.pingCache;null!==r&&r.delete(t);var o=Kb();ki(e,n),function(e){e.tag!==Ed&&qg()&&null===Xg.current&&l("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act")}(e),cb===e&&mi(fb,n)&&(mb===ib||mb===ab&&ii(fb)&&Po()-Eb<xb?dw(e,ha):wb=vi(wb,n)),ew(e,o)}function Ow(e,t){t===ma&&(t=Zb(e));var n=Kb(),r=Jf(e,t);null!==r&&(wi(r,t,n),ew(r,n))}function Rw(e){var t=e.memoizedState,n=ma;null!==t&&(n=t.retryLane),Ow(e,n)}function Pw(e,t){var n,r=ma;switch(e.tag){case A:n=e.stateNode;var o=e.memoizedState;null!==o&&(r=o.retryLane);break;case T:n=e.stateNode;break;default:throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.")}null!==n&&n.delete(t),Ow(e,r)}function jw(e,t){At(e),Dw(e,uo,Fg),t&&Dw(e,co,Wg),Dw(e,uo,zg),t&&Dw(e,co,Ug),kt()}function Dw(e,t,n){for(var r=e,o=null;null!==r;){var a=r.subtreeFlags&t;r!==o&&null!==r.child&&a!==zr?r=r.child:((r.flags&t)!==zr&&n(r),r=null!==r.sibling?r.sibling:o=r.return)}}var Iw,Lw=null;function Bw(e){if((ub&eb)===Zg&&e.mode&ia){var t=e.tag;if(t===d||t===f||t===c||t===u||t===w||t===E||t===x){var n=mt(e)||"ReactComponent";if(null!==Lw){if(Lw.has(n))return;Lw.add(n)}else Lw=new Set([n]);var r=yt;try{At(e),l("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.")}finally{r?At(e):kt()}}}}Iw=function(e,t,n){var r=yk(null,t);try{return Ry(e,t,n)}catch(a){if(Kd||null!==a&&"object"==typeof a&&"function"==typeof a.then)throw a;if(Ff(),nm(),My(0,t),yk(t,r),t.mode&la&&Av(t),Br(null,Ry,null,e,t,n),Pr){var o=Nr();"object"==typeof o&&null!==o&&o._suppressLogging&&"object"==typeof a&&null!==a&&!a._suppressLogging&&(a._suppressLogging=!0)}throw a}};var Nw,Mw=!1;function zw(e,t){Ho&&e.memoizedUpdaters.forEach((function(n){Ei(e,n,t)}))}Nw=new Set;var Uw={};function Fw(e,t){var n=Xg.current;return null!==n?(n.push(t),Uw):_o(e,t)}function Ww(e){if(e!==Uw)return To(e)}function $w(){return null!==Xg.current}function Hw(e){Qb=e}var Vw=null,qw=null,Yw=function(e){Vw=e};function Qw(e){if(null===Vw)return e;var t=Vw(e);return void 0===t?e:t.current}function Gw(e){return Qw(e)}function Kw(e){if(null===Vw)return e;var t=Vw(e);if(void 0===t){if(null!=e&&"function"==typeof e.render){var n=Qw(e.render);if(e.render!==n){var r={$$typeof:Be,render:n};return void 0!==e.displayName&&(r.displayName=e.displayName),r}}return e}return t.current}function Xw(e,t){if(null===Vw)return!1;var n=e.elementType,r=t.type,o=!1,a="object"==typeof r&&null!==r?r.$$typeof:null;switch(e.tag){case c:"function"==typeof r&&(o=!0);break;case u:("function"==typeof r||a===Ue)&&(o=!0);break;case w:(a===Be||a===Ue)&&(o=!0);break;case E:case x:(a===ze||a===Ue)&&(o=!0);break;default:return!1}if(o){var i=Vw(n);if(void 0!==i&&i===Vw(r))return!0}return!1}function Zw(e){null!==Vw&&"function"==typeof WeakSet&&(null===qw&&(qw=new WeakSet),qw.add(e))}var Jw=function(e,t){if(null!==Vw){var n=t.staleFamilies,r=t.updatedFamilies;Ew(),lw((function(){tk(e.current,r,n)}))}},ek=function(e,t){e.context===ld&&(Ew(),lw((function(){_k(t,e,null,null)})))};function tk(e,t,n){var r=e.alternate,o=e.child,a=e.sibling,i=e.tag,l=e.type,s=null;switch(i){case u:case x:case c:s=l;break;case w:s=l.render}if(null===Vw)throw new Error("Expected resolveFamily to be set during hot reload.");var d=!1,f=!1;if(null!==s){var p=Vw(s);void 0!==p&&(n.has(p)?f=!0:t.has(p)&&(i===c?f=!0:d=!0))}if(null!==qw&&(qw.has(e)||null!==r&&qw.has(r))&&(f=!0),f&&(e._debugNeedsRemount=!0),f||d){var h=Jf(e,va);null!==h&&Jb(h,e,va,Za)}null===o||f||tk(o,t,n),null!==a&&tk(a,t,n)}var nk,rk=function(e,t){var n=new Set,r=new Set(t.map((function(e){return e.current})));return ok(e.current,r,n),n};function ok(e,t,n){var r=e.child,o=e.sibling,a=e.tag,i=e.type,l=null;switch(a){case u:case x:case c:l=i;break;case w:l=i.render}var s=!1;null!==l&&t.has(l)&&(s=!0),s?function(e,t){var n=function(e,t){var n=e,r=!1;for(;;){if(n.tag===h)r=!0,t.add(n.stateNode);else if(null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)return r;for(;null===n.sibling;){if(null===n.return||n.return===e)return r;n=n.return}n.sibling.return=n.return,n=n.sibling}return!1}(e,t);if(n)return;var r=e;for(;;){switch(r.tag){case h:return void t.add(r.stateNode);case p:case f:return void t.add(r.stateNode.containerInfo)}if(null===r.return)throw new Error("Expected to reach root first.");r=r.return}}(e,n):null!==r&&ok(r,t,n),null!==o&&ok(o,t,n)}nk=!1;try{var ak=Object.preventExtensions({});new Map([[ak,null]]),new Set([ak])}catch(e){nk=!0}function ik(e,t,n,r){this.tag=e,this.key=n,this.elementType=null,this.type=null,this.stateNode=null,this.return=null,this.child=null,this.sibling=null,this.index=0,this.ref=null,this.pendingProps=t,this.memoizedProps=null,this.updateQueue=null,this.memoizedState=null,this.dependencies=null,this.mode=r,this.flags=zr,this.subtreeFlags=zr,this.deletions=null,this.lanes=ha,this.childLanes=ha,this.alternate=null,this.actualDuration=Number.NaN,this.actualStartTime=Number.NaN,this.selfBaseDuration=Number.NaN,this.treeBaseDuration=Number.NaN,this.actualDuration=0,this.actualStartTime=-1,this.selfBaseDuration=0,this.treeBaseDuration=0,this._debugSource=null,this._debugOwner=null,this._debugNeedsRemount=!1,this._debugHookTypes=null,nk||"function"!=typeof Object.preventExtensions||Object.preventExtensions(this)}var lk=function(e,t,n,r){return new ik(e,t,n,r)};function sk(e){var t=e.prototype;return!(!t||!t.isReactComponent)}function uk(e,t){var n=e.alternate;null===n?((n=lk(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n._debugSource=e._debugSource,n._debugOwner=e._debugOwner,n._debugHookTypes=e._debugHookTypes,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=zr,n.subtreeFlags=zr,n.deletions=null,n.actualDuration=0,n.actualStartTime=-1),n.flags=e.flags&vo,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue;var r=e.dependencies;switch(n.dependencies=null===r?null:{lanes:r.lanes,firstContext:r.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n.selfBaseDuration=e.selfBaseDuration,n.treeBaseDuration=e.treeBaseDuration,n._debugNeedsRemount=e._debugNeedsRemount,n.tag){case d:case u:case x:n.type=Qw(e.type);break;case c:n.type=Gw(e.type);break;case w:n.type=Kw(e.type)}return n}function ck(e,t){e.flags&=vo|Fr;var n=e.alternate;if(null===n)e.childLanes=ha,e.lanes=t,e.child=null,e.subtreeFlags=zr,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.stateNode=null,e.selfBaseDuration=0,e.treeBaseDuration=0;else{e.childLanes=n.childLanes,e.lanes=n.lanes,e.child=n.child,e.subtreeFlags=zr,e.deletions=null,e.memoizedProps=n.memoizedProps,e.memoizedState=n.memoizedState,e.updateQueue=n.updateQueue,e.type=n.type;var r=n.dependencies;e.dependencies=null===r?null:{lanes:r.lanes,firstContext:r.firstContext},e.selfBaseDuration=n.selfBaseDuration,e.treeBaseDuration=n.treeBaseDuration}return e}function dk(e,t,n,r,o,a){var i=d,s=e;if("function"==typeof e)sk(e)?(i=c,s=Gw(s)):s=Qw(s);else if("string"==typeof e)i=h;else e:switch(e){case Pe:return pk(n.children,o,a,t);case je:i=y,((o|=sa)&ia)!==aa&&(o|=ua);break;case De:return function(e,t,n,r){"string"!=typeof e.id&&l('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.',typeof e.id);var o=lk(k,e,r,t|la);return o.elementType=De,o.lanes=n,o.stateNode={effectDuration:0,passiveEffectDuration:0},o}(n,o,a,t);case Ne:return function(e,t,n,r){var o=lk(A,e,r,t);return o.elementType=Ne,o.lanes=n,o}(n,o,a,t);case Me:return function(e,t,n,r){var o=lk(T,e,r,t);return o.elementType=Me,o.lanes=n,o}(n,o,a,t);case Fe:return hk(n,o,a,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case Ie:i=b;break e;case Le:i=g;break e;case Be:i=w,s=Kw(s);break e;case ze:i=E;break e;case Ue:i=C,s=null;break e}var u="";(void 0===e||"object"==typeof e&&null!==e&&0===Object.keys(e).length)&&(u+=" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");var f=r?mt(r):null;throw f&&(u+="\n\nCheck the render method of `"+f+"`."),new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: "+(null==e?e:typeof e)+"."+u)}var p=lk(i,n,t,o);return p.elementType=e,p.type=s,p.lanes=a,p._debugOwner=r,p}function fk(e,t,n){var r;r=e._owner;var o=dk(e.type,e.key,e.props,r,t,n);return o._debugSource=e._source,o._debugOwner=e._owner,o}function pk(e,t,n,r){var o=lk(v,e,r,t);return o.lanes=n,o}function hk(e,t,n,r){var o=lk(R,e,r,t);o.elementType=Fe,o.lanes=n;return o.stateNode={isHidden:!1},o}function mk(e,t,n){var r=lk(m,e,null,t);return r.lanes=n,r}function vk(e,t,n){var r=null!==e.children?e.children:[],o=lk(p,r,e.key,t);return o.lanes=n,o.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},o}function yk(e,t){return null===e&&(e=lk(d,null,null,aa)),e.tag=t.tag,e.key=t.key,e.elementType=t.elementType,e.type=t.type,e.stateNode=t.stateNode,e.return=t.return,e.child=t.child,e.sibling=t.sibling,e.index=t.index,e.ref=t.ref,e.pendingProps=t.pendingProps,e.memoizedProps=t.memoizedProps,e.updateQueue=t.updateQueue,e.memoizedState=t.memoizedState,e.dependencies=t.dependencies,e.mode=t.mode,e.flags=t.flags,e.subtreeFlags=t.subtreeFlags,e.deletions=t.deletions,e.lanes=t.lanes,e.childLanes=t.childLanes,e.alternate=t.alternate,e.actualDuration=t.actualDuration,e.actualStartTime=t.actualStartTime,e.selfBaseDuration=t.selfBaseDuration,e.treeBaseDuration=t.treeBaseDuration,e._debugSource=t._debugSource,e._debugOwner=t._debugOwner,e._debugNeedsRemount=t._debugNeedsRemount,e._debugHookTypes=t._debugHookTypes,e}function gk(e,t,n,r,o){this.tag=t,this.containerInfo=e,this.pendingChildren=null,this.current=null,this.pingCache=null,this.finishedWork=null,this.timeoutHandle=bc,this.context=null,this.pendingContext=null,this.callbackNode=null,this.callbackPriority=ma,this.eventTimes=bi(ha),this.expirationTimes=bi(Za),this.pendingLanes=ha,this.suspendedLanes=ha,this.pingedLanes=ha,this.expiredLanes=ha,this.mutableReadLanes=ha,this.finishedLanes=ha,this.entangledLanes=ha,this.entanglements=bi(ha),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null,this.effectDuration=0,this.passiveEffectDuration=0,this.memoizedUpdaters=new Set;for(var a=this.pendingUpdatersLaneMap=[],i=0;i<pa;i++)a.push(new Set);switch(t){case xd:this._debugRootType=n?"hydrateRoot()":"createRoot()";break;case Ed:this._debugRootType=n?"hydrate()":"render()"}}function bk(e,t,n,r,o,a,i,l,s,u){var c=new gk(e,t,n,l,s),d=function(e,t,n){var r;return e===xd?(r=ia,!0===t&&(r|=sa,r|=ua)):r=aa,Ho&&(r|=la),lk(f,null,null,r)}(t,a);c.current=d,d.stateNode=c;var p={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null};return d.memoizedState=p,up(d),c}var wk,kk,Ak="18.2.0";function Ek(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return function(e){if(J(e))l("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.",Z(e)),ee(e)}(r),{$$typeof:Re,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function xk(e){if(!e)return ld;var t=Mr(e),n=Ad(t);if(t.tag===c){var r=t.type;if(md(r))return bd(t,r,n)}return n}function Ck(e,t,n,r,o,a,i,l){return bk(e,t,!1,null,0,r,0,a,i)}function Sk(e,t,n,r,o,a,i,l,s,u){var c=bk(n,r,!0,e,0,a,0,l,s);c.context=xk(null);var d=c.current,f=Kb(),p=Xb(d),h=dp(f,p);return h.callback=null!=t?t:null,fp(d,h,p),function(e,t,n){e.current.lanes=t,wi(e,t,n),ew(e,n)}(c,p,f),c}function _k(e,t,n,r){!function(e,t){if(Fo&&"function"==typeof Fo.onScheduleFiberRoot)try{Fo.onScheduleFiberRoot(Uo,e,t)}catch(e){$o||($o=!0,l("React instrumentation encountered an error: %s",e))}}(t,e);var o=t.current,a=Kb(),i=Xb(o);!function(e){null!==Wo&&"function"==typeof Wo.markRenderScheduled&&Wo.markRenderScheduled(e)}(i);var s=xk(n);null===t.context?t.context=s:t.pendingContext=s,gt&&null!==yt&&!wk&&(wk=!0,l("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.",mt(yt)||"Unknown"));var u=dp(a,i);u.payload={element:e},null!==(r=void 0===r?null:r)&&("function"!=typeof r&&l("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.",r),u.callback=r);var c=fp(o,u,i);return null!==c&&(Jb(c,o,i,a),pp(c,o,i)),i}function Tk(e){var t=e.current;return t.child?(t.child.tag,t.child.stateNode):null}function Ok(e,t){var n,r,o=e.memoizedState;null!==o&&null!==o.dehydrated&&(o.retryLane=(n=o.retryLane,r=t,n!==ma&&n<r?n:r))}function Rk(e,t){Ok(e,t);var n=e.alternate;n&&Ok(n,t)}function Pk(e){var t=Co(e);return null===t?null:t.stateNode}wk=!1,kk={};var jk=function(e){return null};var Dk=function(e){return!1};var Ik=null,Lk=null,Bk=null,Nk=null,Mk=null,zk=null,Uk=null,Fk=null,Wk=null,$k=function(e,t,n){var r=t[n],o=Xt(e)?e.slice():Ze({},e);return n+1===t.length?(Xt(o)?o.splice(r,1):delete o[r],o):(o[r]=$k(e[r],t,n+1),o)},Hk=function(e,t){return $k(e,t,0)},Vk=function(e,t,n,r){var o=t[r],a=Xt(e)?e.slice():Ze({},e);r+1===t.length?(a[n[r]]=a[o],Xt(a)?a.splice(o,1):delete a[o]):a[o]=Vk(e[o],t,n,r+1);return a},qk=function(e,t,n){if(t.length===n.length){for(var r=0;r<n.length-1;r++)if(t[r]!==n[r])return void i("copyWithRename() expects paths to be the same except for the deepest key");return Vk(e,t,n,0)}i("copyWithRename() expects paths of the same length")},Yk=function(e,t,n,r){if(n>=t.length)return r;var o=t[n],a=Xt(e)?e.slice():Ze({},e);return a[o]=Yk(e[o],t,n+1,r),a},Qk=function(e,t,n){return Yk(e,t,0,n)},Gk=function(e,t){for(var n=e.memoizedState;null!==n&&t>0;)n=n.next,t--;return n};function Kk(e){var t=Eo(e);return null===t?null:t.stateNode}function Xk(e){return null}function Zk(){return yt}Ik=function(e,t,n,r){var o=Gk(e,t);if(null!==o){var a=Qk(o.memoizedState,n,r);o.memoizedState=a,o.baseState=a,e.memoizedProps=Ze({},e.memoizedProps);var i=Jf(e,va);null!==i&&Jb(i,e,va,Za)}},Lk=function(e,t,n){var r=Gk(e,t);if(null!==r){var o=Hk(r.memoizedState,n);r.memoizedState=o,r.baseState=o,e.memoizedProps=Ze({},e.memoizedProps);var a=Jf(e,va);null!==a&&Jb(a,e,va,Za)}},Bk=function(e,t,n,r){var o=Gk(e,t);if(null!==o){var a=qk(o.memoizedState,n,r);o.memoizedState=a,o.baseState=a,e.memoizedProps=Ze({},e.memoizedProps);var i=Jf(e,va);null!==i&&Jb(i,e,va,Za)}},Nk=function(e,t,n){e.pendingProps=Qk(e.memoizedProps,t,n),e.alternate&&(e.alternate.pendingProps=e.pendingProps);var r=Jf(e,va);null!==r&&Jb(r,e,va,Za)},Mk=function(e,t){e.pendingProps=Hk(e.memoizedProps,t),e.alternate&&(e.alternate.pendingProps=e.pendingProps);var n=Jf(e,va);null!==n&&Jb(n,e,va,Za)},zk=function(e,t,n){e.pendingProps=qk(e.memoizedProps,t,n),e.alternate&&(e.alternate.pendingProps=e.pendingProps);var r=Jf(e,va);null!==r&&Jb(r,e,va,Za)},Uk=function(e){var t=Jf(e,va);null!==t&&Jb(t,e,va,Za)},Fk=function(e){jk=e},Wk=function(e){Dk=e};var Jk="function"==typeof reportError?reportError:function(e){};function eA(e){this._internalRoot=e}function tA(e){this._internalRoot=e}function nA(e){return!(!e||e.nodeType!==yn&&e.nodeType!==wn&&e.nodeType!==kn&&z)}function rA(e){return!(!e||e.nodeType!==yn&&e.nodeType!==wn&&e.nodeType!==kn&&(e.nodeType!==bn||" react-mount-point-unstable "!==e.nodeValue))}function oA(e){e.nodeType===yn&&e.tagName&&"BODY"===e.tagName.toUpperCase()&&l("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app."),Hc(e)&&(e._reactRootContainer?l("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported."):l("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it."))}tA.prototype.render=eA.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw new Error("Cannot update an unmounted root.");"function"==typeof arguments[1]?l("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect()."):nA(arguments[1])?l("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root."):void 0!==arguments[1]&&l("You passed a second argument to root.render(...) but it only accepts one argument.");var n=t.containerInfo;if(n.nodeType!==bn){var r=Pk(t.current);r&&r.parentNode!==n&&l("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.")}_k(e,t,null,null)},tA.prototype.unmount=eA.prototype.unmount=function(){"function"==typeof arguments[0]&&l("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;sw()&&l("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition."),lw((function(){_k(null,e,null,null)})),$c(t)}},tA.prototype.unstable_scheduleHydration=function(e){e&&function(e){for(var t=Ti(),n={blockedOn:null,target:e,priority:t},r=0;r<Qi.length&&Ni(t,Qi[r].priority);r++);Qi.splice(r,0,n),0===r&&Zi(n)}(e)};var aA,iA,lA=o.ReactCurrentOwner;function sA(e){return e?e.nodeType===wn?e.documentElement:e.firstChild:null}function uA(){}function cA(e,t,n,r,o){aA(n),function(e,t){null!==e&&"function"!=typeof e&&l("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.",t,e)}(void 0===o?null:o,"render");var a,i=n._reactRootContainer;if(i){if("function"==typeof o){var s=o;o=function(){var e=Tk(a);s.call(e)}}_k(t,a=i,e,o)}else a=function(e,t,n,r,o){if(o){if("function"==typeof r){var a=r;r=function(){var e=Tk(i);a.call(e)}}var i=Sk(t,r,e,Ed,0,!1,0,"",uA);return e._reactRootContainer=i,Wc(i.current,e),hu(e.nodeType===bn?e.parentNode:e),lw(),i}for(var l;l=e.lastChild;)e.removeChild(l);if("function"==typeof r){var s=r;r=function(){var e=Tk(u);s.call(e)}}var u=Ck(e,Ed,0,!1,0,"",uA);return e._reactRootContainer=u,Wc(u.current,e),hu(e.nodeType===bn?e.parentNode:e),lw((function(){_k(t,u,n,r)})),u}(n,t,e,o,r);return Tk(a)}aA=function(e){if(e._reactRootContainer&&e.nodeType!==bn){var t=Pk(e._reactRootContainer.current);t&&t.parentNode!==e&&l("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.")}var n=!!e._reactRootContainer,r=sA(e);!(!r||!qc(r))&&!n&&l("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render."),e.nodeType===yn&&e.tagName&&"BODY"===e.tagName.toUpperCase()&&l("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.")},iA=function(e){switch(e.tag){case f:var t=e.stateNode;if(zi(t)){var n=function(e){return ti(e.pendingLanes)}(t);!function(e,t){t!==ha&&(Ai(e,vi(t,va)),ew(e,Po()),(ub&(eb|tb))===Zg&&(Tb(),Rd()))}(t,n)}break;case A:lw((function(){var t=Jf(e,va);if(null!==t){var n=Kb();Jb(t,e,va,n)}})),Rk(e,va)}},Ci=iA,function(e){Si=e}((function(e){if(e.tag===A){var t=qa,n=Jf(e,t);if(null!==n)Jb(n,e,t,Kb());Rk(e,t)}})),function(e){_i=e}((function(e){if(e.tag===A){var t=Xb(e),n=Jf(e,t);if(null!==n)Jb(n,e,t,Kb());Rk(e,t)}})),function(e){Ti=e}(Li),function(e){Oi=e}((function(e,t){var n=Ii;try{return Ii=e,t()}finally{Ii=n}})),"function"==typeof Map&&null!=Map.prototype&&"function"==typeof Map.prototype.forEach&&"function"==typeof Set&&null!=Set.prototype&&"function"==typeof Set.prototype.clear&&"function"==typeof Set.prototype.forEach||l("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),pr=function(e,t,n){switch(t){case"input":return void $t(e,n);case"textarea":return void function(e,t){ln(e,t)}(e,n);case"select":return void function(e,t){var n=e,r=t.value;null!=r&&en(n,!!t.multiple,r,!1)}(e,n)}},br=iw,wr=lw;var dA={usingClientEntryPoint:!1,Events:[qc,Yc,Qc,yr,gr,iw]};var fA=function(e){var t=e.findFiberByHostInstance,n=o.ReactCurrentDispatcher;return function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled)return!0;if(!t.supportsFiber)return l("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools"),!0;try{W&&(e=Ze({},e,{getLaneLabelMap:Yo,injectProfilingHooks:qo})),Uo=t.inject(e),Fo=t}catch(e){l("React instrumentation encountered an error: %s.",e)}return!!t.checkDCE}({bundleType:e.bundleType,version:e.version,rendererPackageName:e.rendererPackageName,rendererConfig:e.rendererConfig,overrideHookState:Ik,overrideHookStateDeletePath:Lk,overrideHookStateRenamePath:Bk,overrideProps:Nk,overridePropsDeletePath:Mk,overridePropsRenamePath:zk,setErrorHandler:Fk,setSuspenseHandler:Wk,scheduleUpdate:Uk,currentDispatcherRef:n,findHostInstanceByFiber:Kk,findFiberByHostInstance:t||Xk,findHostInstancesForRefresh:rk,scheduleRefresh:Jw,scheduleRoot:ek,setRefreshHandler:Yw,getCurrentFiber:Zk,reconcilerVersion:Ak})}({findFiberByHostInstance:Vc,bundleType:1,version:Ak,rendererPackageName:"react-dom"});if(!fA&&K&&window.top===window.self&&(navigator.userAgent.indexOf("Chrome")>-1&&-1===navigator.userAgent.indexOf("Edge")||navigator.userAgent.indexOf("Firefox")>-1)){var pA=window.location.protocol;/^(https?|file):$/.test(pA)}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=dA,t.createPortal=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;if(!nA(t))throw new Error("Target container is not a DOM element.");return Ek(e,t,null,n)},t.createRoot=function(e,t){return dA.usingClientEntryPoint||l('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".'),function(e,t){if(!nA(e))throw new Error("createRoot(...): Target container is not a DOM element.");oA(e);var n=!1,r="",o=Jk;null!=t&&(t.hydrate?i("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead."):"object"==typeof t&&null!==t&&t.$$typeof===Oe&&l("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);"),!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(o=t.onRecoverableError),void 0!==t.transitionCallbacks&&t.transitionCallbacks);var a=Ck(e,xd,0,n,0,r,o);return Wc(a.current,e),hu(e.nodeType===bn?e.parentNode:e),new eA(a)}(e,t)},t.findDOMNode=function(e){var t=lA.current;return null!==t&&null!==t.stateNode&&(t.stateNode._warnedAboutRefsInRender||l("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.",pt(t.type)||"A component"),t.stateNode._warnedAboutRefsInRender=!0),null==e?null:e.nodeType===yn?e:function(e,t){var n=Mr(e);if(void 0===n){if("function"==typeof e.render)throw new Error("Unable to find node on an unmounted component.");var r=Object.keys(e).join(",");throw new Error("Argument appears to not be a ReactComponent. Keys: "+r)}var o=Eo(n);if(null===o)return null;if(o.mode&sa){var a=mt(n)||"Component";if(!kk[a]){kk[a]=!0;var i=yt;try{At(o),n.mode&sa?l("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node",t,t,a):l("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node",t,t,a)}finally{i?At(i):kt()}}}return o.stateNode}(e,"findDOMNode")},t.flushSync=function(e){return sw()&&l("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task."),lw(e)},t.hydrate=function(e,t,n){if(l("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot"),!rA(t))throw new Error("Target container is not a DOM element.");return Hc(t)&&void 0===t._reactRootContainer&&l("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?"),cA(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){return dA.usingClientEntryPoint||l('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".'),function(e,t,n){if(!nA(e))throw new Error("hydrateRoot(...): Target container is not a DOM element.");oA(e),void 0===t&&l("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");var r=null!=n&&n.hydratedSources||null,o=!1,a="",i=Jk;null!=n&&(!0===n.unstable_strictMode&&(o=!0),void 0!==n.identifierPrefix&&(a=n.identifierPrefix),void 0!==n.onRecoverableError&&(i=n.onRecoverableError));var s=Sk(t,null,e,xd,0,o,0,a,i);if(Wc(s.current,e),hu(e),r)for(var u=0;u<r.length;u++)Rh(s,r[u]);return new tA(s)}(e,t,n)},t.render=function(e,t,n){if(l("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot"),!rA(t))throw new Error("Target container is not a DOM element.");return Hc(t)&&void 0===t._reactRootContainer&&l("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?"),cA(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!rA(e))throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");if(Hc(e)&&void 0===e._reactRootContainer&&l("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?"),e._reactRootContainer){var t=sA(e);return t&&!qc(t)&&l("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React."),lw((function(){cA(null,null,e,!1,(function(){e._reactRootContainer=null,$c(e)}))})),!0}var n=sA(e),r=!(!n||!qc(n)),o=e.nodeType===yn&&rA(e.parentNode)&&!!e.parentNode._reactRootContainer;return r&&l("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s",o?"You may have accidentally passed in a React root node instead of its container.":"Instead, have the parent component update its state and rerender in order to remove this component."),!1},t.unstable_batchedUpdates=iw,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){return function(e,t,n,r){if(l("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot"),!rA(n))throw new Error("Target container is not a DOM element.");if(null==e||void 0===e._reactInternals)throw new Error("parentComponent must be a valid React Component");return cA(e,t,n,!1,r)}(e,t,n,r)},t.version=Ak,"undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop&&__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error)})()},"./node_modules/react-dom/client.js":(e,t,n)=>{"use strict";var r=n("./node_modules/react-dom/index.js"),o=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;t.createRoot=function(e,t){o.usingClientEntryPoint=!0;try{return r.createRoot(e,t)}finally{o.usingClientEntryPoint=!1}},t.hydrateRoot=function(e,t,n){o.usingClientEntryPoint=!0;try{return r.hydrateRoot(e,t,n)}finally{o.usingClientEntryPoint=!1}}},"./node_modules/react-dom/index.js":(e,t,n)=>{"use strict";e.exports=n("./node_modules/react-dom/cjs/react-dom.development.js")},"./node_modules/react-is/cjs/react-is.development.js":(e,t)=>{"use strict";(function(){var e="function"==typeof Symbol&&Symbol.for,n=e?Symbol.for("react.element"):60103,r=e?Symbol.for("react.portal"):60106,o=e?Symbol.for("react.fragment"):60107,a=e?Symbol.for("react.strict_mode"):60108,i=e?Symbol.for("react.profiler"):60114,l=e?Symbol.for("react.provider"):60109,s=e?Symbol.for("react.context"):60110,u=e?Symbol.for("react.async_mode"):60111,c=e?Symbol.for("react.concurrent_mode"):60111,d=e?Symbol.for("react.forward_ref"):60112,f=e?Symbol.for("react.suspense"):60113,p=e?Symbol.for("react.suspense_list"):60120,h=e?Symbol.for("react.memo"):60115,m=e?Symbol.for("react.lazy"):60116,v=e?Symbol.for("react.block"):60121,y=e?Symbol.for("react.fundamental"):60117,g=e?Symbol.for("react.responder"):60118,b=e?Symbol.for("react.scope"):60119;function w(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case n:var p=e.type;switch(p){case u:case c:case o:case i:case a:case f:return p;default:var v=p&&p.$$typeof;switch(v){case s:case d:case m:case h:case l:return v;default:return t}}case r:return t}}}var k=u,A=c,E=s,x=l,C=n,S=d,_=o,T=m,O=h,R=r,P=i,j=a,D=f,I=!1;function L(e){return w(e)===c}t.AsyncMode=k,t.ConcurrentMode=A,t.ContextConsumer=E,t.ContextProvider=x,t.Element=C,t.ForwardRef=S,t.Fragment=_,t.Lazy=T,t.Memo=O,t.Portal=R,t.Profiler=P,t.StrictMode=j,t.Suspense=D,t.isAsyncMode=function(e){return I||(I=!0),L(e)||w(e)===u},t.isConcurrentMode=L,t.isContextConsumer=function(e){return w(e)===s},t.isContextProvider=function(e){return w(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===n},t.isForwardRef=function(e){return w(e)===d},t.isFragment=function(e){return w(e)===o},t.isLazy=function(e){return w(e)===m},t.isMemo=function(e){return w(e)===h},t.isPortal=function(e){return w(e)===r},t.isProfiler=function(e){return w(e)===i},t.isStrictMode=function(e){return w(e)===a},t.isSuspense=function(e){return w(e)===f},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===c||e===i||e===a||e===f||e===p||"object"==typeof e&&null!==e&&(e.$$typeof===m||e.$$typeof===h||e.$$typeof===l||e.$$typeof===s||e.$$typeof===d||e.$$typeof===y||e.$$typeof===g||e.$$typeof===b||e.$$typeof===v)},t.typeOf=w})()},"./node_modules/react-is/index.js":(e,t,n)=>{"use strict";e.exports=n("./node_modules/react-is/cjs/react-is.development.js")},"./node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js":(e,t,n)=>{"use strict";function r(){var e=this.constructor.getDerivedStateFromProps(this.props,this.state);null!=e&&this.setState(e)}function o(e){this.setState(function(t){var n=this.constructor.getDerivedStateFromProps(e,t);return null!=n?n:null}.bind(this))}function a(e,t){try{var n=this.props,r=this.state;this.props=e,this.state=t,this.__reactInternalSnapshotFlag=!0,this.__reactInternalSnapshot=this.getSnapshotBeforeUpdate(n,r)}finally{this.props=n,this.state=r}}function i(e){var t=e.prototype;if(!t||!t.isReactComponent)throw new Error("Can only polyfill class components");if("function"!=typeof e.getDerivedStateFromProps&&"function"!=typeof t.getSnapshotBeforeUpdate)return e;var n=null,i=null,l=null;if("function"==typeof t.componentWillMount?n="componentWillMount":"function"==typeof t.UNSAFE_componentWillMount&&(n="UNSAFE_componentWillMount"),"function"==typeof t.componentWillReceiveProps?i="componentWillReceiveProps":"function"==typeof t.UNSAFE_componentWillReceiveProps&&(i="UNSAFE_componentWillReceiveProps"),"function"==typeof t.componentWillUpdate?l="componentWillUpdate":"function"==typeof t.UNSAFE_componentWillUpdate&&(l="UNSAFE_componentWillUpdate"),null!==n||null!==i||null!==l){var s=e.displayName||e.name,u="function"==typeof e.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n"+s+" uses "+u+" but also contains the following legacy lifecycles:"+(null!==n?"\n  "+n:"")+(null!==i?"\n  "+i:"")+(null!==l?"\n  "+l:"")+"\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks")}if("function"==typeof e.getDerivedStateFromProps&&(t.componentWillMount=r,t.componentWillReceiveProps=o),"function"==typeof t.getSnapshotBeforeUpdate){if("function"!=typeof t.componentDidUpdate)throw new Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");t.componentWillUpdate=a;var c=t.componentDidUpdate;t.componentDidUpdate=function(e,t,n){var r=this.__reactInternalSnapshotFlag?this.__reactInternalSnapshot:n;c.call(this,e,t,r)}}return e}n.r(t),n.d(t,{polyfill:()=>i}),r.__suppressDeprecationWarning=!0,o.__suppressDeprecationWarning=!0,a.__suppressDeprecationWarning=!0},"./node_modules/react-modal/lib/components/Modal.js":(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.bodyOpenClassName=t.portalClassName=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n("./node_modules/react/index.js"),i=h(a),l=h(n("./node_modules/react-dom/index.js")),s=h(n("./node_modules/prop-types/index.js")),u=h(n("./node_modules/react-modal/lib/components/ModalPortal.js")),c=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n("./node_modules/react-modal/lib/helpers/ariaAppHider.js")),d=n("./node_modules/react-modal/lib/helpers/safeHTMLElement.js"),f=h(d),p=n("./node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js");function h(e){return e&&e.__esModule?e:{default:e}}function m(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var v=t.portalClassName="ReactModalPortal",y=t.bodyOpenClassName="ReactModal__Body--open",g=d.canUseDOM&&void 0!==l.default.createPortal,b=function(e){return document.createElement(e)},w=function(){return g?l.default.createPortal:l.default.unstable_renderSubtreeIntoContainer};function k(e){return e()}var A=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,s=Array(a),c=0;c<a;c++)s[c]=arguments[c];return n=o=m(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(s))),o.removePortal=function(){!g&&l.default.unmountComponentAtNode(o.node);var e=k(o.props.parentSelector);e&&e.contains(o.node)&&e.removeChild(o.node)},o.portalRef=function(e){o.portal=e},o.renderPortal=function(e){var n=w()(o,i.default.createElement(u.default,r({defaultStyles:t.defaultStyles},e)),o.node);o.portalRef(n)},m(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"componentDidMount",value:function(){d.canUseDOM&&(g||(this.node=b("div")),this.node.className=this.props.portalClassName,k(this.props.parentSelector).appendChild(this.node),!g&&this.renderPortal(this.props))}},{key:"getSnapshotBeforeUpdate",value:function(e){return{prevParent:k(e.parentSelector),nextParent:k(this.props.parentSelector)}}},{key:"componentDidUpdate",value:function(e,t,n){if(d.canUseDOM){var r=this.props,o=r.isOpen,a=r.portalClassName;e.portalClassName!==a&&(this.node.className=a);var i=n.prevParent,l=n.nextParent;l!==i&&(i.removeChild(this.node),l.appendChild(this.node)),(e.isOpen||o)&&!g&&this.renderPortal(this.props)}}},{key:"componentWillUnmount",value:function(){if(d.canUseDOM&&this.node&&this.portal){var e=this.portal.state,t=Date.now(),n=e.isOpen&&this.props.closeTimeoutMS&&(e.closesAt||t+this.props.closeTimeoutMS);n?(e.beforeClose||this.portal.closeWithTimeout(),setTimeout(this.removePortal,n-t)):this.removePortal()}}},{key:"render",value:function(){return d.canUseDOM&&g?(!this.node&&g&&(this.node=b("div")),w()(i.default.createElement(u.default,r({ref:this.portalRef,defaultStyles:t.defaultStyles},this.props)),this.node)):null}}],[{key:"setAppElement",value:function(e){c.setElement(e)}}]),t}(a.Component);A.propTypes={isOpen:s.default.bool.isRequired,style:s.default.shape({content:s.default.object,overlay:s.default.object}),portalClassName:s.default.string,bodyOpenClassName:s.default.string,htmlOpenClassName:s.default.string,className:s.default.oneOfType([s.default.string,s.default.shape({base:s.default.string.isRequired,afterOpen:s.default.string.isRequired,beforeClose:s.default.string.isRequired})]),overlayClassName:s.default.oneOfType([s.default.string,s.default.shape({base:s.default.string.isRequired,afterOpen:s.default.string.isRequired,beforeClose:s.default.string.isRequired})]),appElement:s.default.oneOfType([s.default.instanceOf(f.default),s.default.instanceOf(d.SafeHTMLCollection),s.default.instanceOf(d.SafeNodeList),s.default.arrayOf(s.default.instanceOf(f.default))]),onAfterOpen:s.default.func,onRequestClose:s.default.func,closeTimeoutMS:s.default.number,ariaHideApp:s.default.bool,shouldFocusAfterRender:s.default.bool,shouldCloseOnOverlayClick:s.default.bool,shouldReturnFocusAfterClose:s.default.bool,preventScroll:s.default.bool,parentSelector:s.default.func,aria:s.default.object,data:s.default.object,role:s.default.string,contentLabel:s.default.string,shouldCloseOnEsc:s.default.bool,overlayRef:s.default.func,contentRef:s.default.func,id:s.default.string,overlayElement:s.default.func,contentElement:s.default.func},A.defaultProps={isOpen:!1,portalClassName:v,bodyOpenClassName:y,role:"dialog",ariaHideApp:!0,closeTimeoutMS:0,shouldFocusAfterRender:!0,shouldCloseOnEsc:!0,shouldCloseOnOverlayClick:!0,shouldReturnFocusAfterClose:!0,preventScroll:!1,parentSelector:function(){return document.body},overlayElement:function(e,t){return i.default.createElement("div",e,t)},contentElement:function(e,t){return i.default.createElement("div",e,t)}},A.defaultStyles={overlay:{position:"fixed",top:0,left:0,right:0,bottom:0,backgroundColor:"rgba(255, 255, 255, 0.75)"},content:{position:"absolute",top:"40px",left:"40px",right:"40px",bottom:"40px",border:"1px solid #ccc",background:"#fff",overflow:"auto",WebkitOverflowScrolling:"touch",borderRadius:"4px",outline:"none",padding:"20px"}},(0,p.polyfill)(A),A.setCreateHTMLElement=function(e){return b=e},t.default=A},"./node_modules/react-modal/lib/components/ModalPortal.js":(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n("./node_modules/react/index.js"),l=v(n("./node_modules/prop-types/index.js")),s=m(n("./node_modules/react-modal/lib/helpers/focusManager.js")),u=v(n("./node_modules/react-modal/lib/helpers/scopeTab.js")),c=m(n("./node_modules/react-modal/lib/helpers/ariaAppHider.js")),d=m(n("./node_modules/react-modal/lib/helpers/classList.js")),f=n("./node_modules/react-modal/lib/helpers/safeHTMLElement.js"),p=v(f),h=v(n("./node_modules/react-modal/lib/helpers/portalOpenInstances.js"));function m(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}function v(e){return e&&e.__esModule?e:{default:e}}n("./node_modules/react-modal/lib/helpers/bodyTrap.js");var y={overlay:"ReactModal__Overlay",content:"ReactModal__Content"},g=function(e){return"Tab"===e.code||9===e.keyCode},b=function(e){return"Escape"===e.code||27===e.keyCode},w=0,k=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.setOverlayRef=function(e){n.overlay=e,n.props.overlayRef&&n.props.overlayRef(e)},n.setContentRef=function(e){n.content=e,n.props.contentRef&&n.props.contentRef(e)},n.afterClose=function(){var e=n.props,t=e.appElement,r=e.ariaHideApp,o=e.htmlOpenClassName,a=e.bodyOpenClassName,i=e.parentSelector,l=i&&i().ownerDocument||document;a&&d.remove(l.body,a),o&&d.remove(l.getElementsByTagName("html")[0],o),r&&w>0&&0===(w-=1)&&c.show(t),n.props.shouldFocusAfterRender&&(n.props.shouldReturnFocusAfterClose?(s.returnFocus(n.props.preventScroll),s.teardownScopedFocus()):s.popWithoutFocus()),n.props.onAfterClose&&n.props.onAfterClose(),h.default.deregister(n)},n.open=function(){n.beforeOpen(),n.state.afterOpen&&n.state.beforeClose?(clearTimeout(n.closeTimer),n.setState({beforeClose:!1})):(n.props.shouldFocusAfterRender&&(s.setupScopedFocus(n.node),s.markForFocusLater()),n.setState({isOpen:!0},(function(){n.openAnimationFrame=requestAnimationFrame((function(){n.setState({afterOpen:!0}),n.props.isOpen&&n.props.onAfterOpen&&n.props.onAfterOpen({overlayEl:n.overlay,contentEl:n.content})}))})))},n.close=function(){n.props.closeTimeoutMS>0?n.closeWithTimeout():n.closeWithoutTimeout()},n.focusContent=function(){return n.content&&!n.contentHasFocus()&&n.content.focus({preventScroll:!0})},n.closeWithTimeout=function(){var e=Date.now()+n.props.closeTimeoutMS;n.setState({beforeClose:!0,closesAt:e},(function(){n.closeTimer=setTimeout(n.closeWithoutTimeout,n.state.closesAt-Date.now())}))},n.closeWithoutTimeout=function(){n.setState({beforeClose:!1,isOpen:!1,afterOpen:!1,closesAt:null},n.afterClose)},n.handleKeyDown=function(e){g(e)&&(0,u.default)(n.content,e),n.props.shouldCloseOnEsc&&b(e)&&(e.stopPropagation(),n.requestClose(e))},n.handleOverlayOnClick=function(e){null===n.shouldClose&&(n.shouldClose=!0),n.shouldClose&&n.props.shouldCloseOnOverlayClick&&(n.ownerHandlesClose()?n.requestClose(e):n.focusContent()),n.shouldClose=null},n.handleContentOnMouseUp=function(){n.shouldClose=!1},n.handleOverlayOnMouseDown=function(e){n.props.shouldCloseOnOverlayClick||e.target!=n.overlay||e.preventDefault()},n.handleContentOnClick=function(){n.shouldClose=!1},n.handleContentOnMouseDown=function(){n.shouldClose=!1},n.requestClose=function(e){return n.ownerHandlesClose()&&n.props.onRequestClose(e)},n.ownerHandlesClose=function(){return n.props.onRequestClose},n.shouldBeClosed=function(){return!n.state.isOpen&&!n.state.beforeClose},n.contentHasFocus=function(){return document.activeElement===n.content||n.content.contains(document.activeElement)},n.buildClassName=function(e,t){var r="object"===(void 0===t?"undefined":o(t))?t:{base:y[e],afterOpen:y[e]+"--after-open",beforeClose:y[e]+"--before-close"},a=r.base;return n.state.afterOpen&&(a=a+" "+r.afterOpen),n.state.beforeClose&&(a=a+" "+r.beforeClose),"string"==typeof t&&t?a+" "+t:a},n.attributesFromObject=function(e,t){return Object.keys(t).reduce((function(n,r){return n[e+"-"+r]=t[r],n}),{})},n.state={afterOpen:!1,beforeClose:!1},n.shouldClose=null,n.moveFromContentToOverlay=null,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),a(t,[{key:"componentDidMount",value:function(){this.props.isOpen&&this.open()}},{key:"componentDidUpdate",value:function(e,t){e.bodyOpenClassName,this.props.bodyOpenClassName,e.htmlOpenClassName,this.props.htmlOpenClassName,this.props.isOpen&&!e.isOpen?this.open():!this.props.isOpen&&e.isOpen&&this.close(),this.props.shouldFocusAfterRender&&this.state.isOpen&&!t.isOpen&&this.focusContent()}},{key:"componentWillUnmount",value:function(){this.state.isOpen&&this.afterClose(),clearTimeout(this.closeTimer),cancelAnimationFrame(this.openAnimationFrame)}},{key:"beforeOpen",value:function(){var e=this.props,t=e.appElement,n=e.ariaHideApp,r=e.htmlOpenClassName,o=e.bodyOpenClassName,a=e.parentSelector,i=a&&a().ownerDocument||document;o&&d.add(i.body,o),r&&d.add(i.getElementsByTagName("html")[0],r),n&&(w+=1,c.hide(t)),h.default.register(this)}},{key:"render",value:function(){var e=this.props,t=e.id,n=e.className,o=e.overlayClassName,a=e.defaultStyles,i=e.children,l=n?{}:a.content,s=o?{}:a.overlay;if(this.shouldBeClosed())return null;var u={ref:this.setOverlayRef,className:this.buildClassName("overlay",o),style:r({},s,this.props.style.overlay),onClick:this.handleOverlayOnClick,onMouseDown:this.handleOverlayOnMouseDown},c=r({id:t,ref:this.setContentRef,style:r({},l,this.props.style.content),className:this.buildClassName("content",n),tabIndex:"-1",onKeyDown:this.handleKeyDown,onMouseDown:this.handleContentOnMouseDown,onMouseUp:this.handleContentOnMouseUp,onClick:this.handleContentOnClick,role:this.props.role,"aria-label":this.props.contentLabel},this.attributesFromObject("aria",r({modal:!0},this.props.aria)),this.attributesFromObject("data",this.props.data||{}),{"data-testid":this.props.testId}),d=this.props.contentElement(c,i);return this.props.overlayElement(u,d)}}]),t}(i.Component);k.defaultProps={style:{overlay:{},content:{}},defaultStyles:{}},k.propTypes={isOpen:l.default.bool.isRequired,defaultStyles:l.default.shape({content:l.default.object,overlay:l.default.object}),style:l.default.shape({content:l.default.object,overlay:l.default.object}),className:l.default.oneOfType([l.default.string,l.default.object]),overlayClassName:l.default.oneOfType([l.default.string,l.default.object]),parentSelector:l.default.func,bodyOpenClassName:l.default.string,htmlOpenClassName:l.default.string,ariaHideApp:l.default.bool,appElement:l.default.oneOfType([l.default.instanceOf(p.default),l.default.instanceOf(f.SafeHTMLCollection),l.default.instanceOf(f.SafeNodeList),l.default.arrayOf(l.default.instanceOf(p.default))]),onAfterOpen:l.default.func,onAfterClose:l.default.func,onRequestClose:l.default.func,closeTimeoutMS:l.default.number,shouldFocusAfterRender:l.default.bool,shouldCloseOnOverlayClick:l.default.bool,shouldReturnFocusAfterClose:l.default.bool,preventScroll:l.default.bool,role:l.default.string,contentLabel:l.default.string,aria:l.default.object,data:l.default.object,children:l.default.node,shouldCloseOnEsc:l.default.bool,overlayRef:l.default.func,contentRef:l.default.func,id:l.default.string,overlayElement:l.default.func,contentElement:l.default.func,testId:l.default.string},t.default=k,e.exports=t.default},"./node_modules/react-modal/lib/helpers/ariaAppHider.js":(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.resetState=function(){l&&(l.removeAttribute?l.removeAttribute("aria-hidden"):null!=l.length?l.forEach((function(e){return e.removeAttribute("aria-hidden")})):document.querySelectorAll(l).forEach((function(e){return e.removeAttribute("aria-hidden")})));l=null},t.log=function(){},t.assertNodeList=s,t.setElement=function(e){var t=e;if("string"==typeof t&&i.canUseDOM){var n=document.querySelectorAll(t);s(n,t),t=n}return l=t||l},t.validateElement=u,t.hide=function(e){var t=!0,n=!1,r=void 0;try{for(var o,a=u(e)[Symbol.iterator]();!(t=(o=a.next()).done);t=!0){o.value.setAttribute("aria-hidden","true")}}catch(e){n=!0,r=e}finally{try{!t&&a.return&&a.return()}finally{if(n)throw r}}},t.show=function(e){var t=!0,n=!1,r=void 0;try{for(var o,a=u(e)[Symbol.iterator]();!(t=(o=a.next()).done);t=!0){o.value.removeAttribute("aria-hidden")}}catch(e){n=!0,r=e}finally{try{!t&&a.return&&a.return()}finally{if(n)throw r}}},t.documentNotReadyOrSSRTesting=function(){l=null};var r,o=n("./node_modules/warning/warning.js"),a=(r=o)&&r.__esModule?r:{default:r},i=n("./node_modules/react-modal/lib/helpers/safeHTMLElement.js");var l=null;function s(e,t){if(!e||!e.length)throw new Error("react-modal: No elements were found for selector "+t+".")}function u(e){var t=e||l;return t?Array.isArray(t)||t instanceof HTMLCollection||t instanceof NodeList?t:[t]:((0,a.default)(!1,["react-modal: App element is not defined.","Please use `Modal.setAppElement(el)` or set `appElement={el}`.","This is needed so screen readers don't see main content","when modal is opened. It is not recommended, but you can opt-out","by setting `ariaHideApp={false}`."].join(" ")),[])}},"./node_modules/react-modal/lib/helpers/bodyTrap.js":(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.resetState=function(){for(var e=[i,l],t=0;t<e.length;t++){var n=e[t];n&&(n.parentNode&&n.parentNode.removeChild(n))}i=l=null,s=[]},t.log=function(){for(var e=[i,l],t=0;t<e.length;t++);};var r,o=n("./node_modules/react-modal/lib/helpers/portalOpenInstances.js"),a=(r=o)&&r.__esModule?r:{default:r};var i=void 0,l=void 0,s=[];function u(){0!==s.length&&s[s.length-1].focusContent()}a.default.subscribe((function(e,t){i||l||((i=document.createElement("div")).setAttribute("data-react-modal-body-trap",""),i.style.position="absolute",i.style.opacity="0",i.setAttribute("tabindex","0"),i.addEventListener("focus",u),(l=i.cloneNode()).addEventListener("focus",u)),(s=t).length>0?(document.body.firstChild!==i&&document.body.insertBefore(i,document.body.firstChild),document.body.lastChild!==l&&document.body.appendChild(l)):(i.parentElement&&i.parentElement.removeChild(i),l.parentElement&&l.parentElement.removeChild(l))}))},"./node_modules/react-modal/lib/helpers/classList.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.resetState=function(){var e=document.getElementsByTagName("html")[0];for(var t in n)o(e,n[t]);var a=document.body;for(var i in r)o(a,r[i]);n={},r={}},t.log=function(){var e=document.getElementsByTagName("html")[0].className;for(var t in"<html /> ("+e+"):\n  ",n)"  "+t+" "+n[t]+"\n  ";for(var o in"\n\ndoc.body ("+(e=document.body.className)+"):\n  ",r)"  "+o+" "+r[o]+"\n  ";"\n"};var n={},r={};function o(e,t){e.classList.remove(t)}t.add=function(e,t){return o=e.classList,a="html"==e.nodeName.toLowerCase()?n:r,void t.split(" ").forEach((function(e){!function(e,t){e[t]||(e[t]=0),e[t]+=1}(a,e),o.add(e)}));var o,a},t.remove=function(e,t){return o=e.classList,a="html"==e.nodeName.toLowerCase()?n:r,void t.split(" ").forEach((function(e){!function(e,t){e[t]&&(e[t]-=1)}(a,e),0===a[e]&&o.remove(e)}));var o,a}},"./node_modules/react-modal/lib/helpers/focusManager.js":(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.resetState=function(){i=[]},t.log=function(){i.forEach((function(e){}))},t.handleBlur=u,t.handleFocus=c,t.markForFocusLater=function(){i.push(document.activeElement)},t.returnFocus=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];try{return void(0!==i.length&&i.pop().focus({preventScroll:e}))}catch(e){}},t.popWithoutFocus=function(){i.length>0&&i.pop()},t.setupScopedFocus=function(e){l=e,window.addEventListener?(window.addEventListener("blur",u,!1),document.addEventListener("focus",c,!0)):(window.attachEvent("onBlur",u),document.attachEvent("onFocus",c))},t.teardownScopedFocus=function(){l=null,window.addEventListener?(window.removeEventListener("blur",u),document.removeEventListener("focus",c)):(window.detachEvent("onBlur",u),document.detachEvent("onFocus",c))};var r,o=n("./node_modules/react-modal/lib/helpers/tabbable.js"),a=(r=o)&&r.__esModule?r:{default:r};var i=[],l=null,s=!1;function u(){s=!0}function c(){if(s){if(s=!1,!l)return;setTimeout((function(){l.contains(document.activeElement)||((0,a.default)(l)[0]||l).focus()}),0)}}},"./node_modules/react-modal/lib/helpers/portalOpenInstances.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.log=function(){r.openInstances.forEach((function(e){}))},t.resetState=function(){r=new n};var n=function e(){var t=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.register=function(e){-1===t.openInstances.indexOf(e)&&(t.openInstances.push(e),t.emit("register"))},this.deregister=function(e){var n=t.openInstances.indexOf(e);-1!==n&&(t.openInstances.splice(n,1),t.emit("deregister"))},this.subscribe=function(e){t.subscribers.push(e)},this.emit=function(e){t.subscribers.forEach((function(n){return n(e,t.openInstances.slice())}))},this.openInstances=[],this.subscribers=[]},r=new n;t.default=r},"./node_modules/react-modal/lib/helpers/safeHTMLElement.js":(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.canUseDOM=t.SafeNodeList=t.SafeHTMLCollection=void 0;var r,o=n("./node_modules/exenv/index.js");var a=((r=o)&&r.__esModule?r:{default:r}).default,i=a.canUseDOM?window.HTMLElement:{};t.SafeHTMLCollection=a.canUseDOM?window.HTMLCollection:{},t.SafeNodeList=a.canUseDOM?window.NodeList:{},t.canUseDOM=a.canUseDOM;t.default=i},"./node_modules/react-modal/lib/helpers/scopeTab.js":(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=(0,a.default)(e);if(!n.length)return void t.preventDefault();var r=void 0,o=t.shiftKey,l=n[0],s=n[n.length-1],u=i();if(e===u){if(!o)return;r=s}s!==u||o||(r=l);l===u&&o&&(r=s);if(r)return t.preventDefault(),void r.focus();var c=/(\bChrome\b|\bSafari\b)\//.exec(navigator.userAgent);if(null==c||"Chrome"==c[1]||null!=/\biPod\b|\biPad\b/g.exec(navigator.userAgent))return;var d=n.indexOf(u);d>-1&&(d+=o?-1:1);if(void 0===(r=n[d]))return t.preventDefault(),void(r=o?s:l).focus();t.preventDefault(),r.focus()};var r,o=n("./node_modules/react-modal/lib/helpers/tabbable.js"),a=(r=o)&&r.__esModule?r:{default:r};function i(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:document;return e.activeElement.shadowRoot?i(e.activeElement.shadowRoot):e.activeElement}e.exports=t.default},"./node_modules/react-modal/lib/helpers/tabbable.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function e(t){var n=[].slice.call(t.querySelectorAll("*"),0).reduce((function(t,n){return t.concat(n.shadowRoot?e(n.shadowRoot):[n])}),[]);return n.filter(l)};var n="none",r="contents",o=/input|select|textarea|button|object|iframe/;function a(e){var t=e.offsetWidth<=0&&e.offsetHeight<=0;if(t&&!e.innerHTML)return!0;try{var o=window.getComputedStyle(e),a=o.getPropertyValue("display");return t?a!==r&&function(e,t){return"visible"!==t.getPropertyValue("overflow")||e.scrollWidth<=0&&e.scrollHeight<=0}(e,o):a===n}catch(e){return!1}}function i(e,t){var n=e.nodeName.toLowerCase();return(o.test(n)&&!e.disabled||"a"===n&&e.href||t)&&function(e){for(var t=e,n=e.getRootNode&&e.getRootNode();t&&t!==document.body;){if(n&&t===n&&(t=n.host.parentNode),a(t))return!1;t=t.parentNode}return!0}(e)}function l(e){var t=e.getAttribute("tabindex");null===t&&(t=void 0);var n=isNaN(t);return(n||t>=0)&&i(e,!n)}e.exports=t.default},"./node_modules/react-modal/lib/index.js":(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n("./node_modules/react-modal/lib/components/Modal.js"),a=(r=o)&&r.__esModule?r:{default:r};t.default=a.default,e.exports=t.default},"./node_modules/react/cjs/react.development.js":(e,t,n)=>{"use strict";e=n.nmd(e),function(){"undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart&&__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error);var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),s=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),d=Symbol.for("react.suspense_list"),f=Symbol.for("react.memo"),p=Symbol.for("react.lazy"),h=Symbol.for("react.offscreen"),m=Symbol.iterator,v="@@iterator";function y(e){if(null===e||"object"!=typeof e)return null;var t=m&&e[m]||e[v];return"function"==typeof t?t:null}var g={current:null},b={transition:null},w={current:null,isBatchingLegacy:!1,didScheduleLegacyUpdate:!1},k={current:null},A={},E=null;function x(e){E=e}A.setExtraStackFrame=function(e){E=e},A.getCurrentStack=null,A.getStackAddendum=function(){var e="";E&&(e+=E);var t=A.getCurrentStack;return t&&(e+=t()||""),e};var C=!1,S=!1,_=!1,T=!1,O=!1,R={ReactCurrentDispatcher:g,ReactCurrentBatchConfig:b,ReactCurrentOwner:k};function P(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];D("warn",e,n)}function j(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];D("error",e,n)}function D(e,t,n){var r=R.ReactDebugCurrentFrame.getStackAddendum();""!==r&&(t+="%s",n=n.concat([r]));var o=n.map((function(e){return String(e)}));o.unshift("Warning: "+t),Function.prototype.apply.call(console[e],console,o)}R.ReactDebugCurrentFrame=A,R.ReactCurrentActQueue=w;var I={};function L(e,t){var n=e.constructor,r=n&&(n.displayName||n.name)||"ReactClass",o=r+"."+t;I[o]||(j("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.",t,r),I[o]=!0)}var B={isMounted:function(e){return!1},enqueueForceUpdate:function(e,t,n){L(e,"forceUpdate")},enqueueReplaceState:function(e,t,n,r){L(e,"replaceState")},enqueueSetState:function(e,t,n,r){L(e,"setState")}},N=Object.assign,M={};function z(e,t,n){this.props=e,this.context=t,this.refs=M,this.updater=n||B}Object.freeze(M),z.prototype.isReactComponent={},z.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},z.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")};var U={isMounted:["isMounted","Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],replaceState:["replaceState","Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]},F=function(e,t){Object.defineProperty(z.prototype,e,{get:function(){P("%s(...) is deprecated in plain JavaScript React classes. %s",t[0],t[1])}})};for(var W in U)U.hasOwnProperty(W)&&F(W,U[W]);function $(){}function H(e,t,n){this.props=e,this.context=t,this.refs=M,this.updater=n||B}$.prototype=z.prototype;var V=H.prototype=new $;V.constructor=H,N(V,z.prototype),V.isPureReactComponent=!0;var q=Array.isArray;function Y(e){return q(e)}function Q(e){return""+e}function G(e){if(function(e){try{return Q(e),!1}catch(e){return!0}}(e))return j("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.",function(e){return"function"==typeof Symbol&&Symbol.toStringTag&&e[Symbol.toStringTag]||e.constructor.name||"Object"}(e)),Q(e)}function K(e){return e.displayName||"Context"}function X(e){if(null==e)return null;if("number"==typeof e.tag&&j("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."),"function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case o:return"Fragment";case r:return"Portal";case i:return"Profiler";case a:return"StrictMode";case c:return"Suspense";case d:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case s:return K(e)+".Consumer";case l:return K(e._context)+".Provider";case u:return function(e,t,n){var r=e.displayName;if(r)return r;var o=t.displayName||t.name||"";return""!==o?n+"("+o+")":n}(e,e.render,"ForwardRef");case f:var t=e.displayName||null;return null!==t?t:X(e.type)||"Memo";case p:var n=e,h=n._payload,m=n._init;try{return X(m(h))}catch(e){return null}}return null}var Z,J,ee,te=Object.prototype.hasOwnProperty,ne={key:!0,ref:!0,__self:!0,__source:!0};function re(e){if(te.call(e,"ref")){var t=Object.getOwnPropertyDescriptor(e,"ref").get;if(t&&t.isReactWarning)return!1}return void 0!==e.ref}function oe(e){if(te.call(e,"key")){var t=Object.getOwnPropertyDescriptor(e,"key").get;if(t&&t.isReactWarning)return!1}return void 0!==e.key}ee={};var ae=function(e,t,r,o,a,i,l){var s={$$typeof:n,type:e,key:t,ref:r,props:l,_owner:i,_store:{}};return Object.defineProperty(s._store,"validated",{configurable:!1,enumerable:!1,writable:!0,value:!1}),Object.defineProperty(s,"_self",{configurable:!1,enumerable:!1,writable:!1,value:o}),Object.defineProperty(s,"_source",{configurable:!1,enumerable:!1,writable:!1,value:a}),Object.freeze&&(Object.freeze(s.props),Object.freeze(s)),s};function ie(e,t,n){var r,o={},a=null,i=null,l=null,s=null;if(null!=t)for(r in re(t)&&(i=t.ref,function(e){if("string"==typeof e.ref&&k.current&&e.__self&&k.current.stateNode!==e.__self){var t=X(k.current.type);ee[t]||(j('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref',t,e.ref),ee[t]=!0)}}(t)),oe(t)&&(G(t.key),a=""+t.key),l=void 0===t.__self?null:t.__self,s=void 0===t.__source?null:t.__source,t)te.call(t,r)&&!ne.hasOwnProperty(r)&&(o[r]=t[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(u>1){for(var c=Array(u),d=0;d<u;d++)c[d]=arguments[d+2];Object.freeze&&Object.freeze(c),o.children=c}if(e&&e.defaultProps){var f=e.defaultProps;for(r in f)void 0===o[r]&&(o[r]=f[r])}if(a||i){var p="function"==typeof e?e.displayName||e.name||"Unknown":e;a&&function(e,t){var n=function(){Z||(Z=!0,j("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)",t))};n.isReactWarning=!0,Object.defineProperty(e,"key",{get:n,configurable:!0})}(o,p),i&&function(e,t){var n=function(){J||(J=!0,j("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)",t))};n.isReactWarning=!0,Object.defineProperty(e,"ref",{get:n,configurable:!0})}(o,p)}return ae(e,a,i,l,s,k.current,o)}function le(e,t,n){if(null==e)throw new Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var r,o,a=N({},e.props),i=e.key,l=e.ref,s=e._self,u=e._source,c=e._owner;if(null!=t)for(r in re(t)&&(l=t.ref,c=k.current),oe(t)&&(G(t.key),i=""+t.key),e.type&&e.type.defaultProps&&(o=e.type.defaultProps),t)te.call(t,r)&&!ne.hasOwnProperty(r)&&(void 0===t[r]&&void 0!==o?a[r]=o[r]:a[r]=t[r]);var d=arguments.length-2;if(1===d)a.children=n;else if(d>1){for(var f=Array(d),p=0;p<d;p++)f[p]=arguments[p+2];a.children=f}return ae(e.type,i,l,s,u,c,a)}function se(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var ue=".",ce=":";var de=!1,fe=/\/+/g;function pe(e){return e.replace(fe,"$&/")}function he(e,t){return"object"==typeof e&&null!==e&&null!=e.key?(G(e.key),n=""+e.key,r={"=":"=0",":":"=2"},"$"+n.replace(/[=:]/g,(function(e){return r[e]}))):t.toString(36);var n,r}function me(e,t,o,a,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var s,u,c,d=!1;if(null===e)d=!0;else switch(l){case"string":case"number":d=!0;break;case"object":switch(e.$$typeof){case n:case r:d=!0}}if(d){var f=e,p=i(f),h=""===a?ue+he(f,0):a;if(Y(p)){var m="";null!=h&&(m=pe(h)+"/"),me(p,t,m,"",(function(e){return e}))}else null!=p&&(se(p)&&(!p.key||f&&f.key===p.key||G(p.key),s=p,u=o+(!p.key||f&&f.key===p.key?"":pe(""+p.key)+"/")+h,p=ae(s.type,u,s.ref,s._self,s._source,s._owner,s.props)),t.push(p));return 1}var v=0,g=""===a?ue:a+ce;if(Y(e))for(var b=0;b<e.length;b++)v+=me(c=e[b],t,o,g+he(c,b),i);else{var w=y(e);if("function"==typeof w){var k=e;w===k.entries&&(de||P("Using Maps as children is not supported. Use an array of keyed ReactElements instead."),de=!0);for(var A,E=w.call(k),x=0;!(A=E.next()).done;)v+=me(c=A.value,t,o,g+he(c,x++),i)}else if("object"===l){var C=String(e);throw new Error("Objects are not valid as a React child (found: "+("[object Object]"===C?"object with keys {"+Object.keys(e).join(", ")+"}":C)+"). If you meant to render a collection of children, use an array instead.")}}return v}function ve(e,t,n){if(null==e)return e;var r=[],o=0;return me(e,r,"","",(function(e){return t.call(n,e,o++)})),r}var ye,ge=-1,be=0,we=1,ke=2;function Ae(e){if(e._status===ge){var t=(0,e._result)();if(t.then((function(t){if(e._status===be||e._status===ge){var n=e;n._status=we,n._result=t}}),(function(t){if(e._status===be||e._status===ge){var n=e;n._status=ke,n._result=t}})),e._status===ge){var n=e;n._status=be,n._result=t}}if(e._status===we){var r=e._result;return void 0===r&&j("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?",r),"default"in r||j("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))",r),r.default}throw e._result}function Ee(e){return"string"==typeof e||"function"==typeof e||(!!(e===o||e===i||O||e===a||e===c||e===d||T||e===h||C||S||_)||"object"==typeof e&&null!==e&&(e.$$typeof===p||e.$$typeof===f||e.$$typeof===l||e.$$typeof===s||e.$$typeof===u||e.$$typeof===ye||void 0!==e.getModuleId))}function xe(){var e=g.current;return null===e&&j("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem."),e}ye=Symbol.for("react.module.reference");var Ce,Se,_e,Te,Oe,Re,Pe,je=0;function De(){}De.__reactDisabledLog=!0;var Ie,Le=R.ReactCurrentDispatcher;function Be(e,t,n){if(void 0===Ie)try{throw Error()}catch(e){var r=e.stack.trim().match(/\n( *(at )?)/);Ie=r&&r[1]||""}return"\n"+Ie+e}var Ne,Me=!1,ze="function"==typeof WeakMap?WeakMap:Map;function Ue(e,t){if(!e||Me)return"";var n,r=Ne.get(e);if(void 0!==r)return r;Me=!0;var o,a=Error.prepareStackTrace;Error.prepareStackTrace=void 0,o=Le.current,Le.current=null,function(){if(0===je){Ce=console.log,Se=console.info,_e=console.warn,Te=console.error,Oe=console.group,Re=console.groupCollapsed,Pe=console.groupEnd;var e={configurable:!0,enumerable:!0,value:De,writable:!0};Object.defineProperties(console,{info:e,log:e,warn:e,error:e,group:e,groupCollapsed:e,groupEnd:e})}je++}();try{if(t){var i=function(){throw Error()};if(Object.defineProperty(i.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(i,[])}catch(e){n=e}Reflect.construct(e,[],i)}else{try{i.call()}catch(e){n=e}e.call(i.prototype)}}else{try{throw Error()}catch(e){n=e}e()}}catch(t){if(t&&n&&"string"==typeof t.stack){for(var l=t.stack.split("\n"),s=n.stack.split("\n"),u=l.length-1,c=s.length-1;u>=1&&c>=0&&l[u]!==s[c];)c--;for(;u>=1&&c>=0;u--,c--)if(l[u]!==s[c]){if(1!==u||1!==c)do{if(u--,--c<0||l[u]!==s[c]){var d="\n"+l[u].replace(" at new "," at ");return e.displayName&&d.includes("<anonymous>")&&(d=d.replace("<anonymous>",e.displayName)),"function"==typeof e&&Ne.set(e,d),d}}while(u>=1&&c>=0);break}}}finally{Me=!1,Le.current=o,function(){if(0==--je){var e={configurable:!0,enumerable:!0,writable:!0};Object.defineProperties(console,{log:N({},e,{value:Ce}),info:N({},e,{value:Se}),warn:N({},e,{value:_e}),error:N({},e,{value:Te}),group:N({},e,{value:Oe}),groupCollapsed:N({},e,{value:Re}),groupEnd:N({},e,{value:Pe})})}je<0&&j("disabledDepth fell below zero. This is a bug in React. Please file an issue.")}(),Error.prepareStackTrace=a}var f=e?e.displayName||e.name:"",p=f?Be(f):"";return"function"==typeof e&&Ne.set(e,p),p}function Fe(e,t,n){if(null==e)return"";if("function"==typeof e)return Ue(e,function(e){var t=e.prototype;return!(!t||!t.isReactComponent)}(e));if("string"==typeof e)return Be(e);switch(e){case c:return Be("Suspense");case d:return Be("SuspenseList")}if("object"==typeof e)switch(e.$$typeof){case u:return Ue(e.render,!1);case f:return Fe(e.type,t,n);case p:var r=e,o=r._payload,a=r._init;try{return Fe(a(o),t,n)}catch(e){}}return""}Ne=new ze;var We,$e={},He=R.ReactDebugCurrentFrame;function Ve(e){if(e){var t=e._owner,n=Fe(e.type,e._source,t?t.type:null);He.setExtraStackFrame(n)}else He.setExtraStackFrame(null)}function qe(e){if(e){var t=e._owner;x(Fe(e.type,e._source,t?t.type:null))}else x(null)}function Ye(){if(k.current){var e=X(k.current.type);if(e)return"\n\nCheck the render method of `"+e+"`."}return""}We=!1;var Qe={};function Ge(e,t){if(e._store&&!e._store.validated&&null==e.key){e._store.validated=!0;var n=function(e){var t=Ye();if(!t){var n="string"==typeof e?e:e.displayName||e.name;n&&(t="\n\nCheck the top-level render call using <"+n+">.")}return t}(t);if(!Qe[n]){Qe[n]=!0;var r="";e&&e._owner&&e._owner!==k.current&&(r=" It was passed a child from "+X(e._owner.type)+"."),qe(e),j('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.',n,r),qe(null)}}}function Ke(e,t){if("object"==typeof e)if(Y(e))for(var n=0;n<e.length;n++){var r=e[n];se(r)&&Ge(r,t)}else if(se(e))e._store&&(e._store.validated=!0);else if(e){var o=y(e);if("function"==typeof o&&o!==e.entries)for(var a,i=o.call(e);!(a=i.next()).done;)se(a.value)&&Ge(a.value,t)}}function Xe(e){var t,n=e.type;if(null!=n&&"string"!=typeof n){if("function"==typeof n)t=n.propTypes;else{if("object"!=typeof n||n.$$typeof!==u&&n.$$typeof!==f)return;t=n.propTypes}if(t){var r=X(n);!function(e,t,n,r,o){var a=Function.call.bind(te);for(var i in e)if(a(e,i)){var l=void 0;try{if("function"!=typeof e[i]){var s=Error((r||"React class")+": "+n+" type `"+i+"` is invalid; it must be a function, usually from the `prop-types` package, but received `"+typeof e[i]+"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");throw s.name="Invariant Violation",s}l=e[i](t,i,r,n,null,"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED")}catch(e){l=e}!l||l instanceof Error||(Ve(o),j("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",r||"React class",n,i,typeof l),Ve(null)),l instanceof Error&&!(l.message in $e)&&($e[l.message]=!0,Ve(o),j("Failed %s type: %s",n,l.message),Ve(null))}}(t,e.props,"prop",r,e)}else if(void 0!==n.PropTypes&&!We){We=!0,j("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?",X(n)||"Unknown")}"function"!=typeof n.getDefaultProps||n.getDefaultProps.isReactClassApproved||j("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.")}}function Ze(e,t,r){var a,i,l=Ee(e);if(!l){var s="";(void 0===e||"object"==typeof e&&null!==e&&0===Object.keys(e).length)&&(s+=" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");var u,c=null!=(a=t)&&void 0!==(i=a.__source)?"\n\nCheck your code at "+i.fileName.replace(/^.*[\\\/]/,"")+":"+i.lineNumber+".":"";s+=c||Ye(),null===e?u="null":Y(e)?u="array":void 0!==e&&e.$$typeof===n?(u="<"+(X(e.type)||"Unknown")+" />",s=" Did you accidentally export a JSX literal instead of a component?"):u=typeof e,j("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s",u,s)}var d=ie.apply(this,arguments);if(null==d)return d;if(l)for(var f=2;f<arguments.length;f++)Ke(arguments[f],e);return e===o?function(e){for(var t=Object.keys(e.props),n=0;n<t.length;n++){var r=t[n];if("children"!==r&&"key"!==r){qe(e),j("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.",r),qe(null);break}}null!==e.ref&&(qe(e),j("Invalid attribute `ref` supplied to `React.Fragment`."),qe(null))}(d):Xe(d),d}var Je=!1;var et=!1,tt=null;var nt=0,rt=!1;function ot(e){e!==nt-1&&j("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. "),nt=e}function at(t,n,r){var o=w.current;if(null!==o)try{lt(o),function(t){if(null===tt)try{var n=("require"+Math.random()).slice(0,7),r=e&&e[n];tt=r.call(e,"timers").setImmediate}catch(e){tt=function(e){!1===et&&(et=!0,"undefined"==typeof MessageChannel&&j("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning."));var t=new MessageChannel;t.port1.onmessage=e,t.port2.postMessage(void 0)}}tt(t)}((function(){0===o.length?(w.current=null,n(t)):at(t,n,r)}))}catch(e){r(e)}else n(t)}var it=!1;function lt(e){if(!it){it=!0;var t=0;try{for(;t<e.length;t++){var n=e[t];do{n=n(!0)}while(null!==n)}e.length=0}catch(n){throw e=e.slice(t+1),n}finally{it=!1}}}var st=Ze,ut=function(e,t,n){for(var r=le.apply(this,arguments),o=2;o<arguments.length;o++)Ke(arguments[o],r.type);return Xe(r),r},ct=function(e){var t=Ze.bind(null,e);return t.type=e,Je||(Je=!0,P("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.")),Object.defineProperty(t,"type",{enumerable:!1,get:function(){return P("Factory.type is deprecated. Access the class directly before passing it to createFactory."),Object.defineProperty(this,"type",{value:e}),e}}),t},dt={map:ve,forEach:function(e,t,n){ve(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return ve(e,(function(){t++})),t},toArray:function(e){return ve(e,(function(e){return e}))||[]},only:function(e){if(!se(e))throw new Error("React.Children.only expected to receive a single React element child.");return e}};t.Children=dt,t.Component=z,t.Fragment=o,t.Profiler=i,t.PureComponent=H,t.StrictMode=a,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=R,t.cloneElement=ut,t.createContext=function(e){var t={$$typeof:s,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null};t.Provider={$$typeof:l,_context:t};var n=!1,r=!1,o=!1,a={$$typeof:s,_context:t};return Object.defineProperties(a,{Provider:{get:function(){return r||(r=!0,j("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?")),t.Provider},set:function(e){t.Provider=e}},_currentValue:{get:function(){return t._currentValue},set:function(e){t._currentValue=e}},_currentValue2:{get:function(){return t._currentValue2},set:function(e){t._currentValue2=e}},_threadCount:{get:function(){return t._threadCount},set:function(e){t._threadCount=e}},Consumer:{get:function(){return n||(n=!0,j("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?")),t.Consumer}},displayName:{get:function(){return t.displayName},set:function(e){o||(P("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.",e),o=!0)}}}),t.Consumer=a,t._currentRenderer=null,t._currentRenderer2=null,t},t.createElement=st,t.createFactory=ct,t.createRef=function(){var e={current:null};return Object.seal(e),e},t.forwardRef=function(e){null!=e&&e.$$typeof===f?j("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...))."):"function"!=typeof e?j("forwardRef requires a render function but was given %s.",null===e?"null":typeof e):0!==e.length&&2!==e.length&&j("forwardRef render functions accept exactly two parameters: props and ref. %s",1===e.length?"Did you forget to use the ref parameter?":"Any additional parameter will be undefined."),null!=e&&(null==e.defaultProps&&null==e.propTypes||j("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?"));var t,n={$$typeof:u,render:e};return Object.defineProperty(n,"displayName",{enumerable:!1,configurable:!0,get:function(){return t},set:function(n){t=n,e.name||e.displayName||(e.displayName=n)}}),n},t.isValidElement=se,t.lazy=function(e){var t,n,r={$$typeof:p,_payload:{_status:ge,_result:e},_init:Ae};return Object.defineProperties(r,{defaultProps:{configurable:!0,get:function(){return t},set:function(e){j("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."),t=e,Object.defineProperty(r,"defaultProps",{enumerable:!0})}},propTypes:{configurable:!0,get:function(){return n},set:function(e){j("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."),n=e,Object.defineProperty(r,"propTypes",{enumerable:!0})}}}),r},t.memo=function(e,t){Ee(e)||j("memo: The first argument must be a component. Instead received: %s",null===e?"null":typeof e);var n,r={$$typeof:f,type:e,compare:void 0===t?null:t};return Object.defineProperty(r,"displayName",{enumerable:!1,configurable:!0,get:function(){return n},set:function(t){n=t,e.name||e.displayName||(e.displayName=t)}}),r},t.startTransition=function(e,t){var n=b.transition;b.transition={};var r=b.transition;b.transition._updatedFibers=new Set;try{e()}finally{if(b.transition=n,null===n&&r._updatedFibers)r._updatedFibers.size>10&&P("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."),r._updatedFibers.clear()}},t.unstable_act=function(e){var t=nt;nt++,null===w.current&&(w.current=[]);var n,r=w.isBatchingLegacy;try{if(w.isBatchingLegacy=!0,n=e(),!r&&w.didScheduleLegacyUpdate){var o=w.current;null!==o&&(w.didScheduleLegacyUpdate=!1,lt(o))}}catch(e){throw ot(t),e}finally{w.isBatchingLegacy=r}if(null!==n&&"object"==typeof n&&"function"==typeof n.then){var a=n,i=!1,l={then:function(e,n){i=!0,a.then((function(r){ot(t),0===nt?at(r,e,n):e(r)}),(function(e){ot(t),n(e)}))}};return rt||"undefined"==typeof Promise||Promise.resolve().then((function(){})).then((function(){i||(rt=!0,j("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);"))})),l}var s=n;if(ot(t),0===nt){var u=w.current;return null!==u&&(lt(u),w.current=null),{then:function(e,t){null===w.current?(w.current=[],at(s,e,t)):e(s)}}}return{then:function(e,t){e(s)}}},t.useCallback=function(e,t){return xe().useCallback(e,t)},t.useContext=function(e){var t=xe();if(void 0!==e._context){var n=e._context;n.Consumer===e?j("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?"):n.Provider===e&&j("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?")}return t.useContext(e)},t.useDebugValue=function(e,t){return xe().useDebugValue(e,t)},t.useDeferredValue=function(e){return xe().useDeferredValue(e)},t.useEffect=function(e,t){return xe().useEffect(e,t)},t.useId=function(){return xe().useId()},t.useImperativeHandle=function(e,t,n){return xe().useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return xe().useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return xe().useLayoutEffect(e,t)},t.useMemo=function(e,t){return xe().useMemo(e,t)},t.useReducer=function(e,t,n){return xe().useReducer(e,t,n)},t.useRef=function(e){return xe().useRef(e)},t.useState=function(e){return xe().useState(e)},t.useSyncExternalStore=function(e,t,n){return xe().useSyncExternalStore(e,t,n)},t.useTransition=function(){return xe().useTransition()},t.version="18.2.0","undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop&&__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error)}()},"./node_modules/react/index.js":(e,t,n)=>{"use strict";e.exports=n("./node_modules/react/cjs/react.development.js")},"./node_modules/scheduler/cjs/scheduler.development.js":(e,t)=>{"use strict";(function(){"undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart&&__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error);var e=!1,n=!1,r=5;function o(e,t){var n=e.length;e.push(t),function(e,t,n){var r=n;for(;r>0;){var o=r-1>>>1,a=e[o];if(!(l(a,t)>0))return;e[o]=t,e[r]=a,r=o}}(e,t,n)}function a(e){return 0===e.length?null:e[0]}function i(e){if(0===e.length)return null;var t=e[0],n=e.pop();return n!==t&&(e[0]=n,function(e,t,n){var r=n,o=e.length,a=o>>>1;for(;r<a;){var i=2*(r+1)-1,s=e[i],u=i+1,c=e[u];if(l(s,t)<0)u<o&&l(c,s)<0?(e[r]=c,e[u]=t,r=u):(e[r]=s,e[i]=t,r=i);else{if(!(u<o&&l(c,t)<0))return;e[r]=c,e[u]=t,r=u}}}(e,n,0)),t}function l(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var s=1,u=2,c=3,d=4,f=5;if("object"==typeof performance&&"function"==typeof performance.now){var p=performance;t.unstable_now=function(){return p.now()}}else{var h=Date,m=h.now();t.unstable_now=function(){return h.now()-m}}var v=-1,y=250,g=5e3,b=1e4,w=1073741823,k=[],A=[],E=1,x=null,C=c,S=!1,_=!1,T=!1,O="function"==typeof setTimeout?setTimeout:null,R="function"==typeof clearTimeout?clearTimeout:null,P="undefined"!=typeof setImmediate?setImmediate:null;"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function j(e){for(var t=a(A);null!==t;){if(null===t.callback)i(A);else{if(!(t.startTime<=e))return;i(A),t.sortIndex=t.expirationTime,o(k,t)}t=a(A)}}function D(e){if(T=!1,j(e),!_)if(null!==a(k))_=!0,q(I);else{var t=a(A);null!==t&&Y(D,t.startTime-e)}}function I(e,r){_=!1,T&&(T=!1,Q()),S=!0;var o=C;try{if(!n)return L(e,r);try{return L(e,r)}catch(e){if(null!==x){t.unstable_now();x.isQueued=!1}throw e}}finally{x=null,C=o,S=!1}}function L(n,r){var o=r;for(j(o),x=a(k);null!==x&&!e&&(!(x.expirationTime>o)||n&&!F());){var l=x.callback;if("function"==typeof l){x.callback=null,C=x.priorityLevel;var s=l(x.expirationTime<=o);o=t.unstable_now(),"function"==typeof s?x.callback=s:x===a(k)&&i(k),j(o)}else i(k);x=a(k)}if(null!==x)return!0;var u=a(A);return null!==u&&Y(D,u.startTime-o),!1}var B=!1,N=null,M=-1,z=r,U=-1;function F(){return!(t.unstable_now()-U<z)}var W,$=function(){if(null!==N){var e=t.unstable_now();U=e;var n=!0;try{n=N(!0,e)}finally{n?W():(B=!1,N=null)}}else B=!1};if("function"==typeof P)W=function(){P($)};else if("undefined"!=typeof MessageChannel){var H=new MessageChannel,V=H.port2;H.port1.onmessage=$,W=function(){V.postMessage(null)}}else W=function(){O($,0)};function q(e){N=e,B||(B=!0,W())}function Y(e,n){M=O((function(){e(t.unstable_now())}),n)}function Q(){R(M),M=-1}var G=function(){};t.unstable_IdlePriority=f,t.unstable_ImmediatePriority=s,t.unstable_LowPriority=d,t.unstable_NormalPriority=c,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=u,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){_||S||(_=!0,q(I))},t.unstable_forceFrameRate=function(e){e<0||e>125||(z=e>0?Math.floor(1e3/e):r)},t.unstable_getCurrentPriorityLevel=function(){return C},t.unstable_getFirstCallbackNode=function(){return a(k)},t.unstable_next=function(e){var t;switch(C){case s:case u:case c:t=c;break;default:t=C}var n=C;C=t;try{return e()}finally{C=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=G,t.unstable_runWithPriority=function(e,t){switch(e){case s:case u:case c:case d:case f:break;default:e=c}var n=C;C=e;try{return t()}finally{C=n}},t.unstable_scheduleCallback=function(e,n,r){var i,l,c=t.unstable_now();if("object"==typeof r&&null!==r){var p=r.delay;i="number"==typeof p&&p>0?c+p:c}else i=c;switch(e){case s:l=v;break;case u:l=y;break;case f:l=w;break;case d:l=b;break;default:l=g}var h=i+l,m={id:E++,callback:n,priorityLevel:e,startTime:i,expirationTime:h,sortIndex:-1};return i>c?(m.sortIndex=i,o(A,m),null===a(k)&&m===a(A)&&(T?Q():T=!0,Y(D,i-c))):(m.sortIndex=h,o(k,m),_||S||(_=!0,q(I))),m},t.unstable_shouldYield=F,t.unstable_wrapCallback=function(e){var t=C;return function(){var n=C;C=t;try{return e.apply(this,arguments)}finally{C=n}}},"undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop&&__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error)})()},"./node_modules/scheduler/index.js":(e,t,n)=>{"use strict";e.exports=n("./node_modules/scheduler/cjs/scheduler.development.js")},"./node_modules/warning/warning.js":e=>{"use strict";var t=function(){},n=function(e,t){var n=arguments.length;t=new Array(n>1?n-1:0);for(var r=1;r<n;r++)t[r-1]=arguments[r];var o=0,a="Warning: "+e.replace(/%s/g,(function(){return t[o++]}));try{throw new Error(a)}catch(e){}};t=function(e,t,r){var o=arguments.length;r=new Array(o>2?o-2:0);for(var a=2;a<o;a++)r[a-2]=arguments[a];if(void 0===t)throw new Error("`warning(condition, format, ...args)` requires a warning message argument");e||n.apply(null,[t].concat(r))},e.exports=t},"./src/common/api.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{checkWorryFreeEligibility:()=>c,createPolicy:()=>p,createWorryFreeQuote:()=>d,placeOrder:()=>f});var r=n("./src/common/events.js"),o=n("./src/eventTracking/reportEvent.js");function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function i(){i=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},l=o.iterator||"@@iterator",s=o.asyncIterator||"@@asyncIterator",u=o.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,n){return e[t]=n}}function d(e,t,n,o){var a=t&&t.prototype instanceof h?t:h,i=Object.create(a.prototype),l=new _(o||[]);return r(i,"_invoke",{value:E(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=d;var p={};function h(){}function m(){}function v(){}var y={};c(y,l,(function(){return this}));var g=Object.getPrototypeOf,b=g&&g(g(T([])));b&&b!==t&&n.call(b,l)&&(y=b);var w=v.prototype=h.prototype=Object.create(y);function k(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function A(e,t){function o(r,i,l,s){var u=f(e[r],e,i);if("throw"!==u.type){var c=u.arg,d=c.value;return d&&"object"==a(d)&&n.call(d,"__await")?t.resolve(d.__await).then((function(e){o("next",e,l,s)}),(function(e){o("throw",e,l,s)})):t.resolve(d).then((function(e){c.value=e,l(c)}),(function(e){return o("throw",e,l,s)}))}s(u.arg)}var i;r(this,"_invoke",{value:function(e,n){function r(){return new t((function(t,r){o(e,n,t,r)}))}return i=i?i.then(r,r):r()}})}function E(e,t,n){var r="suspendedStart";return function(o,a){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw a;return O()}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var l=x(i,n);if(l){if(l===p)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var s=f(e,t,n);if("normal"===s.type){if(r=n.done?"completed":"suspendedYield",s.arg===p)continue;return{value:s.arg,done:n.done}}"throw"===s.type&&(r="completed",n.method="throw",n.arg=s.arg)}}}function x(e,t){var n=t.method,r=e.iterator[n];if(void 0===r)return t.delegate=null,"throw"===n&&e.iterator.return&&(t.method="return",t.arg=void 0,x(e,t),"throw"===t.method)||"return"!==n&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+n+"' method")),p;var o=f(r,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,p;var a=o.arg;return a?a.done?(t[e.resultName]=a.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,p):a:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,p)}function C(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function S(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function T(e){if(e){var t=e[l];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:O}}function O(){return{value:void 0,done:!0}}return m.prototype=v,r(w,"constructor",{value:v,configurable:!0}),r(v,"constructor",{value:m,configurable:!0}),m.displayName=c(v,u,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===m||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,v):(e.__proto__=v,c(e,u,"GeneratorFunction")),e.prototype=Object.create(w),e},e.awrap=function(e){return{__await:e}},k(A.prototype),c(A.prototype,s,(function(){return this})),e.AsyncIterator=A,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new A(d(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},k(w),c(w,u,"Generator"),c(w,l,(function(){return this})),c(w,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=T,_.prototype={constructor:_,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(S),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return i.type="throw",i.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],i=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var l=n.call(a,"catchLoc"),s=n.call(a,"finallyLoc");if(l&&s){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(l){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,p):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),p},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),S(n),p}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;S(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:T(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),p}},e}function l(e,t,n,r,o,a,i){try{var l=e[a](i),s=l.value}catch(e){return void n(e)}l.done?t(s):Promise.resolve(s).then(r,o)}function s(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){l(a,r,o,i,s,"next",e)}function s(e){l(a,r,o,i,s,"throw",e)}i(void 0)}))}}var u=[],c=function(){var e=s(i().mark((function e(){return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return!0,(0,r.dispatchCustomEvent)(r.ELIGIBILITY_CHECK_COMPLETED,{status:"success",data:{eligibility:true}}),e.abrupt("return",true);case 3:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),d=function(){return function(){var e=s(i().mark((function e(t){var n,a,l,s,c,d,f,p,h,m,v;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=Date.now(),a=!1,e.prev=2,(0,r.dispatchCustomEvent)(r.QUOTE_SENDED,{status:"success",data:t}),e.next=6,fetch("https://api-test.seel.com/v1/ecommerce/quotes",{method:"POST",headers:{"X-Seel-Api-Key":"nfarsv3aagiwl51sxn4rr1njv8ic1wb0","X-Seel-Api-Version":"2.0.0","Content-Type":"application/json"},body:JSON.stringify(t.quote_param)});case 6:if(null!=(l=e.sent)&&l.ok){e.next=9;break}return e.abrupt("return",{status:"rejected"});case 9:return e.next=11,l.text();case 11:return s=e.sent,c=JSON.parse(s),f=(d=c||{}).quote_id,p=d.price,h=d.extra_info,m=d.status,null!=(v={quoteId:f,price:p,extraInfo:h||{},status:m})&&v.price?(u.push({input:t,output:v}),(0,r.dispatchCustomEvent)(r.QUOTE_COMPLETED,{status:"success",data:v}),(0,o.reportCreateQuoteTriggered)({isTreet:a,start_time:n,quoteId:f,quote_result:"success"})):((0,r.dispatchCustomEvent)(r.QUOTE_COMPLETED,{status:"fail",data:v,reason:"invalid price"}),(0,o.reportCreateQuoteTriggered)({isTreet:a,start_time:n,quoteId:f,quote_result:"fail"})),e.abrupt("return",v);case 19:return e.prev=19,e.t0=e.catch(2),(0,r.dispatchCustomEvent)(r.QUOTE_COMPLETED,{status:"error",message:e.t0.message||""}),(0,o.reportCreateQuoteTriggered)({isTreet:a,start_time:n,quoteId:"",quote_result:"error"}),e.abrupt("return",{status:"rejected"});case 25:case"end":return e.stop()}}),e,null,[[2,19]])})));return function(t){return e.apply(this,arguments)}}()},f=function(){var e=s(i().mark((function e(t,n){var r;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(e.prev=0,!n){e.next=13;break}if(!((r=u.pop())&&r.input&&r.output)){e.next=10;break}return e.next=7,p(r,t);case 7:return e.abrupt("return",e.sent);case 10:return e.abrupt("return",{message:"order data received"});case 11:e.next=14;break;case 13:return e.abrupt("return",{message:"order data received"});case 14:e.next=19;break;case 16:e.prev=16,e.t0=e.catch(0);case 19:case"end":return e.stop()}}),e,null,[[0,16]])})));return function(t,n){return e.apply(this,arguments)}}(),p=function(){var e=s(i().mark((function e(t,n){return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.abrupt("return",{message:"policy created",policyId:"202208030172794092175970"});case 4:e.prev=4,e.t0=e.catch(0);case 7:case"end":return e.stop()}}),e,null,[[0,4]])})));return function(t,n){return e.apply(this,arguments)}}()},"./src/common/events.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{ELIGIBILITY_CHECK_COMPLETED:()=>i,EventsWorryFree:()=>r,FREEZE_TOGGLE:()=>l,QUOTE_COMPLETED:()=>a,QUOTE_SENDED:()=>o,dispatchCustomEvent:()=>s});var r={checked:"seel-assurance-worry-free-checked",unchecked:"seel-assurance-worry-free-unchecked"},o="QUOTE_SENDED_WORRY_FREE",a="QUOTE_COMPLETED_WORRY_FREE",i="ELIGIBILITY_CHECK_COMPLETED_WORRY_FREE",l="FREEZE_TOGGLE_WORRY_FREE",s=function(e){var t=new CustomEvent(e,{detail:arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}});document.dispatchEvent(t)}},"./src/common/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{EventsWorryFree:()=>o.EventsWorryFree,checkWorryFreeEligibility:()=>r.checkWorryFreeEligibility,createWorryFreeQuote:()=>r.createWorryFreeQuote,placeOrder:()=>r.placeOrder});var r=n("./src/common/api.js"),o=n("./src/common/events.js")},"./src/components/treetModal.jsx":(e,t,n)=>{"use strict";n.r(t),n.d(t,{TreetModal:()=>c});var r,o,a=n("./node_modules/react/index.js"),i=n.n(a),l=n("./node_modules/react-modal/lib/index.js"),s=n.n(l),u=(n("./src/components/widget.css"),{overlay:{zIndex:999,backgroundColor:"rgb(24 32 38 / 60%)"},content:(null===(r=window)||void 0===r?void 0:r.innerWidth)>700?{top:"50%",left:"50%",right:"auto",bottom:"auto",marginRight:"-50%",transform:"translate(-50%, -50%)",width:"760px",padding:"30px",borderRadius:"20px"}:{top:"40px",left:0,right:0,bottom:0,width:"100%",height:"".concat((null===(o=window)||void 0===o?void 0:o.innerHeight)-40,"px"),minWidth:"240px",borderRadius:"20px",padding:"30px",paddingTop:"80px",paddingBottom:getComputedStyle(document.documentElement).getPropertyValue("--sat")}}),c=function(e){var t,n,r,o=e.open,a=e.config,l=e.handleShowModal,c=e.text,d=e.checked,f=e.handleNextStatus,p=e.price,h=a.assets,m=(a.meta,h.policy||{});m.contents,m.links,m.title,m.note;return i().createElement(s(),{isOpen:o,ariaHideApp:!1,onRequestClose:function(){l(!1)},style:u},i().createElement("div",{className:"seel--widget_modal--header",style:(null===(t=window)||void 0===t?void 0:t.innerWidth)>700?{position:"relative",top:0,left:0}:{}},i().createElement("div",{className:"seel--widget_modal--title"},i().createElement("img",{className:"seel--widget_modal--title--logo",src:"https://cdn.seel.com/assets/images/seel-logo-grey.svg"})),i().createElement("div",{style:{height:"60px",backgroundColor:"white",width:"18px",display:"flex",flexDirection:"column",justifyContent:"center"},onClick:function(){l(!1)}},i().createElement("img",{src:"https://cdn.seel.com/assets/images/close_icon.svg",className:"seel--widget_modal--close"}))),i().createElement("div",null,i().createElement("p",{style:{fontWeight:600}},"Worry-Free Purchase for $",p,": ",i().createElement("span",{style:{color:"#6057ff"}},"What's Covered by Seel?"))),i().createElement("div",{className:"seel--widget_modal--blocks",style:(null===(n=window)||void 0===n?void 0:n.innerWidth)>700?{}:{display:"flex",flexDirection:"column"}},i().createElement("div",{className:"seel--widget_modal--blocks-section",style:(null===(r=window)||void 0===r?void 0:r.innerWidth)>700?{}:{width:"100%",marginBottom:"15px"}},i().createElement("div",{className:"seel--widget_modal--blocks-section-header",style:{backgroundColor:"#212842",color:"white"}},i().createElement("p",{style:{margin:30}},"Get a full refund, no question asked !")),i().createElement("div",{className:"seel--widget_modal--blocks-section-content",style:{alignItem:"flex-start",backgroundColor:"#212842"}},i().createElement("div",{style:{margin:20}},c.map((function(e,t){return i().createElement("div",{key:"".concat(t,"-a"),className:"seel--widget_modal--blocks-section-content-text",style:{width:"100%",color:"white"}},i().createElement("svg",{className:"seel--widget_modal--blocks-section-content-text-icon",width:"16",height:"16",viewBox:"0 0 16 16",fill:"none",xmlns:"http://www.w3.org/2000/svg"},i().createElement("path",{fillRule:"evenodd",clipRule:"evenodd",d:"M0 8C0 10.1217 0.842855 12.1566 2.34315 13.6569C3.84344 15.1571 5.87827 16 8 16C10.1217 16 12.1566 15.1571 13.6569 13.6569C15.1571 12.1566 16 10.1217 16 8C16 5.87827 15.1571 3.84344 13.6569 2.34315C12.1566 0.842855 10.1217 0 8 0C5.87827 0 3.84344 0.842855 2.34315 2.34315C0.842855 3.84344 0 5.87827 0 8ZM12.16 6.56C12.2755 6.40594 12.3316 6.21538 12.318 6.02329C12.3043 5.8312 12.2219 5.65048 12.0857 5.51431C11.9495 5.37815 11.7688 5.29566 11.5767 5.28201C11.3846 5.26836 11.1941 5.32446 11.04 5.44L7.2 9.28L5.36 7.44C5.20594 7.32446 5.01538 7.26836 4.82329 7.28201C4.6312 7.29566 4.45048 7.37815 4.31431 7.51431C4.17815 7.65048 4.09566 7.8312 4.08201 8.02329C4.06836 8.21538 4.12446 8.40594 4.24 8.56L6.64 10.96C6.96 11.28 7.44 11.28 7.76 10.96L12.16 6.56Z",fill:"#ffffff"})),e)})))))),i().createElement("div",{style:{marginLeft:30}},i().createElement("dl",null,i().createElement("dt",{style:{fontWeight:600,marginBottom:5}},"Easy resolution"),i().createElement("dd",{style:{marginBottom:10,fontSize:14}},"Resolve your issue with just a few click"),i().createElement("dt",{style:{fontWeight:600,marginBottom:5}},"Complete peace of mind"),i().createElement("dd",{style:{fontSize:14}},"Zero risk on your order with our protection"),i().createElement("dd",{style:{fontSize:14}},"Get your refund promptly"))),d?null:i().createElement("div",{style:{display:"flex",alignItem:"center",justifyContent:"center"}},i().createElement("button",{type:"button",style:{borderRadius:20,backgroundColor:"#212842",color:"white",padding:10,fontWeight:600,cursor:"pointer"},onClick:function(){return f()}},"Opt-in now for full protection")),i().createElement("div",{style:{display:"flex",alignItem:"center",justifyContent:"center",margin:10}},i().createElement("a",{href:"www.google.com",target:"_blank",style:{color:"#808080",margin:10}},"Privacy Policy"),i().createElement("a",{href:"www.google.com",target:"_blank",style:{color:"#808080",margin:10}},"Terms of Service")))}},"./src/components/widget.jsx":(e,t,n)=>{"use strict";n.r(t),n.d(t,{Widget:()=>h});var r=n("./node_modules/react/index.js"),o=n.n(r),a=n("./node_modules/lodash.template/index.js"),i=n.n(a),l=n("./node_modules/react-switch/dist/index.dev.mjs"),s=n("./node_modules/react-loading-skeleton/dist/index.mjs"),u=n("./src/components/treetModal.jsx"),c=(n("./src/components/widget.css"),n("./node_modules/react-loading-skeleton/dist/skeleton.css"),n("./src/common/events.js"));function d(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],s=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){u=!0,o=e}finally{try{if(!s&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return f(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return f(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var p=function(){var e,t=window.location.host;return"true"===(null===(e=sessionStorage)||void 0===e?void 0:e.getItem("".concat(t,"-seel-widget-worry-free-status")))},h=function(e){var t,n,a,f=e.status,h=e.price,m=e.quoteId,v=e.extraInfo,y=e.config,g=e.total,b=y.assets,w=(y.meta||{}).check,k=b.policy,A=(b.name,b.icon,k||{}),E=(A.contents,A.links,A.title,A.note,d(o().useState(f),2)),x=E[0],C=E[1],S=d(o().useState(!1),2),_=S[0],T=S[1],O=d(o().useState(null!==p()?p():w),2),R=O[0],P=O[1],j=d(o().useState(h),2),D=j[0],I=j[1],L=d(o().useState(!1),2),B=L[0],N=L[1],M=(0,r.useRef)({quoteId:m,extraInfo:v,total:g}),z=(0,r.useRef)(!1),U=d(o().useState(!1),2),F=U[0],W=U[1],$=v.display_widget_text,H=v.coverage_details_text,V=B?i()(b.name)({price:""}):i()(b.name)({price:null==D?"":"$".concat(D)});o().useEffect((function(){!z.current&&R&&((0,c.dispatchCustomEvent)(R?c.EventsWorryFree.checked:c.EventsWorryFree.unchecked,{price:D,quoteId:M.current.quoteId,extraInfo:M.current.extraInfo,checked:R,total:M.current.total}),z.current=!0)}),[R,D]),o().useEffect((function(){document.addEventListener(c.QUOTE_SENDED,(function(e){N(!0)})),document.addEventListener(c.QUOTE_COMPLETED,(function(e){var t=e.detail,n=t.status,r=t.data;t.reason,t.message;if(C(n),"success"===n){var o=r.price,a=r.quoteId,i=r.extraInfo,l=r.total;I(o),M.current.extraInfo=i,M.current.quoteId=a,M.current.total=l}N(!1)})),document.addEventListener(c.EventsWorryFree.checked,(function(e){P(!0)})),document.addEventListener(c.EventsWorryFree.unchecked,(function(e){P(!1)})),document.addEventListener(c.FREEZE_TOGGLE,(function(e){var t=e.detail;W(t.data)}))}),[]);var q=function(){var e=!R;(0,c.dispatchCustomEvent)(e?c.EventsWorryFree.checked:c.EventsWorryFree.unchecked,{price:D,quoteId:M.current.quoteId,extraInfo:M.current.extraInfo,checked:e,total:M.current.total}),T(!1),P(e)};return o().createElement(o().Fragment,null,R?null:o().createElement("div",{className:"seel--widget_not_liable"},o().createElement("p",{style:{color:"#b98902"}},"You will be responsible for working with the carrier to resolve any shipping issues.")),o().createElement("div",{className:"seel--widget_container",style:"success"!==x?{minHeight:"80px",backgroundColor:"#DFE4E8",alignItems:"center"}:{}},o().createElement("div",{className:"seel--widget_mid"},o().createElement("div",{className:"seel--widget_content"},o().createElement("div",{className:"seel--widget_content--primary",onClick:function(){T(!0)}},o().createElement("div",{className:"seel--widget_content--primary--text",dangerouslySetInnerHTML:{__html:V}}),o().createElement("img",{className:"seel--widget_content--primary--icon",src:"https://cdn.seel.com/assets/images/buyer-protection/info_icon.svg",alt:""})),o().createElement("div",{className:"seel--widget_content--secondary"},"success"!==x?o().createElement("div",{className:"seel--widget_content--secondary--error"},"Worry-Free Purchase isn’t eligible for this order.",o().createElement("br",null)):o().createElement(o().Fragment,null,o().createElement("ul",{style:{paddingLeft:15}},$.map((function(e,t){return o().createElement("li",{key:t,dangerouslySetInnerHTML:{__html:e}})}))),B&&o().createElement(s.default,{containerClassName:"seel--widget_content--secondary--skeleton_wrap",className:"seel--widget_content--secondary--skeleton"}))))),o().createElement("div",{className:"seel--widget_end"},"success"!==x?null:o().createElement(l.default,{onChange:function(){return q()},checked:R||!1,className:"seel--widget_button",disabled:B||F,uncheckedIcon:o().createElement("div",null),checkedIcon:!1,height:(null===(t=window)||void 0===t?void 0:t.innerWidth)<=375?16:24,width:(null===(n=window)||void 0===n?void 0:n.innerWidth)<=375?32:48,handleDiameter:(null===(a=window)||void 0===a?void 0:a.innerWidth)<=375?12:20,offColor:"#BDBDBD",onColor:"#0A0A0A",activeBoxShadow:"0px 0px 1px 2px #9B95FF"})),o().createElement("div",{className:"seel--widget_end-copywright"},"POWERED BY",o().createElement("img",{className:"seel--widget_end-copywright-logo",src:"https://cdn.seel.com/assets/images/treet/grey-letter-logo.svg"})),o().createElement(u.TreetModal,{open:_,config:y,handleShowModal:function(e){return T(e)},text:H,checked:R,handleNextStatus:function(){return q()},price:D})))}},"./src/eventTracking/reportEvent.js":(e,t,n)=>{"use strict";function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==r(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var o=n.call(e,t||"default");if("object"!==r(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"===r(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n.r(t),n.d(t,{reportCreateQuoteTriggered:()=>l,sendReportEventRequest:()=>s});var l=function(e){var t,n=e.isTreet,r=e.start_time,o=e.quoteId,a=e.quote_result;if(n){var i={quote_id:o,quote_result:a,quote_response_time:Date.now()-r,shop_url:null===(t=window.location)||void 0===t?void 0:t.origin};s("create_quote_triggered",i,"treet")}},s=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"treet-bp-widget";try{var o=Date.now(),i=window.location.host,l={code:r,eventInfo:JSON.stringify(a(a({},t),{},{eventName:e,event_ts:o,eventTime:o,shop_domain:i})),platform:n};fetch("https://api-dev.seel.com/gateway/tracking-service/api/tracking-event",{method:"POST",body:JSON.stringify(l),headers:{"Content-Type":"application/json"}}).catch((function(e){}))}catch(e){}}},"./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js!./node_modules/react-loading-skeleton/dist/skeleton.css":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n("./node_modules/css-loader/dist/runtime/sourceMaps.js"),o=n.n(r),a=n("./node_modules/css-loader/dist/runtime/api.js"),i=n.n(a)()(o());i.push([e.id,"@-webkit-keyframes react-loading-skeleton {\n  100% {\n    -webkit-transform: translateX(100%);\n            transform: translateX(100%);\n  }\n}\n\n@keyframes react-loading-skeleton {\n  100% {\n    -webkit-transform: translateX(100%);\n            transform: translateX(100%);\n  }\n}\n\n.react-loading-skeleton {\n  --base-color: #ebebeb;\n  --highlight-color: #f5f5f5;\n  --animation-duration: 1.5s;\n  --animation-direction: normal;\n  --pseudo-element-display: block; /* Enable animation */\n\n  background-color: var(--base-color);\n\n  width: 100%;\n  border-radius: 0.25rem;\n  display: inline-flex;\n  line-height: 1;\n\n  position: relative;\n  overflow: hidden;\n  z-index: 1; /* Necessary for overflow: hidden to work correctly in Safari */\n}\n\n.react-loading-skeleton::after {\n  content: ' ';\n  display: var(--pseudo-element-display);\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 100%;\n  background-repeat: no-repeat;\n  background-image: linear-gradient(\n    90deg,\n    var(--base-color),\n    var(--highlight-color),\n    var(--base-color)\n  );\n  -webkit-transform: translateX(-100%);\n          transform: translateX(-100%);\n\n  -webkit-animation-name: react-loading-skeleton;\n\n          animation-name: react-loading-skeleton;\n  -webkit-animation-direction: var(--animation-direction);\n          animation-direction: var(--animation-direction);\n  -webkit-animation-duration: var(--animation-duration);\n          animation-duration: var(--animation-duration);\n  -webkit-animation-timing-function: ease-in-out;\n          animation-timing-function: ease-in-out;\n  -webkit-animation-iteration-count: infinite;\n          animation-iteration-count: infinite;\n}\n\n@media (prefers-reduced-motion) {\n  .react-loading-skeleton {\n    --pseudo-element-display: none; /* Disable animation */\n  }\n}\n","",{version:3,sources:["webpack://./node_modules/react-loading-skeleton/dist/skeleton.css"],names:[],mappings:"AAAA;EACE;IACE,mCAA2B;YAA3B,2BAA2B;EAC7B;AACF;;AAJA;EACE;IACE,mCAA2B;YAA3B,2BAA2B;EAC7B;AACF;;AAEA;EACE,qBAAqB;EACrB,0BAA0B;EAC1B,0BAA0B;EAC1B,6BAA6B;EAC7B,+BAA+B,EAAE,qBAAqB;;EAEtD,mCAAmC;;EAEnC,WAAW;EACX,sBAAsB;EACtB,oBAAoB;EACpB,cAAc;;EAEd,kBAAkB;EAClB,gBAAgB;EAChB,UAAU,EAAE,+DAA+D;AAC7E;;AAEA;EACE,YAAY;EACZ,sCAAsC;EACtC,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,QAAQ;EACR,YAAY;EACZ,4BAA4B;EAC5B;;;;;GAKC;EACD,oCAA4B;UAA5B,4BAA4B;;EAE5B,8CAAsC;;UAAtC,sCAAsC;EACtC,uDAA+C;UAA/C,+CAA+C;EAC/C,qDAA6C;UAA7C,6CAA6C;EAC7C,8CAAsC;UAAtC,sCAAsC;EACtC,2CAAmC;UAAnC,mCAAmC;AACrC;;AAEA;EACE;IACE,8BAA8B,EAAE,sBAAsB;EACxD;AACF",sourcesContent:["@keyframes react-loading-skeleton {\n  100% {\n    transform: translateX(100%);\n  }\n}\n\n.react-loading-skeleton {\n  --base-color: #ebebeb;\n  --highlight-color: #f5f5f5;\n  --animation-duration: 1.5s;\n  --animation-direction: normal;\n  --pseudo-element-display: block; /* Enable animation */\n\n  background-color: var(--base-color);\n\n  width: 100%;\n  border-radius: 0.25rem;\n  display: inline-flex;\n  line-height: 1;\n\n  position: relative;\n  overflow: hidden;\n  z-index: 1; /* Necessary for overflow: hidden to work correctly in Safari */\n}\n\n.react-loading-skeleton::after {\n  content: ' ';\n  display: var(--pseudo-element-display);\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 100%;\n  background-repeat: no-repeat;\n  background-image: linear-gradient(\n    90deg,\n    var(--base-color),\n    var(--highlight-color),\n    var(--base-color)\n  );\n  transform: translateX(-100%);\n\n  animation-name: react-loading-skeleton;\n  animation-direction: var(--animation-direction);\n  animation-duration: var(--animation-duration);\n  animation-timing-function: ease-in-out;\n  animation-iteration-count: infinite;\n}\n\n@media (prefers-reduced-motion) {\n  .react-loading-skeleton {\n    --pseudo-element-display: none; /* Disable animation */\n  }\n}\n"],sourceRoot:""}]);const l=i},"./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js!./src/components/widget.css":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n("./node_modules/css-loader/dist/runtime/sourceMaps.js"),o=n.n(r),a=n("./node_modules/css-loader/dist/runtime/api.js"),i=n.n(a)()(o());i.push([e.id,".seel--widget_container {\n  min-height: 90px;\n  width: 100%;\n  background: #f5f4ff;\n  border: 1px solid #dfe4e8;\n  border-radius: 5px;\n  display: flex;\n  flex-direction: row;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n          user-select: none;\n  position: relative;\n  padding: 0;\n  margin: 8px 0;\n  padding: 20px;\n}\n\n.seel--widget_not_liable {\n  width: 100%;\n  background: #f5f4ff;\n  border: 1px solid #dfe4e8;\n  border-radius: 5px;\n  display: flex;\n  flex-direction: row;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n          user-select: none;\n  position: relative;\n  padding: 0;\n  margin: 8px 0;\n  padding: 20px;\n}\n\n.seel--widget_button {\n  /* background-color: #645AFF; */\n  height: 24px;\n  width: 48px;\n  margin-left: 8px;\n}\n.seel--widget_end {\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: flex-end;\n}\n.seel--widget_end-copywright {\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  align-items: center;\n  font-size: 12px;\n  position: absolute;\n  bottom: 4px;\n  right: 12px;\n}\n.seel--widget_end-copywright-logo {\n  width: 36px;\n  margin-bottom: 2px;\n}\n.seel--widget_mid {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: flex-start;\n}\n.seel--widget_mid-list {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  max-width: 450px;\n  justify-content: space-between;\n}\n.seel--widget_mid-list-item {\n  height: 26px;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n  font-size: 12px;\n  color: #565656;\n  min-width: 180px;\n}\n.seel--widget_image {\n  width: 26px;\n  height: 26px;\n  margin-right: 8px;\n  margin-top: 8px;\n  align-self: flex-start;\n  overflow: visible;\n}\n.seel--widget_content {\n  height: 36px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: space-around;\n  width: 100%;\n}\n.seel--widget_content--primary {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  align-items: center;\n  height: 14px;\n}\n.seel--widget_content--primary--icon {\n  width: 14px;\n  height: 14px;\n  margin-left: 6px;\n  cursor: pointer;\n}\n.seel--widget_content--primary--text {\n  color: #212121;\n  font-size: 14px;\n  font-weight: 700;\n  line-height: 14px;\n}\n.seel--widget_content--secondary {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  font-size: 12px;\n  line-height: 12px;\n  color: #5c5f62;\n  font-weight: 400;\n  align-items: center;\n  margin-top: 6px;\n}\n.seel--widget_content--secondary--skeleton {\n  width: 32px !important;\n  height: 12px;\n}\n.seel--widget_modal--paragraph {\n  font-size: 12px;\n  line-height: 20px;\n  margin: 20px 0 15px 0;\n  color: #212121;\n  text-align: center;\n}\n.seel--widget_modal--paragraph_h {\n  font-size: 12px;\n  line-height: 16px;\n  color: #212121;\n}\n\n.seel--widget_modal--bold {\n  font-weight: 600;\n}\n\n.seel--widget_modal--title {\n  display: flex;\n  flex: 1 1 0%;\n  height: 60px;\n  background-color: #fff;\n  /* flex-direction: column; */\n  align-items: center;\n  font-weight: 600;\n  font-size: 20px;\n  /* margin-bottom: 20px; */\n}\n.seel--widget_modal--sub-title {\n  text-align: center;\n  display: inline-block;\n  width: 100%;\n  font-size: 16px;\n  color: #6e6e6e;\n  margin: 5px 0 10px 0;\n}\n.seel--widget_modal--header {\n  display: flex;\n  flex-direction: row;\n  height: 60px;\n  margin-bottom: 20px;\n  justify-content: flex-start;\n  align-items: center;\n  position: fixed;\n  top: 41px;\n  right: 30px;\n  left: 30px;\n}\n.seel--widget_modal--icon {\n  height: 30px;\n  margin-right: 10px;\n}\n/* .seel--widget_modal--title {\n  font-size: 22px;\n  font-weight: bold;\n  color: #212121;\n} */\n.seel--widget_modal--close {\n  height: 18px;\n  width: 18px;\n  cursor: pointer;\n}\n.seel--widget_modal--link_group {\n  display: flex;\n  flex-direction: row;\n  padding: 0 20px;\n  justify-content: space-around;\n}\n.seel--widget_modal--link {\n  text-align: center;\n  display: inline-block;\n  width: 100%;\n  font-size: 12px;\n  color: #626262;\n  text-decoration: underline;\n}\n.seel--widget_modal--link-empty {\n  text-align: center;\n  display: inline-block;\n  width: 100%;\n  font-size: 12px;\n  color: #626262;\n}\n.seel--widget_modal--blocks {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n}\n\n.seel--widget_modal--blocks-section {\n  background: #ffffff;\n  border: 1px solid #f0f0f0;\n  box-shadow: 0px 41.5312px 30.0211px rgba(0, 0, 0, 0.0151852),\n    0px 12.8153px 8.32997px rgba(0, 0, 0, 0.01),\n    0px 5.22106px 4.17685px rgba(0, 0, 0, 0.00785185),\n    0px 1.18661px 2.01723px rgba(0, 0, 0, 0.00481481);\n  border-radius: 10px;\n  display: flex;\n  flex-direction: column;\n  width: 100%\n}\n.seel--widget_modal--blocks-section-header {\n  font-size: 16px;\n  font-weight: 600;\n  height: 60px;\n  display: flex;\n  align-items: center;\n  border-bottom: 1px solid #f0f0f0;\n  color: #1e2022;\n}\n.seel--widget_modal--blocks-section-content {\n}\n.seel--widget_modal--blocks-section-content-img {\n  width: 48px;\n  height: 48px;\n  margin: 6px;\n}\n.seel--widget_modal--blocks-section-content-c {\n  width: 48px;\n  height: 48px;\n}\n.seel--widget_modal--blocks-section-content-text {\n  height: 30px;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n  font-size: 14px;\n  color: #565656;\n}\n.seel--widget_modal--blocks-section-content-text-icon {\n  width: 16px;\n  height: 16px;\n  margin: 6px;\n}\n.seel--widget_modal--blocks-section-content-b {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n}\n.seel--widget_modal--title--logo {\n  width: 130px;\n}\n.seel--widget_modal--paragraph a {\n  color: #212121;\n}\n@media screen and (max-width: 800px) {\n  .seel--widget_container {\n    padding: 20px 10px 20px 5px;\n  }\n}\n\n@media screen and (max-width: 375px) {\n  .seel--widget_container {\n    padding: 20px 5px;\n  }\n  .seel--widget_image {\n    margin-right: 0;\n  }\n  .seel--widget_content--primary--text {\n    font-size: 12px;\n  }\n  .seel--widget_content--secondary {\n    font-size: 12px;\n    line-height: 12px;\n    margin-top: 0;\n  }\n  .seel--widget_button {\n    width: 100%;\n    height: 16px;\n    margin-left: 0;\n  }\n  .seel--widget_mid-list-item {\n    min-width: 170px;\n  }\n}\n","",{version:3,sources:["webpack://./src/components/widget.css"],names:[],mappings:"AAAA;EACE,gBAAgB;EAChB,WAAW;EACX,mBAAmB;EACnB,yBAAyB;EACzB,kBAAkB;EAClB,aAAa;EACb,mBAAmB;EACnB,yBAAiB;KAAjB,sBAAiB;UAAjB,iBAAiB;EACjB,kBAAkB;EAClB,UAAU;EACV,aAAa;EACb,aAAa;AACf;;AAEA;EACE,WAAW;EACX,mBAAmB;EACnB,yBAAyB;EACzB,kBAAkB;EAClB,aAAa;EACb,mBAAmB;EACnB,yBAAiB;KAAjB,sBAAiB;UAAjB,iBAAiB;EACjB,kBAAkB;EAClB,UAAU;EACV,aAAa;EACb,aAAa;AACf;;AAEA;EACE,+BAA+B;EAC/B,YAAY;EACZ,WAAW;EACX,gBAAgB;AAClB;AACA;EACE,aAAa;EACb,OAAO;EACP,sBAAsB;EACtB,8BAA8B;EAC9B,qBAAqB;AACvB;AACA;EACE,aAAa;EACb,mBAAmB;EACnB,yBAAyB;EACzB,mBAAmB;EACnB,eAAe;EACf,kBAAkB;EAClB,WAAW;EACX,WAAW;AACb;AACA;EACE,WAAW;EACX,kBAAkB;AACpB;AACA;EACE,aAAa;EACb,sBAAsB;EACtB,8BAA8B;EAC9B,uBAAuB;AACzB;AACA;EACE,aAAa;EACb,mBAAmB;EACnB,eAAe;EACf,gBAAgB;EAChB,8BAA8B;AAChC;AACA;EACE,YAAY;EACZ,aAAa;EACb,mBAAmB;EACnB,mBAAmB;EACnB,2BAA2B;EAC3B,eAAe;EACf,cAAc;EACd,gBAAgB;AAClB;AACA;EACE,WAAW;EACX,YAAY;EACZ,iBAAiB;EACjB,eAAe;EACf,sBAAsB;EACtB,iBAAiB;AACnB;AACA;EACE,YAAY;EACZ,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,6BAA6B;EAC7B,WAAW;AACb;AACA;EACE,aAAa;EACb,mBAAmB;EACnB,iBAAiB;EACjB,mBAAmB;EACnB,YAAY;AACd;AACA;EACE,WAAW;EACX,YAAY;EACZ,gBAAgB;EAChB,eAAe;AACjB;AACA;EACE,cAAc;EACd,eAAe;EACf,gBAAgB;EAChB,iBAAiB;AACnB;AACA;EACE,aAAa;EACb,mBAAmB;EACnB,iBAAiB;EACjB,eAAe;EACf,iBAAiB;EACjB,cAAc;EACd,gBAAgB;EAChB,mBAAmB;EACnB,eAAe;AACjB;AACA;EACE,sBAAsB;EACtB,YAAY;AACd;AACA;EACE,eAAe;EACf,iBAAiB;EACjB,qBAAqB;EACrB,cAAc;EACd,kBAAkB;AACpB;AACA;EACE,eAAe;EACf,iBAAiB;EACjB,cAAc;AAChB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,YAAY;EACZ,YAAY;EACZ,sBAAsB;EACtB,4BAA4B;EAC5B,mBAAmB;EACnB,gBAAgB;EAChB,eAAe;EACf,yBAAyB;AAC3B;AACA;EACE,kBAAkB;EAClB,qBAAqB;EACrB,WAAW;EACX,eAAe;EACf,cAAc;EACd,oBAAoB;AACtB;AACA;EACE,aAAa;EACb,mBAAmB;EACnB,YAAY;EACZ,mBAAmB;EACnB,2BAA2B;EAC3B,mBAAmB;EACnB,eAAe;EACf,SAAS;EACT,WAAW;EACX,UAAU;AACZ;AACA;EACE,YAAY;EACZ,kBAAkB;AACpB;AACA;;;;GAIG;AACH;EACE,YAAY;EACZ,WAAW;EACX,eAAe;AACjB;AACA;EACE,aAAa;EACb,mBAAmB;EACnB,eAAe;EACf,6BAA6B;AAC/B;AACA;EACE,kBAAkB;EAClB,qBAAqB;EACrB,WAAW;EACX,eAAe;EACf,cAAc;EACd,0BAA0B;AAC5B;AACA;EACE,kBAAkB;EAClB,qBAAqB;EACrB,WAAW;EACX,eAAe;EACf,cAAc;AAChB;AACA;EACE,aAAa;EACb,mBAAmB;EACnB,8BAA8B;AAChC;;AAEA;EACE,mBAAmB;EACnB,yBAAyB;EACzB;;;qDAGmD;EACnD,mBAAmB;EACnB,aAAa;EACb,sBAAsB;EACtB;AACF;AACA;EACE,eAAe;EACf,gBAAgB;EAChB,YAAY;EACZ,aAAa;EACb,mBAAmB;EACnB,gCAAgC;EAChC,cAAc;AAChB;AACA;AACA;AACA;EACE,WAAW;EACX,YAAY;EACZ,WAAW;AACb;AACA;EACE,WAAW;EACX,YAAY;AACd;AACA;EACE,YAAY;EACZ,aAAa;EACb,mBAAmB;EACnB,mBAAmB;EACnB,2BAA2B;EAC3B,eAAe;EACf,cAAc;AAChB;AACA;EACE,WAAW;EACX,YAAY;EACZ,WAAW;AACb;AACA;EACE,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,mBAAmB;AACrB;AACA;EACE,YAAY;AACd;AACA;EACE,cAAc;AAChB;AACA;EACE;IACE,2BAA2B;EAC7B;AACF;;AAEA;EACE;IACE,iBAAiB;EACnB;EACA;IACE,eAAe;EACjB;EACA;IACE,eAAe;EACjB;EACA;IACE,eAAe;IACf,iBAAiB;IACjB,aAAa;EACf;EACA;IACE,WAAW;IACX,YAAY;IACZ,cAAc;EAChB;EACA;IACE,gBAAgB;EAClB;AACF",sourcesContent:[".seel--widget_container {\n  min-height: 90px;\n  width: 100%;\n  background: #f5f4ff;\n  border: 1px solid #dfe4e8;\n  border-radius: 5px;\n  display: flex;\n  flex-direction: row;\n  user-select: none;\n  position: relative;\n  padding: 0;\n  margin: 8px 0;\n  padding: 20px;\n}\n\n.seel--widget_not_liable {\n  width: 100%;\n  background: #f5f4ff;\n  border: 1px solid #dfe4e8;\n  border-radius: 5px;\n  display: flex;\n  flex-direction: row;\n  user-select: none;\n  position: relative;\n  padding: 0;\n  margin: 8px 0;\n  padding: 20px;\n}\n\n.seel--widget_button {\n  /* background-color: #645AFF; */\n  height: 24px;\n  width: 48px;\n  margin-left: 8px;\n}\n.seel--widget_end {\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: flex-end;\n}\n.seel--widget_end-copywright {\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  align-items: center;\n  font-size: 12px;\n  position: absolute;\n  bottom: 4px;\n  right: 12px;\n}\n.seel--widget_end-copywright-logo {\n  width: 36px;\n  margin-bottom: 2px;\n}\n.seel--widget_mid {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: flex-start;\n}\n.seel--widget_mid-list {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  max-width: 450px;\n  justify-content: space-between;\n}\n.seel--widget_mid-list-item {\n  height: 26px;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n  font-size: 12px;\n  color: #565656;\n  min-width: 180px;\n}\n.seel--widget_image {\n  width: 26px;\n  height: 26px;\n  margin-right: 8px;\n  margin-top: 8px;\n  align-self: flex-start;\n  overflow: visible;\n}\n.seel--widget_content {\n  height: 36px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: space-around;\n  width: 100%;\n}\n.seel--widget_content--primary {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  align-items: center;\n  height: 14px;\n}\n.seel--widget_content--primary--icon {\n  width: 14px;\n  height: 14px;\n  margin-left: 6px;\n  cursor: pointer;\n}\n.seel--widget_content--primary--text {\n  color: #212121;\n  font-size: 14px;\n  font-weight: 700;\n  line-height: 14px;\n}\n.seel--widget_content--secondary {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  font-size: 12px;\n  line-height: 12px;\n  color: #5c5f62;\n  font-weight: 400;\n  align-items: center;\n  margin-top: 6px;\n}\n.seel--widget_content--secondary--skeleton {\n  width: 32px !important;\n  height: 12px;\n}\n.seel--widget_modal--paragraph {\n  font-size: 12px;\n  line-height: 20px;\n  margin: 20px 0 15px 0;\n  color: #212121;\n  text-align: center;\n}\n.seel--widget_modal--paragraph_h {\n  font-size: 12px;\n  line-height: 16px;\n  color: #212121;\n}\n\n.seel--widget_modal--bold {\n  font-weight: 600;\n}\n\n.seel--widget_modal--title {\n  display: flex;\n  flex: 1 1 0%;\n  height: 60px;\n  background-color: #fff;\n  /* flex-direction: column; */\n  align-items: center;\n  font-weight: 600;\n  font-size: 20px;\n  /* margin-bottom: 20px; */\n}\n.seel--widget_modal--sub-title {\n  text-align: center;\n  display: inline-block;\n  width: 100%;\n  font-size: 16px;\n  color: #6e6e6e;\n  margin: 5px 0 10px 0;\n}\n.seel--widget_modal--header {\n  display: flex;\n  flex-direction: row;\n  height: 60px;\n  margin-bottom: 20px;\n  justify-content: flex-start;\n  align-items: center;\n  position: fixed;\n  top: 41px;\n  right: 30px;\n  left: 30px;\n}\n.seel--widget_modal--icon {\n  height: 30px;\n  margin-right: 10px;\n}\n/* .seel--widget_modal--title {\n  font-size: 22px;\n  font-weight: bold;\n  color: #212121;\n} */\n.seel--widget_modal--close {\n  height: 18px;\n  width: 18px;\n  cursor: pointer;\n}\n.seel--widget_modal--link_group {\n  display: flex;\n  flex-direction: row;\n  padding: 0 20px;\n  justify-content: space-around;\n}\n.seel--widget_modal--link {\n  text-align: center;\n  display: inline-block;\n  width: 100%;\n  font-size: 12px;\n  color: #626262;\n  text-decoration: underline;\n}\n.seel--widget_modal--link-empty {\n  text-align: center;\n  display: inline-block;\n  width: 100%;\n  font-size: 12px;\n  color: #626262;\n}\n.seel--widget_modal--blocks {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n}\n\n.seel--widget_modal--blocks-section {\n  background: #ffffff;\n  border: 1px solid #f0f0f0;\n  box-shadow: 0px 41.5312px 30.0211px rgba(0, 0, 0, 0.0151852),\n    0px 12.8153px 8.32997px rgba(0, 0, 0, 0.01),\n    0px 5.22106px 4.17685px rgba(0, 0, 0, 0.00785185),\n    0px 1.18661px 2.01723px rgba(0, 0, 0, 0.00481481);\n  border-radius: 10px;\n  display: flex;\n  flex-direction: column;\n  width: 100%\n}\n.seel--widget_modal--blocks-section-header {\n  font-size: 16px;\n  font-weight: 600;\n  height: 60px;\n  display: flex;\n  align-items: center;\n  border-bottom: 1px solid #f0f0f0;\n  color: #1e2022;\n}\n.seel--widget_modal--blocks-section-content {\n}\n.seel--widget_modal--blocks-section-content-img {\n  width: 48px;\n  height: 48px;\n  margin: 6px;\n}\n.seel--widget_modal--blocks-section-content-c {\n  width: 48px;\n  height: 48px;\n}\n.seel--widget_modal--blocks-section-content-text {\n  height: 30px;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n  font-size: 14px;\n  color: #565656;\n}\n.seel--widget_modal--blocks-section-content-text-icon {\n  width: 16px;\n  height: 16px;\n  margin: 6px;\n}\n.seel--widget_modal--blocks-section-content-b {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n}\n.seel--widget_modal--title--logo {\n  width: 130px;\n}\n.seel--widget_modal--paragraph a {\n  color: #212121;\n}\n@media screen and (max-width: 800px) {\n  .seel--widget_container {\n    padding: 20px 10px 20px 5px;\n  }\n}\n\n@media screen and (max-width: 375px) {\n  .seel--widget_container {\n    padding: 20px 5px;\n  }\n  .seel--widget_image {\n    margin-right: 0;\n  }\n  .seel--widget_content--primary--text {\n    font-size: 12px;\n  }\n  .seel--widget_content--secondary {\n    font-size: 12px;\n    line-height: 12px;\n    margin-top: 0;\n  }\n  .seel--widget_button {\n    width: 100%;\n    height: 16px;\n    margin-left: 0;\n  }\n  .seel--widget_mid-list-item {\n    min-width: 170px;\n  }\n}\n"],sourceRoot:""}]);const l=i},"./node_modules/react-loading-skeleton/dist/skeleton.css":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>y});var r=n("./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"),o=n.n(r),a=n("./node_modules/style-loader/dist/runtime/styleDomAPI.js"),i=n.n(a),l=n("./node_modules/style-loader/dist/runtime/insertBySelector.js"),s=n.n(l),u=n("./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js"),c=n.n(u),d=n("./node_modules/style-loader/dist/runtime/insertStyleElement.js"),f=n.n(d),p=n("./node_modules/style-loader/dist/runtime/styleTagTransform.js"),h=n.n(p),m=n("./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js!./node_modules/react-loading-skeleton/dist/skeleton.css"),v={};v.styleTagTransform=h(),v.setAttributes=c(),v.insert=s().bind(null,"head"),v.domAPI=i(),v.insertStyleElement=f();o()(m.default,v);const y=m.default&&m.default.locals?m.default.locals:void 0},"./src/components/widget.css":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>y});var r=n("./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"),o=n.n(r),a=n("./node_modules/style-loader/dist/runtime/styleDomAPI.js"),i=n.n(a),l=n("./node_modules/style-loader/dist/runtime/insertBySelector.js"),s=n.n(l),u=n("./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js"),c=n.n(u),d=n("./node_modules/style-loader/dist/runtime/insertStyleElement.js"),f=n.n(d),p=n("./node_modules/style-loader/dist/runtime/styleTagTransform.js"),h=n.n(p),m=n("./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js!./src/components/widget.css"),v={};v.styleTagTransform=h(),v.setAttributes=c(),v.insert=s().bind(null,"head"),v.domAPI=i(),v.insertStyleElement=f();o()(m.default,v);const y=m.default&&m.default.locals?m.default.locals:void 0},"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},i=[],l=0;l<e.length;l++){var s=e[l],u=r.base?s[0]+r.base:s[0],c=a[u]||0,d="".concat(u," ").concat(c);a[u]=c+1;var f=n(d),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==f)t[f].references++,t[f].updater(p);else{var h=o(p,r);r.byIndex=l,t.splice(l,0,{identifier:d,updater:h,references:1})}i.push(d)}return i}function o(e,t){var n=t.domAPI(t);n.update(e);return function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var l=n(a[i]);t[l].references--}for(var s=r(e,o),u=0;u<a.length;u++){var c=n(a[u]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}a=s}}},"./node_modules/style-loader/dist/runtime/insertBySelector.js":e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},"./node_modules/style-loader/dist/runtime/insertStyleElement.js":e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},"./node_modules/style-loader/dist/runtime/styleDomAPI.js":e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},"./node_modules/style-loader/dist/runtime/styleTagTransform.js":e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},"./node_modules/react-loading-skeleton/dist/index.mjs":(e,t,n)=>{"use strict";n.r(t),n.d(t,{SkeletonTheme:()=>s,default:()=>l});var r=n("./node_modules/react/index.js");const o=r.createContext({}),a=!0;function i({baseColor:e,highlightColor:t,width:n,height:r,borderRadius:o,circle:i,direction:l,duration:s,enableAnimation:u=a}){const c={};return"rtl"===l&&(c["--animation-direction"]="reverse"),"number"==typeof s&&(c["--animation-duration"]=`${s}s`),u||(c["--pseudo-element-display"]="none"),"string"!=typeof n&&"number"!=typeof n||(c.width=n),"string"!=typeof r&&"number"!=typeof r||(c.height=r),"string"!=typeof o&&"number"!=typeof o||(c.borderRadius=o),i&&(c.borderRadius="50%"),void 0!==e&&(c["--base-color"]=e),void 0!==t&&(c["--highlight-color"]=t),c}function l({count:e=1,wrapper:t,className:n,containerClassName:l,containerTestId:s,circle:u=!1,style:c,...d}){var f,p,h;const m=r.useContext(o),v={...d};for(const[e,t]of Object.entries(d))void 0===t&&delete v[e];const y={...m,...v,circle:u},g={...c,...i(y)};let b="react-loading-skeleton";n&&(b+=` ${n}`);const w=null!==(f=y.inline)&&void 0!==f&&f,k=[],A=Math.ceil(e);for(let t=0;t<A;t++){let n=g;if(A>e&&t===A-1){const t=null!==(p=n.width)&&void 0!==p?p:"100%",r=e%1,o="number"==typeof t?t*r:`calc(${t} * ${r})`;n={...n,width:o}}const o=r.createElement("span",{className:b,style:n,key:t},"‌");w?k.push(o):k.push(r.createElement(r.Fragment,{key:t},o,r.createElement("br",null)))}return r.createElement("span",{className:l,"data-testid":s,"aria-live":"polite","aria-busy":null!==(h=y.enableAnimation)&&void 0!==h?h:a},t?k.map(((e,n)=>r.createElement(t,{key:n},e))):k)}function s({children:e,...t}){return r.createElement(o.Provider,{value:t},e)}},"./node_modules/react-switch/dist/index.dev.mjs":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>d});var r=n("./node_modules/react/index.js"),o=n("./node_modules/prop-types/index.js");function a(){return a=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a.apply(this,arguments)}var i=r.createElement("svg",{viewBox:"-2 -5 14 20",height:"100%",width:"100%",style:{position:"absolute",top:0}},r.createElement("path",{d:"M9.9 2.12L7.78 0 4.95 2.828 2.12 0 0 2.12l2.83 2.83L0 7.776 2.123 9.9 4.95 7.07 7.78 9.9 9.9 7.776 7.072 4.95 9.9 2.12",fill:"#fff",fillRule:"evenodd"})),l=r.createElement("svg",{height:"100%",width:"100%",viewBox:"-2 -5 17 21",style:{position:"absolute",top:0}},r.createElement("path",{d:"M11.264 0L5.26 6.004 2.103 2.847 0 4.95l5.26 5.26 8.108-8.107L11.264 0",fill:"#fff",fillRule:"evenodd"}));function s(e){if(7===e.length)return e;for(var t="#",n=1;n<4;n+=1)t+=e[n]+e[n];return t}function u(e,t,n,r,o){return function(e,t,n,r,o){var a=(e-n)/(t-n);if(0===a)return r;if(1===a)return o;for(var i="#",l=1;l<6;l+=2){var s=parseInt(r.substr(l,2),16),u=parseInt(o.substr(l,2),16),c=Math.round((1-a)*s+a*u).toString(16);1===c.length&&(c="0"+c),i+=c}return i}(e,t,n,s(r),s(o))}var c=function(e,t,n){var r=e[t];return"string"!=typeof r||"#"!==r[0]||4!==r.length&&7!==r.length?new Error("Invalid prop '"+t+"' supplied to '"+n+"'. '"+t+"' has to be either a 3-digit or 6-digit hex-color string. Valid examples: '#abc', '#123456'"):null};var d=function(e){function t(t){e.call(this,t);var n=t.height,r=t.width,o=t.handleDiameter,a=t.checked;this.$handleDiameter=o||n-2,this.$checkedPos=Math.max(r-n,r-(n+this.$handleDiameter)/2),this.$uncheckedPos=Math.max(0,(n-this.$handleDiameter)/2),this.state={$pos:a?this.$checkedPos:this.$uncheckedPos},this.$lastDragAt=0,this.$lastKeyUpAt=0,this.$onMouseDown=this.$onMouseDown.bind(this),this.$onMouseMove=this.$onMouseMove.bind(this),this.$onMouseUp=this.$onMouseUp.bind(this),this.$onTouchStart=this.$onTouchStart.bind(this),this.$onTouchMove=this.$onTouchMove.bind(this),this.$onTouchEnd=this.$onTouchEnd.bind(this),this.$onClick=this.$onClick.bind(this),this.$onInputChange=this.$onInputChange.bind(this),this.$onKeyUp=this.$onKeyUp.bind(this),this.$setHasOutline=this.$setHasOutline.bind(this),this.$unsetHasOutline=this.$unsetHasOutline.bind(this),this.$getInputRef=this.$getInputRef.bind(this)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.componentDidMount=function(){this.$isMounted=!0},t.prototype.componentDidUpdate=function(e){if(e.checked!==this.props.checked){var t=this.props.checked?this.$checkedPos:this.$uncheckedPos;this.setState({$pos:t})}},t.prototype.componentWillUnmount=function(){this.$isMounted=!1},t.prototype.$onDragStart=function(e){this.$inputRef.focus(),this.setState({$startX:e,$hasOutline:!0,$dragStartingTime:Date.now()})},t.prototype.$onDrag=function(e){var t=this.state,n=t.$startX,r=t.$isDragging,o=t.$pos,a=(this.props.checked?this.$checkedPos:this.$uncheckedPos)+e-n;r||e===n||this.setState({$isDragging:!0});var i=Math.min(this.$checkedPos,Math.max(this.$uncheckedPos,a));i!==o&&this.setState({$pos:i})},t.prototype.$onDragStop=function(e){var t=this.state,n=t.$pos,r=t.$isDragging,o=t.$dragStartingTime,a=this.props.checked,i=(this.$checkedPos+this.$uncheckedPos)/2,l=this.props.checked?this.$checkedPos:this.$uncheckedPos;this.setState({$pos:l});var s=Date.now()-o;(!r||s<250||(a&&n<=i||!a&&n>=i))&&this.$onChange(e),this.$isMounted&&this.setState({$isDragging:!1,$hasOutline:!1}),this.$lastDragAt=Date.now()},t.prototype.$onMouseDown=function(e){e.preventDefault(),"number"==typeof e.button&&0!==e.button||(this.$onDragStart(e.clientX),window.addEventListener("mousemove",this.$onMouseMove),window.addEventListener("mouseup",this.$onMouseUp))},t.prototype.$onMouseMove=function(e){e.preventDefault(),this.$onDrag(e.clientX)},t.prototype.$onMouseUp=function(e){this.$onDragStop(e),window.removeEventListener("mousemove",this.$onMouseMove),window.removeEventListener("mouseup",this.$onMouseUp)},t.prototype.$onTouchStart=function(e){this.$checkedStateFromDragging=null,this.$onDragStart(e.touches[0].clientX)},t.prototype.$onTouchMove=function(e){this.$onDrag(e.touches[0].clientX)},t.prototype.$onTouchEnd=function(e){e.preventDefault(),this.$onDragStop(e)},t.prototype.$onInputChange=function(e){Date.now()-this.$lastDragAt>50&&(this.$onChange(e),Date.now()-this.$lastKeyUpAt>50&&this.$isMounted&&this.setState({$hasOutline:!1}))},t.prototype.$onKeyUp=function(){this.$lastKeyUpAt=Date.now()},t.prototype.$setHasOutline=function(){this.setState({$hasOutline:!0})},t.prototype.$unsetHasOutline=function(){this.setState({$hasOutline:!1})},t.prototype.$getInputRef=function(e){this.$inputRef=e},t.prototype.$onClick=function(e){e.preventDefault(),this.$inputRef.focus(),this.$onChange(e),this.$isMounted&&this.setState({$hasOutline:!1})},t.prototype.$onChange=function(e){var t=this.props,n=t.checked;(0,t.onChange)(!n,e,t.id)},t.prototype.render=function(){var e=this.props,t=e.checked,n=e.disabled,o=e.className,i=e.offColor,l=e.onColor,s=e.offHandleColor,c=e.onHandleColor,d=e.checkedIcon,f=e.uncheckedIcon,p=e.checkedHandleIcon,h=e.uncheckedHandleIcon,m=e.boxShadow,v=e.activeBoxShadow,y=e.height,g=e.width,b=e.borderRadius;e.handleDiameter;var w=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&-1===t.indexOf(r)&&(n[r]=e[r]);return n}(e,["checked","disabled","className","offColor","onColor","offHandleColor","onHandleColor","checkedIcon","uncheckedIcon","checkedHandleIcon","uncheckedHandleIcon","boxShadow","activeBoxShadow","height","width","borderRadius","handleDiameter"]),k=this.state,A=k.$pos,E=k.$isDragging,x=k.$hasOutline,C={position:"relative",display:"inline-block",textAlign:"left",opacity:n?.5:1,direction:"ltr",borderRadius:y/2,WebkitTransition:"opacity 0.25s",MozTransition:"opacity 0.25s",transition:"opacity 0.25s",touchAction:"none",WebkitTapHighlightColor:"rgba(0, 0, 0, 0)",WebkitUserSelect:"none",MozUserSelect:"none",msUserSelect:"none",userSelect:"none"},S={height:y,width:g,margin:Math.max(0,(this.$handleDiameter-y)/2),position:"relative",background:u(A,this.$checkedPos,this.$uncheckedPos,i,l),borderRadius:"number"==typeof b?b:y/2,cursor:n?"default":"pointer",WebkitTransition:E?null:"background 0.25s",MozTransition:E?null:"background 0.25s",transition:E?null:"background 0.25s"},_={height:y,width:Math.min(1.5*y,g-(this.$handleDiameter+y)/2+1),position:"relative",opacity:(A-this.$uncheckedPos)/(this.$checkedPos-this.$uncheckedPos),pointerEvents:"none",WebkitTransition:E?null:"opacity 0.25s",MozTransition:E?null:"opacity 0.25s",transition:E?null:"opacity 0.25s"},T={height:y,width:Math.min(1.5*y,g-(this.$handleDiameter+y)/2+1),position:"absolute",opacity:1-(A-this.$uncheckedPos)/(this.$checkedPos-this.$uncheckedPos),right:0,top:0,pointerEvents:"none",WebkitTransition:E?null:"opacity 0.25s",MozTransition:E?null:"opacity 0.25s",transition:E?null:"opacity 0.25s"},O={height:this.$handleDiameter,width:this.$handleDiameter,background:u(A,this.$checkedPos,this.$uncheckedPos,s,c),display:"inline-block",cursor:n?"default":"pointer",borderRadius:"number"==typeof b?b-1:"50%",position:"absolute",transform:"translateX("+A+"px)",top:Math.max(0,(y-this.$handleDiameter)/2),outline:0,boxShadow:x?v:m,border:0,WebkitTransition:E?null:"background-color 0.25s, transform 0.25s, box-shadow 0.15s",MozTransition:E?null:"background-color 0.25s, transform 0.25s, box-shadow 0.15s",transition:E?null:"background-color 0.25s, transform 0.25s, box-shadow 0.15s"},R={height:this.$handleDiameter,width:this.$handleDiameter,opacity:Math.max(2*(1-(A-this.$uncheckedPos)/(this.$checkedPos-this.$uncheckedPos)-.5),0),position:"absolute",left:0,top:0,pointerEvents:"none",WebkitTransition:E?null:"opacity 0.25s",MozTransition:E?null:"opacity 0.25s",transition:E?null:"opacity 0.25s"},P={height:this.$handleDiameter,width:this.$handleDiameter,opacity:Math.max(2*((A-this.$uncheckedPos)/(this.$checkedPos-this.$uncheckedPos)-.5),0),position:"absolute",left:0,top:0,pointerEvents:"none",WebkitTransition:E?null:"opacity 0.25s",MozTransition:E?null:"opacity 0.25s",transition:E?null:"opacity 0.25s"};return r.createElement("div",{className:o,style:C},r.createElement("div",{className:"react-switch-bg",style:S,onClick:n?null:this.$onClick,onMouseDown:function(e){return e.preventDefault()}},d&&r.createElement("div",{style:_},d),f&&r.createElement("div",{style:T},f)),r.createElement("div",{className:"react-switch-handle",style:O,onClick:function(e){return e.preventDefault()},onMouseDown:n?null:this.$onMouseDown,onTouchStart:n?null:this.$onTouchStart,onTouchMove:n?null:this.$onTouchMove,onTouchEnd:n?null:this.$onTouchEnd,onTouchCancel:n?null:this.$unsetHasOutline},h&&r.createElement("div",{style:R},h),p&&r.createElement("div",{style:P},p)),r.createElement("input",a({},{type:"checkbox",role:"switch","aria-checked":t,checked:t,disabled:n,style:{border:0,clip:"rect(0 0 0 0)",height:1,margin:-1,overflow:"hidden",padding:0,position:"absolute",width:1}},w,{ref:this.$getInputRef,onFocus:this.$setHasOutline,onBlur:this.$unsetHasOutline,onKeyUp:this.$onKeyUp,onChange:this.$onInputChange})))},t}(r.Component);d.propTypes={checked:o.bool.isRequired,onChange:o.func.isRequired,disabled:o.bool,offColor:c,onColor:c,offHandleColor:c,onHandleColor:c,handleDiameter:o.number,uncheckedIcon:o.oneOfType([o.bool,o.element]),checkedIcon:o.oneOfType([o.bool,o.element]),boxShadow:o.string,borderRadius:o.number,activeBoxShadow:o.string,uncheckedHandleIcon:o.element,checkedHandleIcon:o.element,height:o.number,width:o.number,id:o.string,className:o.string},d.defaultProps={disabled:!1,offColor:"#888",onColor:"#080",offHandleColor:"#fff",onHandleColor:"#fff",uncheckedIcon:i,checkedIcon:l,boxShadow:null,activeBoxShadow:"0 0 2px 3px #3bf",height:28,width:56}},"./src/config.json":e=>{"use strict";e.exports=JSON.parse('{"embeds":[{"layout":"checkout","anchor":"#seel-worry-free-widget-root","observers":[],"assets":{"icon":"https://cdn.seel.com/assets/images/GD_icon.png","name":"Worry Free ${price}","template":"${joinedText}","errorText":"","policy":{"contents":"Return Assurance gives you a 7-day return window on otherwise final sale items. If you’re unhappy with the purchase for any reason, Seel will buy it back from you for 100% of the purchase price you paid. You can use the Seel Resolution Center to effortlessly make the return. Shipping and return shipping fees are not included. The cost of the Return Option is non-refundable.","note":""}}}]}')}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,loaded:!1,exports:{}};return e[r](a,a.exports,n),a.loaded=!0,a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),n.nc=void 0;var r={};(()=>{"use strict";n.r(r);var e=n("./node_modules/react/index.js"),t=n.n(e),o=n("./node_modules/react-dom/client.js"),a=n("./src/common/index.js"),i=n("./src/components/widget.jsx"),l=n("./src/config.json"),s=n("./src/common/events.js");function u(e){return u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},u(e)}var c=["meta"];function d(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function f(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?d(Object(n),!0).forEach((function(t){p(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):d(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==u(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!==u(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"===u(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function h(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function m(){m=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function c(e,t,n,o){var a=t&&t.prototype instanceof p?t:p,i=Object.create(a.prototype),l=new _(o||[]);return r(i,"_invoke",{value:E(e,n,l)}),i}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=c;var f={};function p(){}function h(){}function v(){}var y={};s(y,a,(function(){return this}));var g=Object.getPrototypeOf,b=g&&g(g(T([])));b&&b!==t&&n.call(b,a)&&(y=b);var w=v.prototype=p.prototype=Object.create(y);function k(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function A(e,t){function o(r,a,i,l){var s=d(e[r],e,a);if("throw"!==s.type){var c=s.arg,f=c.value;return f&&"object"==u(f)&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){o("next",e,i,l)}),(function(e){o("throw",e,i,l)})):t.resolve(f).then((function(e){c.value=e,i(c)}),(function(e){return o("throw",e,i,l)}))}l(s.arg)}var a;r(this,"_invoke",{value:function(e,n){function r(){return new t((function(t,r){o(e,n,t,r)}))}return a=a?a.then(r,r):r()}})}function E(e,t,n){var r="suspendedStart";return function(o,a){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw a;return O()}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var l=x(i,n);if(l){if(l===f)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var s=d(e,t,n);if("normal"===s.type){if(r=n.done?"completed":"suspendedYield",s.arg===f)continue;return{value:s.arg,done:n.done}}"throw"===s.type&&(r="completed",n.method="throw",n.arg=s.arg)}}}function x(e,t){var n=t.method,r=e.iterator[n];if(void 0===r)return t.delegate=null,"throw"===n&&e.iterator.return&&(t.method="return",t.arg=void 0,x(e,t),"throw"===t.method)||"return"!==n&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+n+"' method")),f;var o=d(r,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,f;var a=o.arg;return a?a.done?(t[e.resultName]=a.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,f):a:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,f)}function C(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function S(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function T(e){if(e){var t=e[a];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:O}}function O(){return{value:void 0,done:!0}}return h.prototype=v,r(w,"constructor",{value:v,configurable:!0}),r(v,"constructor",{value:h,configurable:!0}),h.displayName=s(v,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===h||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,v):(e.__proto__=v,s(e,l,"GeneratorFunction")),e.prototype=Object.create(w),e},e.awrap=function(e){return{__await:e}},k(A.prototype),s(A.prototype,i,(function(){return this})),e.AsyncIterator=A,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new A(c(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},k(w),s(w,l,"Generator"),s(w,a,(function(){return this})),s(w,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=T,_.prototype={constructor:_,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(S),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return i.type="throw",i.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],i=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var l=n.call(a,"catchLoc"),s=n.call(a,"finallyLoc");if(l&&s){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(l){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,f):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),f},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),S(n),f}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;S(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:T(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),f}},e}function v(e,t,n,r,o,a,i){try{var l=e[a](i),s=l.value}catch(e){return void n(e)}l.done?t(s):Promise.resolve(s).then(r,o)}function y(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){v(a,r,o,i,l,"next",e)}function l(e){v(a,r,o,i,l,"throw",e)}i(void 0)}))}}var g="seel-widget-worry-free-element",b=function(e){var t,n=window.location.host;null===(t=sessionStorage)||void 0===t||t.setItem("".concat(n,"-seel-widget-worry-free-status"),e)};document.addEventListener(a.EventsWorryFree.checked,(function(e){b(!0)})),document.addEventListener(a.EventsWorryFree.unchecked,(function(e){b(!1)}));window.SeelWorryFreeSDK={EventsWorryFree:a.EventsWorryFree,seelWorryFreeSDK:{checkWorryFreeEligibility:a.checkWorryFreeEligibility,createWorryFreeQuote:(0,a.createWorryFreeQuote)(),triggerEventWorryFree:function(e){var t=new CustomEvent(e,{detail:{data:arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}}});document.dispatchEvent(t)},setupListener:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){};e!==a.EventsWorryFree.checked&&e!==a.EventsWorryFree.unchecked||document.addEventListener(e,(function(e){t((null==e?void 0:e.detail)||{})}))},freezeToggle:function(e){(0,s.dispatchCustomEvent)(s.FREEZE_TOGGLE,{status:"success",data:e})}}};var w=null,k=function(e){var n=e.status,r=e.price,a=e.quoteId,l=e.extraInfo,s=e.config,u=e.total,c=e.wgStartLoadTime;w&&(w.disconnect(),w=null);var d=document.querySelector("body");w=new MutationObserver(function(e){var n=e.status,r=e.price,a=e.quoteId,l=e.extraInfo,s=e.config,u=e.total;return e.wgStartLoadTime,function(e,c){var d=document.querySelector(s.anchor);if(d){c.disconnect(),c=null;var f=document.createElement("div");f.setAttribute("id",g),d.append(f),(0,o.createRoot)(f).render(t().createElement(i.Widget,{key:"async",status:n,price:r,quoteId:a,extraInfo:l,config:s,total:u}))}}}({status:n,price:r,quoteId:a,extraInfo:l,config:s,total:u,wgStartLoadTime:c})),w.observe(d,{childList:!0,attributes:!0,subtree:!0})},A=function(){var e=y(m().mark((function e(n){var r,a,l,s,u,c,d,f,p,h;return m().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r=n.status,a=n.price,l=n.quoteId,s=n.extraInfo,u=n.config,c=n.total,d=Date.now(),!document.querySelector("#".concat(g))){e.next=4;break}return e.abrupt("return");case 4:f=u.anchor,(p=document.querySelector(f))?((h=document.createElement("div")).setAttribute("id",g),p.append(h),(0,o.createRoot)(h).render(t().createElement(i.Widget,{key:"sync",status:r,price:a,quoteId:l,extraInfo:s,config:u,total:c}))):k({status:r,price:a,quoteId:l,extraInfo:s,config:u,total:c,wgStartLoadTime:d});case 7:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),E=function(){var e=y(m().mark((function e(){return m().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:document.addEventListener(s.QUOTE_COMPLETED,function(){var e=y(m().mark((function e(t){var n,r,o,a,i,s,u,d,p,v,y,g;return m().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.detail,r=n.status,o=n.data,a=o.price,i=o.quoteId,s=o.extraInfo,u=o.total,d=l.embeds.find((function(e){return"checkout"==e.layout})),v=(p=d||{}).meta,y=void 0===v?{}:v,g=h(p,c),d=f(f({},g),{},{meta:f(f({},y),{},{check:(m=void 0,b=void 0,b=window.location.host,"true"===(null===(m=sessionStorage)||void 0===m?void 0:m.getItem("".concat(b,"-seel-widget-worry-free-status"))))})}),e.next=9,A({status:r,price:a,quoteId:i,extraInfo:s,config:d,total:u});case 9:case"end":return e.stop()}var m,b}),e)})));return function(t){return e.apply(this,arguments)}}());case 2:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();try{E()}catch(e){}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,